# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake
from wake import _
from gcc_wake import _

def buildFuse (Pair (variant: String) _): Result (List Path) Error =
    def libobjsResult =
        buildFuseLibObjs variant

    require Pass json =
        common variant

    def headers =
        json.getSysLibHeaders ++
        sources "fuse" `.*\.h`

    require Pass client =
        compileC variant json.getSysLibCFlags headers (source "fuse/client.cpp")

    require Pass libobjs =
        libobjsResult

    linkO variant json.getSysLibLFlags (client ++ libobjs) "bin/fuse-wake"

def buildFuseLibObjs (variant: String): Result (List Path) Error =
    require Pass json =
        common variant

    def headers =
        json.getSysLibHeaders ++
        sources "fuse" `.*\.h`

    def cppFiles =
        sources "fuse" `(fuse|namespace|daemon_client).cpp`

    def compile =
        compileC variant json.getSysLibCFlags headers

    require Pass objs =
        map compile cppFiles
        | findFail

    Pass (objs.flatten ++ json.getSysLibObjects)

def buildFuseDaemon (Pair (variant: String) _): Result (List Path) Error =
    def fuseOption =
        pkgConfig "fuse"

    require Pass json =
        common variant

    require Some fuse =
        fuseOption
    else
        failWithError "fuse library not installed"

    def deps =
        flattenSysLibs (json, fuse, Nil)

    require Pass daemon =
        compileC variant deps.getSysLibCFlags deps.getSysLibHeaders (source "{here}/daemon.cpp")

    def objFiles = daemon ++ deps.getSysLibObjects

    linkO variant deps.getSysLibLFlags objFiles "lib/wake/fuse-waked"
