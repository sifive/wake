# Copyright 2024 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake

from wake import _

# TODO: ADD wasm build
# TODO: Add npm build (can probably just use the WASM docker image)

export def vscode _: Result Path Error =
    require Pass packageLockJSON = source "{@here}/package-lock.json"
    require Pass release = buildAs Unit
    require Pass packageJSON = setVersion (replace `~` "-" release) "{@here}/package.json"

    require Pass npm =
        whichInEnvPath "npm"
        | getOrFail "Unable to find npm in $PATH".makeError

    def nodeBinDir = dirname npm

    require Pass nodeModules =
        makeExecPlan (npm, "ci", Nil) (packageJSON, packageLockJSON, Nil)
        | setPlanLabel "npm ci: Install npm dependencies"
        # npm expects to be able to do "which node" so we need to add the entire bin dir to env
        | editPlanEnvironment (addEnvironmentPath nodeBinDir)
        # npm writes ./node_modules, cwd to @here so they are in the correct location
        | setPlanDirectory @here
        # npm installs its dependencies from the web, and so can't be fully sandboxed.
        | setPlanShare False
        | runJobWith defaultRunner
        | getJobOutputs

    require Pass images = sources @here `images/.*`
    require Pass onlineImages = sources @here `online_images/.*`
    require Pass srcs = sources @here `src/.*`
    require Pass syntaxes = sources @here `syntaxes/.*`
    require Pass vsceStdin = source "{@here}/vsce-stdin"
    require Pass tsConfig = source "{@here}/tsconfig.json"
    require Pass vsCodeIgnore = source "{@here}/.vscodeignore"
    require Pass license = source "{@here}/LICENSE.txt"
    require Pass readme = source "{@here}/README.md"
    require Pass esbuild = source "{@here}/esbuild.js"
    require Pass languageConfiguration = source "{@here}/language-configuration.json"

    def vsceFiles =
        esbuild,
        vsceStdin,
        tsConfig,
        packageJSON,
        vsCodeIgnore,
        license,
        readme,
        languageConfiguration,
        images ++ onlineImages ++ srcs ++ syntaxes ++ nodeModules

    require Pass npx =
        whichInEnvPath "npx"
        | getOrFail "Unable to find npx in $PATH".makeError

    require Pass outputs =
        makeExecPlan (npx, "@vscode/vsce", "package", Nil) vsceFiles
        | setPlanLabel "vsce: Package vsix extension"
        # npx expects to be able to do "which node" so we need to add the entire bin dir to env
        | editPlanEnvironment (addEnvironmentPath nodeBinDir)
        # npx looks for ./node_modules so set cwd to @here
        | setPlanDirectory @here
        # npx asks the user y/n if it should download the program we want to run
        | setPlanStdin (relative @here vsceStdin.getPathName)
        | setPlanIsAtty True
        | runJobWith defaultRunner
        | getJobOutputs

    require vsix, Nil = filter (matches `.*\.vsix` _.getPathName) outputs
    else failWithError "vsce failed to produce vsix output; got: {format files}"

    Pass vsix
