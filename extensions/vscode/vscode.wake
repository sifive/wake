# Copyright 2021 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake
from wake import _

def installRO path =
    def dest =
        "{here}/{path.getPathName}"
    require Pass destDir =
        simplify "{dest}/.."
        | mkdir
    def inputs =
        destDir, path, Nil
    "install -m 444 {path.getPathName} {dest}"
    | makePlan "install: {dest}" inputs
    | runJob
    | getJobOutput

def createStdlibJSON (stdlibSources: List Path): Result Path Error =
    def formatPath path =
        getPathName path | replace `share/wake/lib` ""
    def formattedPaths =
        map formatPath stdlibSources
    def content =
        JObject ("files" :-> JArray (map JString formattedPaths), Nil)
    write "{here}/stdlib.json" (prettyJSON content)

export def vscode _: Result Path Error =
    require Pass variant =
        toVariant "wasm"

    require Pass files =
        buildLSP variant

    require js, Nil =
        filter (matches `.*\.wasm-.*` _.getPathName) files
    else
        failWithError "Did not find empscripten javascript output; got: {format files}"

    require Pass jsFile =
        installAs "{here}/lsp-server/wasm/lsp-wake.js" js

    require Pass packageLockJSON =
        source "{here}/package-lock.json"

    require Pass release =
        buildAs Unit

    require Pass packageJSON =
        setVersion (replace `~` "-" release) "{here}/package.json"

    require Pass nodeModules =
        makeExecPlan (which "npm", "ci", Nil) (packageJSON, packageLockJSON, Nil)
        | setPlanDirectory here
        | runJob
        | getJobOutputs

    require Pass stdlibSources =
        sources "share/wake/lib" `.*`
    require Pass stdlib =
        stdlibSources
        | findFailFn installRO
    require Pass stdlibJSON =
        createStdlibJSON  stdlibSources

    require Pass currentDirSources =
        sources here `[^/]*`
    require Pass imagesSources =
        sources here `images/.*`
    require Pass clientSources =
        sources here `lsp-client/.*`
    require Pass serverSources =
        sources here `lsp-server/.*`
    require Pass syntaxSources =
        sources here `syntaxes/.*`
    def vsceFiles =
        jsFile,
        packageJSON,
        stdlibJSON,
        currentDirSources ++
        imagesSources ++
        clientSources ++
        serverSources ++
        syntaxSources ++
        stdlib ++
        nodeModules

    require Pass outputs =
        makeExecPlan (which "npx", "vsce@1.103.1", "package", Nil) vsceFiles
        | setPlanDirectory here
        | runJob
        | getJobOutputs

    require vsix, Nil =
        filter (matches `.*\.vsix` _.getPathName) outputs
    else
        failWithError "vsce failed to produce vsix output; got: {format files}"

    Pass vsix
