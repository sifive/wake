# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake
from wake import _
from gcc_wake import _

def emccFn fn = match emcc
    None = Nil
    Some x = fn x

def emcc =
    require Some path = getenv "PATH"
    def emcc = whichIn path "emcc"
    if matches `/.*` emcc then
        Some emcc
    else
        None

def emppFn fn = match empp
    None = Nil
    Some x = fn x

def empp =
    require Some path = getenv "PATH"
    def empp = whichIn path "em++"
    if matches `/.*` empp then
        Some empp
    else
        None

def emscriptenCFlags = Nil
def emscriptenLFlags =
  "-s", "NODERAWFS=1", Nil

publish compileC = emccFn (makeCompileC "wasm-c99-release"   _ (emscriptenCFlags ++ c99Flags ++ releaseCFlags))
publish compileC = emppFn (makeCompileC "wasm-cpp11-release" _ (emscriptenCFlags ++ c11Flags ++ releaseCFlags))
publish linkO = emccFn (makeLinkO "wasm-c99-release"   _ (emscriptenLFlags ++ releaseLFlags))
publish linkO = emppFn (makeLinkO "wasm-cpp11-release" _ (emscriptenLFlags ++ releaseLFlags))

export def wasm _ =
    require Pass variant = toVariant "wasm"
    def working = buildFuse, buildShim, buildPreload, buildBSP, buildLSP, Nil
    # not_working = buildWake (needs gmp+re2+sqlite3), buildFuseDaemon (needs fuse), buildPrelib (no shared libs)
    map (_ variant) working | findFailFn getPathResult
