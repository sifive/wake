# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake

from wake import _
from gcc_wake import _

def tool (dir: String) (addHeaders: List Path) (variant: Pair String String) (output: String) (deps: List (Pair String String => Result SysLib Error)) (extraFiles: List Path) (extraLFlags: List String): Result (List Path) Error =
    def Pair cppVariant cVariant =
        variant

    require Pass libs =
        map (_ variant) deps
        | findFail

    def lib =
        flattenSysLibs libs

    def wanted = cat $ map ("{_.getPathName}\n") lib.getSysLibObjects
    def _ = if output ==~ "bin/wake" then println wanted else Unit

    require Pass headerPaths =
        sources here `.*\.h`
    def headers =
        lib.getSysLibHeaders ++
        headerPaths ++
        addHeaders

    def cflags =
        lib.getSysLibCFlags

    require Pass cSources =
        sources dir `.*\.c`
    require Pass cppSources =
        sources dir `.*\.cpp`
    def objectResults =
        map (compileC cVariant   cflags headers) cSources ++
        map (compileC cppVariant cflags headers) cppSources

    require Pass objects =
        findFail objectResults

    def allObjects =
        lib.getSysLibObjects ++
        objects.flatten

    require Pass cppSources =
        sources dir `.*\.cpp`

    def linkKind =
        if empty cppSources then
            cVariant
        else
            cppVariant

    linkO linkKind (lib.getSysLibLFlags ++ extraLFlags) allObjects output extraFiles
