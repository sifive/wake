name: "Test"

on:
    pull_request:

jobs:
    tarball:
      runs-on: ubuntu-latest
      name: Tarball
      steps: 
        - name: Clone wake
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Install Deps
          run: sudo apt-get update && sudo apt-get install -y build-essential fuse libfuse-dev libsqlite3-dev libgmp-dev libncurses5-dev pkg-config git g++ gcc libre2-dev python3-sphinx clang-format-12

        - name: Check Formatting
          run: clang-format-12 --style=file --Werror -n $(./scripts/which_clang_files all)

        - name: Build Tarball
          run: make tarball

        - name: Run Tests
          run: make test && make unittest

        - name: Generate Docs
          run: mkdir www && ./bin/wake --no-workspace --html > www/index.html

        - name: wake to rst
          run: PATH=$(pwd)/bin:$PATH PYTHONPATH=$(pwd)/scripts python3 scripts/wake2rst.py

        - name: Upload tarball 
          uses: actions/upload-artifact@v3
          with:
            name: tarball
            path: wake_*.tar.xz

        - name: Upload Dockerfiles 
          uses: actions/upload-artifact@v3
          with:
            name: dockerfiles
            path: .circleci/dockerfiles/

        - name: Upload debian files
          uses: actions/upload-artifact@v3
          with:
            name: debian
            path: debian 

        - name: Upload www files
          uses: actions/upload-artifact@v3
          with:
            name: www
            path: www 

        - name: Upload test artifacts 
          uses: actions/upload-artifact@v3
          with:
            name: tests
            path: tests

        - name: Upload html 
          uses: actions/upload-artifact@v3
          with:
            name: html
            path: scripts/sphinx/build/html

    build_docker_images:
      runs-on: ubuntu-latest
      needs: tarball # doesn't actually but keep until we've solved the multi-dep problem
      name: Build Docker Images
      steps:
        - name: Clone wake
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Build docker image
          run: docker build -f .circleci/dockerfiles/wasm -t wake-wasm .

        - name: Test ls 
          run: ls 

        - name: Upload Docker Images
          uses: actions/upload-artifact@v3
          with:
            name: docker-images
            path: wake-wasm



    vscode_stable:
      runs-on: ubuntu-latest
      needs: build_docker_images
      name: VSCode Extension (stable)
      steps: 
        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball

        - name: Download Dockerfile
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles

        - name: Build docker image
          run: docker build -f wasm -t wake-wasm .

        - name: Create docker shared build directory
          run: mkdir build && chmod ugo+rwx build

        - name: Copy wake resources to build directory
          run: cp wake_*.tar.xz build

        - name: Build Wake
          run: docker run -u build --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-wasm /bin/sh -c 'tar xvJf wake_*.tar.xz && make -C wake-* vscode'

        - name: Install vsix
          run: install -D -t release/vscode build/wake-*/extensions/vscode/wake-*.vsix

        - name: Upload build artifacts
          uses: actions/upload-artifact@v3
          with:
            name: vscode-extension-stable 
            path: release/vscode/*.vsix

    
    
    build:
        name: "MacOS build"
        runs-on: macos-10.15

        steps:
            - name: "Clone wake"
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
          
            - name: "Install deps"
              run: |
                brew install --cask osxfuse
                brew install re2 || brew install re2 --head

            - name: "Build wake"
              run: make all -j3

            - name: "Test wake"
              run: make test
