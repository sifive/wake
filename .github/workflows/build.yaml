name: "Test"

on:
  pull_request:
  push:
    tags:
      - "v*"

jobs:
    tarball:
      runs-on: ubuntu-latest
      name: Tarball
      steps:
        - name: Clone wake
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Install Deps
          run: sudo apt-get update && sudo apt-get install -y build-essential fuse libfuse-dev libsqlite3-dev libgmp-dev libncurses5-dev pkg-config git g++ gcc libre2-dev python3-sphinx clang-format-12

        - name: Check Formatting
          run: clang-format-12 --style=file --Werror -n $(./scripts/which_clang_files all)

        - name: Build Tarball
          run: make tarball

        - name: Run Tests
          run: make test && make unittest

        - name: Generate Docs
          run: mkdir www && ./bin/wake --no-workspace --html > www/index.html

        - name: wake to rst
          run: PATH=$(pwd)/bin:$PATH PYTHONPATH=$(pwd)/scripts python3 scripts/wake2rst.py

        - name: Upload tarball
          uses: actions/upload-artifact@v3
          with:
            name: tarball
            path: wake_*.tar.xz

        - name: Upload Dockerfiles
          uses: actions/upload-artifact@v3
          with:
            name: dockerfiles
            path: .circleci/dockerfiles/
            retention-days: 1

        - name: Upload debian files
          uses: actions/upload-artifact@v3
          with:
            name: debian
            path: debian
            retention-days: 1

        - name: Upload test artifacts
          uses: actions/upload-artifact@v3
          with:
            name: tests
            path: tests
            retention-days: 1

        - name: Upload index.html
          uses: actions/upload-artifact@v3
          with:
            name: index.html
            path: www/index.html
            retention-days: 1

        - name: Upload html
          uses: actions/upload-artifact@v3
          with:
            name: html
            path: scripts/sphinx/build/html
            retention-days: 1

    docs:
      runs-on: ubuntu-latest
      needs: tarball
      name: Docs
      steps:
        - name: Download index.html
          uses: actions/download-artifact@v3
          with:
            name: index.html

        - name: Download html
          uses: actions/download-artifact@v3
          with:
            name: html

        - name: Make .nojekyll
          run: touch .nojekyll

        - name: Upload
          uses: actions/upload-pages-artifact@v1
          with:
            path: .

    # deploy_docs:
    #   runs-on: ubuntu-latest
    #   needs: docs
    #   name: Deploy Docs to GH Pages
    #   steps:
    #     - name: Deploy
    #       uses: actions/deploy-pages

    vscode_latest:
      runs-on: ubuntu-latest
      needs: tarball
      name: VSCode Extension (latest)
      steps:
        - name: Create target directories
          run: mkdir dockerfiles && mkdir build && chmod ugo+rwx build

        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: build

        - name: Download Dockerfiles
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles
            path: dockerfiles

        - name: Uncompress tarball
          run: tar xvJf build/wake_*.tar.xz -C build

        - name: Build docker image
          run: docker build -f dockerfiles/wasm --build-arg EMSDK_VERSION=latest -t wake-wasm .

        - name: Build
          run: docker run -u build --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-wasm /bin/sh -c 'make -C wake-* vscode'


    vscode_stable:
      runs-on: ubuntu-latest
      needs: tarball
      name: VSCode Extension (stable)
      steps:
        - name: Create target directories
          run: mkdir dockerfiles && mkdir build && chmod ugo+rwx build

        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: build

        - name: Download Dockerfiles
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles
            path: dockerfiles

        - name: Uncompress tarball
          run: tar xvJf build/wake_*.tar.xz -C build

        - name: Build docker image
          run: docker build -f dockerfiles/wasm -t wake-wasm .

        - name: Build
          run: docker run -u build --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-wasm /bin/sh -c 'make -C wake-* vscode'

        - name: Install
          run: install -D -t release/vscode build/wake-*/extensions/vscode/wake-*.vsix

        - name: Upload
          uses: actions/upload-artifact@v3
          with:
            name: release_vscode
            path: release/vscode

    wasm:
      runs-on: ubuntu-latest
      needs: tarball
      name: WASM Build
      steps:
        - name: Create target directories
          run: mkdir dockerfiles && mkdir build && chmod ugo+rwx build

        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: build

        - name: Download Dockerfiles
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles
            path: dockerfiles

        - name: Uncompress tarball
          run: tar xvJf build/wake_*.tar.xz -C build

        - name: Build docker image
          run: docker build -f dockerfiles/wasm -t wake-wasm .

        - name: Build
          run: docker run -u build --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-wasm /bin/sh -c 'make -C wake-* wasm'

    alpine:
      runs-on: ubuntu-latest
      needs: tarball
      name: Alpine Build
      steps:
        - name: Create target directories
          run: mkdir dockerfiles && mkdir -p build/tests && chmod ugo+rwx build

        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: build

        - name: Download Test Artifacts
          uses: actions/download-artifact@v3
          with:
            name: tests
            path: build/tests

        - name: Download Dockerfiles
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles
            path: dockerfiles

        - name: Uncompress tarball
          run: tar xvJf build/wake_*.tar.xz -C build

        - name: Set tests as executable
          run: chmod -R +x build/tests

        - name: Build docker image
          run: docker build -f dockerfiles/alpine -t wake-alpine .

        - name: Build
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-alpine /bin/sh -c 'make -C wake-* static'

        - name: Test
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-alpine /bin/sh -c 'tar xvJf wake-*/wake-static_* && cd tests && ../wake-*/bin/wake runTests'

        - name: Install
          run: install -D -t release/alpine build/wake-*/wake-static_*

        - name: Upload
          uses: actions/upload-artifact@v3
          with:
            name: release_alpine
            path: release/alpine

    debian_bullseye:
      runs-on: ubuntu-latest
      needs: tarball
      name: Debian Bullseye Build
      steps:
        - name: Create target directories
          run: mkdir dockerfiles && mkdir -p build/tests && mkdir build/debian && chmod ugo+rwx build

        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: build

        - name: Download Debian Artifacts
          uses: actions/download-artifact@v3
          with:
            name: debian
            path: build/debian

        - name: Download Test Artifacts
          uses: actions/download-artifact@v3
          with:
            name: tests
            path: build/tests

        - name: Download Dockerfiles
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles
            path: dockerfiles

        - name: Create orig file
          run: x=(build/wake_*.tar.xz); y=${x%.tar.xz}; cp "$x" "build/${y##*/}.orig.tar.xz"

        - name: Uncompress tarball
          run: tar xvJf build/wake_*.orig.tar.xz -C build

        - name: Set artifacts as executable
          run: chmod -R +x build/tests

        - name: Merge debian artifacts into tarball artifacts
          run: cp -a build/debian build/wake-*

        - name: Build docker image
          run: docker build -f dockerfiles/debian-bullseye -t wake-debian-bullseye .

        - name: Build
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined -w /$(ls -d build/wake-*) wake-debian-bullseye /bin/sh -c 'debuild -us -uc'

        - name: Test
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-debian-bullseye /bin/sh -c 'dpkg -i *.deb && cd tests && wake runTests'

        - name: Install
          run: install -D -t release/debian_bullseye build/*.deb build/*.xz build/*.changes build/*.dsc

        - name: Upload
          uses: actions/upload-artifact@v3
          with:
            name: release_debian_bullseye
            path: release/debian_bullseye

    centos_7_6:
      runs-on: ubuntu-latest
      needs: tarball
      name: CentOS 7.6 Build
      steps:
        - name: Create target directories
          run: mkdir dockerfiles && mkdir -p build/tests && chmod ugo+rwx build

        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: build

        - name: Download Test Artifacts
          uses: actions/download-artifact@v3
          with:
            name: tests
            path: build/tests

        - name: Download Dockerfiles
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles
            path: dockerfiles

        - name: Uncompress tarball
          run: tar xvJf build/wake_*.tar.xz -C build

        - name: Set tests as executable
          run: chmod -R +x build/tests

        - name: Build docker image
          run: docker build -f dockerfiles/centos-7.6 -t wake-centos-7.6 .

        - name: Build
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-centos-7.6 /bin/sh -c 'source scl_source enable devtoolset-9 && rpmbuild -ta --define "_rpmdir /build" wake_*.tar.xz'

        - name: Test
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-centos-7.6 /bin/sh -c 'rpm -i x86_64/*.rpm && cd tests && wake runTests'

        - name: Install
          run: install -D -t release/centos_7_6 build/x86_64/*.rpm

        - name: Upload
          uses: actions/upload-artifact@v3
          with:
            name: release_centos_7_6
            path: release/centos_7_6

    rocky_8:
      runs-on: ubuntu-latest
      needs: tarball
      name: Rocky 8 Build
      steps:
        - name: Create target directories
          run: mkdir dockerfiles && mkdir -p build/tests && chmod ugo+rwx build

        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: build

        - name: Download Test Artifacts
          uses: actions/download-artifact@v3
          with:
            name: tests
            path: build/tests

        - name: Download Dockerfiles
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles
            path: dockerfiles

        - name: Uncompress tarball
          run: tar xvJf build/wake_*.tar.xz -C build

        - name: Set tests as executable
          run: chmod -R +x build/tests

        - name: Build docker image
          run: docker build -f dockerfiles/rocky-8 -t wake-rocky-8 .

        - name: Build
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-rocky-8 /bin/sh -c 'rpmbuild -ta --define "_rpmdir /build" wake_*.tar.xz'

        - name: Test
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-rocky-8 /bin/sh -c 'rpm -i x86_64/*.rpm && cd tests && wake runTests'

        - name: Install
          run: install -D -t release/rocky_8 build/x86_64/*.rpm

        - name: Upload
          uses: actions/upload-artifact@v3
          with:
            name: release_rocky_8
            path: release/rocky_8

    ubuntu_18_04:
      runs-on: ubuntu-latest
      needs: tarball
      name: Ubuntu 18.04 Build
      steps:
        - name: Create target directories
          run: mkdir dockerfiles && mkdir -p build/tests && mkdir build/debian && chmod ugo+rwx build

        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: build

        - name: Download Debian Artifacts
          uses: actions/download-artifact@v3
          with:
            name: debian
            path: build/debian

        - name: Download Test Artifacts
          uses: actions/download-artifact@v3
          with:
            name: tests
            path: build/tests

        - name: Download Dockerfiles
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles
            path: dockerfiles

        - name: Create orig file
          run: x=(build/wake_*.tar.xz); y=${x%.tar.xz}; cp "$x" "build/${y##*/}.orig.tar.xz"

        - name: Uncompress tarball
          run: tar xvJf build/wake_*.orig.tar.xz -C build

        - name: Set artifacts as executable
          run: chmod -R +x build/tests

        - name: Merge debian artifacts into tarball artifacts
          run: cp -a build/debian build/wake-*

        - name: Build docker image
          run: docker build -f dockerfiles/ubuntu-18.04 -t wake-ubuntu-18.04 .

        - name: Build
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined -w /$(ls -d build/wake-*) wake-ubuntu-18.04 /bin/sh -c 'debuild -us -uc'

        - name: Test
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-ubuntu-18.04 /bin/sh -c 'dpkg -i *.deb && cd tests && wake runTests'

        - name: Install
          run: install -D -t release/ubuntu_18_04 build/*.deb build/*.xz build/*.changes build/*.dsc

        - name: Upload
          uses: actions/upload-artifact@v3
          with:
            name: release_ubuntu_18_04
            path: release/ubuntu_18_04

    ubuntu_22_04:
      runs-on: ubuntu-latest
      needs: tarball
      name: Ubuntu 22.04 Build
      steps:
        - name: Create target directories
          run: mkdir dockerfiles && mkdir -p build/tests && mkdir build/debian && chmod ugo+rwx build

        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: build

        - name: Download Debian Artifacts
          uses: actions/download-artifact@v3
          with:
            name: debian
            path: build/debian

        - name: Download Test Artifacts
          uses: actions/download-artifact@v3
          with:
            name: tests
            path: build/tests

        - name: Download Dockerfiles
          uses: actions/download-artifact@v3
          with:
            name: dockerfiles
            path: dockerfiles

        - name: Create orig file
          run: x=(build/wake_*.tar.xz); y=${x%.tar.xz}; cp "$x" "build/${y##*/}.orig.tar.xz"

        - name: Uncompress tarball
          run: tar xvJf build/wake_*.orig.tar.xz -C build

        - name: Set artifacts as executable
          run: chmod -R +x build/tests

        - name: Merge debian artifacts into tarball artifacts
          run: cp -a build/debian build/wake-*

        - name: Build docker image
          run: docker build -f dockerfiles/ubuntu-22.04 -t wake-ubuntu-22.04 .

        - name: Build
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined -w /$(ls -d build/wake-*) wake-ubuntu-22.04 /bin/sh -c 'debuild -us -uc'

        - name: Test
          run: docker run --rm --mount type=bind,source=$PWD/build,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-ubuntu-22.04 /bin/sh -c 'dpkg -i *.deb && cd tests && wake runTests'

        - name: Install
          run: install -D -t release/ubuntu_22_04 build/*.deb build/*.xz build/*.changes build/*.dsc

        - name: Upload
          uses: actions/upload-artifact@v3
          with:
            name: release_ubuntu_22_04
            path: release/ubuntu_22_04


    macos_10_15:
        name: MacOS 10.15 Build
        runs-on: macos-10.15

        steps:
            - name: Clone wake
              uses: actions/checkout@v2
              with:
                fetch-depth: 0

            - name: Install deps
              run: |
                brew install --cask osxfuse
                brew install re2 || brew install re2 --head

            - name: Build wake
              run: make all -j3

            - name: Test wake
              run: make test

    release:
      # Only run the 'release' job if this workflow was triggered by the creation of a tag
      #if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

      runs-on: ubuntu-latest
      needs: [tarball, vscode_stable, alpine, debian_bullseye, centos_7_6, rocky_8, ubuntu_18_04, ubuntu_22_04]
      name: Create Release
      steps:
        - name: Download Tarball
          uses: actions/download-artifact@v3
          with:
            name: tarball
            path: tarball

        - name: Download VSCode
          uses: actions/download-artifact@v3
          with:
            name: release_vscode
            path: vscode

        - name: Download Alpine
          uses: actions/download-artifact@v3
          with:
            name: release_alpine
            path: apline

        - name: Download Debian Bullseye
          uses: actions/download-artifact@v3
          with:
            name: release_debian_bullseye
            path: debian_bullseye

        - name: Download CentOS 7.6
          uses: actions/download-artifact@v3
          with:
            name: release_centos_7_6
            path: centos_7_6

        - name: Download Rocky 8
          uses: actions/download-artifact@v3
          with:
            name: release_rocky_8
            path: rocky_8

        - name: Download Ubuntu 18.04
          uses: actions/download-artifact@v3
          with:
            name: release_ubuntu_18_04
            path: ubuntu_18_04

        - name: Download Ubuntu 22.04
          uses: actions/download-artifact@v3
          with:
            name: release_ubuntu_22_04
            path: ubuntu_22_04

        # TODO: extract the version number from the tag and insert into file name
        - name: Rename artifacts
          run: |
            cp centos_7_6/wake-*-1.x86_64.rpm centos-7-6-wake-VERSION-1.x86_64.rpm
            cp rocky_8/wake-*-1.x86_64.rpm rocky_8-wake-VERSION-1.x86_64.rpm
            cp debian_bullseye/wake_*-1_amd64.deb debian-bullseye-wake_VERSION-1_amd64.deb
            cp ubuntu_18_04/wake_*-1_amd64.deb ubuntu-18-04-wake_VERSION-1_amd64.deb
            cp ubuntu_22_04/wake_*-1_amd64.deb ubuntu-22-04-wake_VERSION-1_amd64.deb

        - name: Create Release
          uses: marvinpinto/action-automatic-releases@latest
          with:
            draft: true
            repo_token: '${{ secrets.GITHUB_TOKEN }}'
            files: |
              tarball/wake_*.tar.xz
              vscode/wake-*.vsix
              centos-7-6-wake-VERSION-1.x86_64.rpm
              rocky_8-wake-VERSION-1.x86_64.rpm
              debian-bullseye-wake_VERSION-1_amd64.deb
              ubuntu-18-04-wake_VERSION-1_amd64.deb
              ubuntu-22-04-wake_VERSION-1_amd64.deb

