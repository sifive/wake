package v0_19_wake

from wake export type Array Boolean Double DoubleClass DoubleFormat Error Integer JSONFormat JSONRunnerPlan JValue Job List LogLevel Option Order Pair Path Persistence Plan RegExp Result Runner RunnerInput RunnerOutput Status String SysLib Tree Triple Unit Usage
from wake export type binary ; =>
from wake export def Aborted DoubleDefault DoubleFixed DoubleHex DoubleInfinite DoubleNaN DoubleNormal DoubleScientific DoubleSubNormal EQ Error Exited Fail False GT JArray JBoolean JDouble JInteger JNull JObject JString Keep LT Nil None Once Pair Pass ReRun Share Signaled Some SysLib Triple True Unit _0 _1 _2 _3 _4 _5 _6 _7 _8 _9 abs access addEnvironmentPath addEnvironmentPathOpt and append at byteToInteger cat catWith claimFileAsPath cmp compileC customFormatJSON cwd dabs dacos dasin datan dclass dcmp dcos defaultJSONFormat defaultRunner derf derfc dexp dexpm1 dfma dformat dfrexp dhex dint distinctBy distinctRunBy dldexp dlgamma dlog dlog1p dmax dmin dmodf double dprod droot drop dropUntil dsin dsqrt dstr dsum dtan dtgamma editEnvironment editErrorCause editErrorStack editJSONFormatDouble editJSONFormatIndent editJSONFormatInteger editJSONFormatString editJSONRunnerPlanEstimate editJSONRunnerPlanExtraArgs editJSONRunnerPlanRawScript editJSONRunnerPlanScore editPairFirst editPairSecond editPlanCommand editPlanDirectory editPlanEcho editPlanEnvironment editPlanFnInputs editPlanFnOutputs editPlanKeep editPlanLabel editPlanLocalOnly editPlanOnce editPlanPersistence editPlanResources editPlanRunnerFilter editPlanShare editPlanStderr editPlanStdin editPlanStdout editPlanUsage editPlanVisible editRunnerInputCommand editRunnerInputDirectory editRunnerInputEnvironment editRunnerInputLabel editRunnerInputPrefix editRunnerInputRecord editRunnerInputResources editRunnerInputStdin editRunnerInputVisible editRunnerName editRunnerOutputInputs editRunnerOutputOutputs editRunnerOutputUsage editRunnerScore editSysLibCFlags editSysLibHeaders editSysLibLFlags editSysLibObjects editSysLibVerison editTripleFirst editTripleSecond editTripleThird editUsageCPUtime editUsageInBytes editUsageMemBytes editUsageOutBytes editUsageRuntime editUsageStatus empty environment exists explode extract files filter find findFail findFailFn findNone findNoneFn findPass findPassFn findSome findSomeFn flatten flattenSysLibs flip foldl foldr forall format formatJSON fuseRunner gcd getEnvironment getErrorCause getErrorStack getFail getJArray getJBoolean getJDouble getJInteger getJObject getJSONFormatDouble getJSONFormatIndent getJSONFormatInteger getJSONFormatString getJSONRunnerPlanEstimate getJSONRunnerPlanExtraArgs getJSONRunnerPlanRawScript getJSONRunnerPlanScore getJString getJobDescription getJobFailedInputs getJobFailedOutputs getJobId getJobInputs getJobOutput getJobOutputs getJobRecord getJobReport getJobStatus getJobStderr getJobStdout getOrElse getOrElseFn getOrFail getOrFailFn getOrPass getOrPassFn getPairFirst getPairSecond getPass getPathChild getPathError getPathName getPathParent getPathResult getPlanCommand getPlanDirectory getPlanEcho getPlanEnvironment getPlanFnInputs getPlanFnOutputs getPlanHash getPlanKeep getPlanLabel getPlanLocalOnly getPlanOnce getPlanPersistence getPlanResources getPlanRunnerFilter getPlanShare getPlanStderr getPlanStdin getPlanStdout getPlanUsage getPlanVisible getRunnerInputCommand getRunnerInputDirectory getRunnerInputEnvironment getRunnerInputLabel getRunnerInputPrefix getRunnerInputRecord getRunnerInputResources getRunnerInputStdin getRunnerInputVisible getRunnerName getRunnerOutputInputs getRunnerOutputOutputs getRunnerOutputUsage getRunnerScore getSysLibCFlags getSysLibHeaders getSysLibLFlags getSysLibObjects getSysLibVerison getTripleFirst getTripleSecond getTripleThird getUsageCPUtime getUsageInBytes getUsageMemBytes getUsageOutBytes getUsageRuntime getUsageStatus getUsageThreads getWhenFail getenv globToRegExp head icmp in inf installAs int intbase integerToByte integerToUnicode isEQ isFail isGE isGT isJobOk isLE isLT isNE isNone isPass isSome jempty jfilter jfind jlist job jsonEscape killJob lcm len linkO listToTree listToTreeMulti listToVector localRunner logDebug logError logNever machine makeBadPath makeError makeJSONRunner makeJSONRunnerPlan makeRunner makeShellPlan makeSysLib map mapFlat mapPartial matches max min mkdir mkdirIn nan ofilter omap omapPartial or orElse parseJSONBody parseJSONFile path pi pkgConfig powm preloadRunner prepend prettyJSON prettyJSONFormat print printLevel println printlnLevel prod quote rOK read regExpCat regExpToString relative replace reverse rmap rmapFail rmapPass root runIncrementalJob runJob runJobWith scanl scanr scmp scmpCanonical scmpIdentifier scmpLowercase seq setEnvironment setErrorCause setErrorStack setJSONFormatDouble setJSONFormatIndent setJSONFormatInteger setJSONFormatString setJSONRunnerPlanEstimate setJSONRunnerPlanExtraArgs setJSONRunnerPlanRawScript setJSONRunnerPlanScore setPairFirst setPairSecond setPlanCommand setPlanDirectory setPlanEcho setPlanEnvironment setPlanFnInputs setPlanFnOutputs setPlanKeep setPlanLabel setPlanLocalOnly setPlanOnce setPlanPersistence setPlanResources setPlanRunnerFilter setPlanShare setPlanStderr setPlanStdin setPlanStdout setPlanUsage setPlanVisible setRunnerInputCommand setRunnerInputDirectory setRunnerInputEnvironment setRunnerInputLabel setRunnerInputPrefix setRunnerInputRecord setRunnerInputResources setRunnerInputStdin setRunnerInputVisible setRunnerName setRunnerOutputInputs setRunnerOutputOutputs setRunnerOutputUsage setRunnerScore setSysLibCFlags setSysLibHeaders setSysLibLFlags setSysLibObjects setSysLibVerison setTripleFirst setTripleSecond setTripleThird setUsageCPUtime setUsageInBytes setUsageMemBytes setUsageOutBytes setUsageRuntime setUsageStatus shellJob simplify sortBy sortPaths sortStrings source sources splitAt splitBy splitUntil sqrt stack str strlen sum sysname tab tail take takeUntil tap tappi tat tcontains tdelete tdistinctBy tdistinctRunBy tdrop tdropUntil tempty tequal texists tfilter tfind tfold tfoldl tfoldmap tfoldr tforall tinsert tinsertMulti tinsertReplace tintersect tlen tlowerGE tlowerGT tmax tmin tnew tokenize transpose treeToList treeToVector tsplit tsplitAt tsplitBy tsplitUntil tsubset tsubtract ttake ttakeUntil tunion tunionMulti tupperLE tupperLT unicodeCanonical unicodeIdentifier unicodeLowercase unicodeToInteger unsetEnvironment unzip vat vcmp vdistinctBy vdistinctRunBy vdrop vdropUntil vectorToList vectorToTree vectorToTreeMulti vempty version vexists vfilter vfind vflatten vfoldl vfoldr vforall virtualRunner vlen vmap vreverse vscan vscanl vscanr vseq vsortBy vsplitAt vsplitBy vsplitUntil vtab vtake vtakeUntil vtranspose vunfoldl vunzip vzip wOK wait which whichIn workspace write writeIn xOK xor zip
from wake export def unary ! + +. - -. ~ ∏ ∏. ∑ ∑. √ ∛ ∜
from wake export def binary != !=* !=. !=^ !=~ $ % && * *. + ++ +. , - -. . / /. /../ // /| ; < <* <. << <= <=* <=. <=> <=>* <=>. <=>^ <=>~ <=^ <=~ <^ <~ == ==* ==. ==/ ==^ ==~ > >* >. >= >=* >=. >=^ >=~ >> >^ >~ ^ ^. | || → ∈ ∉ ∋ ∌ ∘ ∩ ∪ ⊆ ⊇ ⊈ ⊉ ⊊ ⊋ ⊎
from wake export topic compileC environment linkO path runner source

from wake export def logWarn=logWarning logNormal=logEcho logVerbose=logInfo
from wake export def Debug=logDebug Verbose=logInfo Normal=logInfo Quiet=logError

export def tapLevel level formatFn value =
    def _ = printlnLevel level (formatFn value)
    value

export def tapError   = tapLevel logError
export def tapWarn    = tapLevel logWarn
export def tapNormal  = tapLevel logNormal
export def tapVerbose = tapLevel logVerbose
export def tapDebug   = tapLevel logDebug

export def installIn x y =
    from wake import installIn
    installIn x "." y

export def makePlan = makeExecPlan

export def vfoldmap f a g v = vmapReduce g f a v
export def vfold f a v = vmapReduce (_) f a v
export def vscanmap f a g v = vmapScan g f a v

export def idouble x = match (dmodf x)
    Pair x 0.0 = Some x
    _ = None

export def panic = unreachable

export def stringToRegExp s =
    from wake import def real=stringToRegExp
    match (real s)
        Pass ok = Pass ok
        Fail error = Fail error.getErrorCause

export def strbase n x =
    from wake import def real=strbase
    match (real n)
        Some f = f x
        None = ""
