# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package gcc_wake

export def cpp11Flags    = ("-std=c++11", Nil)
export def cpp14Flags    = ("-std=c++14", Nil)
export def c11Flags      = ("-std=c11", Nil)
export def debugCFlags   = ("-Wall", "-Wextra", "-Wno-format-security", "-O0", "-g", "-pg", Nil)
export def debugLFlags   = ("-g", "-pg", Nil)
export def releaseCFlags = ("-Wall", "-Wno-format-security", "-O2", Nil)
export def releaseLFlags = (Nil)
export def staticCFlags =  ("-Wall", "-Wno-format-security", "-O2", "-flto", Nil)
export def staticLFlags  = ("-flto", "-static", "-s", Nil)

target pwd _ =
    makeExecPlan ("pwd",) Nil
    | setPlanLocalOnly True
    | runJob
    | getJobStdout

def doCompileC variant gcc flags headers cfile =
    def obj = replace `\.c(pp)?$` ".{variant}.o" cfile.getPathName
    def cmdline =
        gcc, flags ++
        ("-c", cfile.getPathName, "-frandom-seed={obj}", "-o", obj, Nil)

    def emitCompileCmd =
        require Some var = getenv "EMIT_COMPILE_COMMANDS"
        else False

        var ==~ "1"

    def out =
      makeExecPlan cmdline (cfile, headers)
      | setPlanLabel "compile {replace `^.*/` '' gcc} {obj}"
      | runJob
      | getJobOutputs

    require True = emitCompileCmd
    else out

    require Pass pwd_out = pwd Unit
    def dir = replace `[\n]` "" pwd_out

    def outJson = JObject (
        "directory" :-> JString dir,
        "arguments" :-> JArray $ map JString cmdline,
        "file" :-> JString "cfile.getPathName",
    )

    def get f = prim "get_hash"
    def path_hash = get (cfile.getPathName)
    def cmd_file_path = ".compile_commands/{path_hash}.json"

    require Pass _ = write cmd_file_path (prettyJSON outJson)

    out

def doLinkO variant linker flags objects targ extraFiles =
    def cmdline =
        (linker, "-o", "{targ}.{variant}", map getPathName objects) ++
        flags
    require Pass destDir =
        simplify "{targ}/.."
        | mkdir
    makeExecPlan cmdline (destDir, objects ++ extraFiles)
    | setPlanLabel "link {replace `^.*/` '' linker} {targ}"
    | runJob
    | getJobOutputs

export def makeCompileC variant gcc flags =
    Pair variant (\extraFlags doCompileC variant gcc (flags ++ extraFlags)), Nil

export def makeLinkO variant linker flags =
    Pair variant (\extraFlags doLinkO variant linker (flags ++ extraFlags)), Nil

export topic compileC: Pair String ((extraFlags: List String) => (headers: List Path) => (cfile: Path) => Result (List Path) Error)
publish compileC = makeCompileC "native-c11-debug"     (which "cc")  (c11Flags ++ debugCFlags)
publish compileC = makeCompileC "native-c11-release"   (which "cc")  (c11Flags ++ releaseCFlags)
publish compileC = makeCompileC "native-c11-static"    (which "cc")  (c11Flags ++ staticCFlags)
publish compileC = makeCompileC "native-cpp11-debug"   (which "c++") (cpp11Flags ++ debugCFlags)
publish compileC = makeCompileC "native-cpp11-release" (which "c++") (cpp11Flags ++ releaseCFlags)
publish compileC = makeCompileC "native-cpp11-static"  (which "c++") (cpp11Flags ++ staticCFlags)
publish compileC = makeCompileC "native-cpp14-debug"   (which "c++") (cpp14Flags ++ debugCFlags)
publish compileC = makeCompileC "native-cpp14-release" (which "c++") (cpp14Flags ++ releaseCFlags)
publish compileC = makeCompileC "native-cpp14-static"  (which "c++") (cpp14Flags ++ staticCFlags)

export topic linkO: Pair String ((extraFlags: List String) => (objects: List Path) => (targ: String) => (extraFiles: List Path) => Result (List Path) Error)
publish linkO = makeLinkO "native-c11-debug"     (which "cc") (c11Flags ++ debugLFlags)
publish linkO = makeLinkO "native-c11-release"   (which "cc") (c11Flags ++ releaseLFlags)
publish linkO = makeLinkO "native-c11-static"    (which "cc") (c11Flags ++ staticLFlags)
publish linkO = makeLinkO "native-cpp11-debug"   (which "c++") (cpp11Flags ++ debugLFlags)
publish linkO = makeLinkO "native-cpp11-release" (which "c++") (cpp11Flags ++ releaseLFlags)
publish linkO = makeLinkO "native-cpp11-static"  (which "c++") (cpp11Flags ++ staticLFlags)
publish linkO = makeLinkO "native-cpp14-debug"   (which "c++") (cpp14Flags ++ debugLFlags)
publish linkO = makeLinkO "native-cpp14-release" (which "c++") (cpp14Flags ++ releaseLFlags)
publish linkO = makeLinkO "native-cpp14-static"  (which "c++") (cpp14Flags ++ staticLFlags)

def pickVariant variant variants =
    match (find (variant ==* _.getPairFirst) variants)
        Some (Pair x _) = Pass x.getPairSecond
        None =
            def ok = catWith " " (map getPairFirst variants)
            failWithError "No variant matches {variant}; options: {ok}"

export def compileC (variant: String) (extraFlags: List String) (headers: List Path) (cfile: Path) : Result (List Path) Error =
    require Pass compileFn = pickVariant variant (subscribe compileC)
    compileFn extraFlags headers cfile

export def linkO    (variant: String) (extraFlags: List String) (objects: List Path) (targ: String) (extraFiles: List Path) : Result (List Path) Error =
    require Pass linkFn = pickVariant variant (subscribe linkO)
    linkFn extraFlags objects targ extraFiles
