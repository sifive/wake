# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package gcc_wake

def c11Flags      = ("-std=c++11", Nil)
def c99Flags      = ("-std=c99", Nil)
def debugCFlags   = ("-Wall", "-Wextra", "-O0", "-g", "-pg", Nil)
def debugLFlags   = ("-g", "-pg", Nil)
def releaseCFlags = ("-Wall", "-O2", "-flto", Nil)
def releaseLFlags = ("-flto", Nil)
def staticCFlags =  ("-Wall", "-O2", "-flto", Nil)
def staticLFlags  = ("-flto", "-static", "-s", Nil)

def doCompileC variant gcc flags headers cfile =
    def obj = replace `\.c(pp)?$` ".{variant}.o" cfile.getPathName
    def cmdline =
        gcc, distinctBy scmp flags ++
        ("-c", cfile.getPathName, "-frandom-seed={obj}", "-o", obj, Nil)
    makeExecPlan cmdline (cfile, headers)
    | setPlanLabel "compile {replace `^.*/` '' gcc} {obj}"
    | runJob
    | getJobOutput

def doLinkO variant linker flags objects targ =
    def cmdline =
        (linker, "-o", "{targ}.{variant}", map getPathName objects) ++
        distinctBy scmp flags
    makeExecPlan cmdline (mkdir "{targ}/..", objects)
    | setPlanLabel "link {replace `^.*/` '' linker} {targ}"
    | runJob
    | getJobOutput

def makeCompileC variant gcc flags =
    Pair variant (\extraFlags doCompileC variant gcc (flags ++ extraFlags)), Nil

def makeLinkO variant linker flags =
    Pair variant (\extraFlags doLinkO variant linker (flags ++ extraFlags)), Nil

export topic compileC: Pair String ((extraFlags: List String) => (headers: List Path) => (cfile: Path) => Path)
publish compileC = makeCompileC "native-c99-debug"     (which "cc")  (c99Flags ++ debugCFlags)
publish compileC = makeCompileC "native-c99-release"   (which "cc")  (c99Flags ++ releaseCFlags)
publish compileC = makeCompileC "native-c99-static"    (which "cc")  (c99Flags ++ staticCFlags)
publish compileC = makeCompileC "native-cpp11-debug"   (which "c++") (c11Flags ++ debugCFlags)
publish compileC = makeCompileC "native-cpp11-release" (which "c++") (c11Flags ++ releaseCFlags)
publish compileC = makeCompileC "native-cpp11-static"  (which "c++") (c11Flags ++ staticCFlags)

export topic linkO: Pair String ((extraFlags: List String) => (objects: List Path) => (targ: String) => Path)
publish linkO = makeLinkO "native-c99-debug"     (which "cc") (debugLFlags)
publish linkO = makeLinkO "native-c99-release"   (which "cc") (releaseLFlags)
publish linkO = makeLinkO "native-c99-static"    (which "cc") (staticLFlags)
publish linkO = makeLinkO "native-cpp11-debug"   (which "c++") (debugLFlags)
publish linkO = makeLinkO "native-cpp11-release" (which "c++") (releaseLFlags)
publish linkO = makeLinkO "native-cpp11-static"  (which "c++") (staticLFlags)

def pickVariant variant variants =
    match (find (variant ==* _.getPairFirst) variants)
        Some (Pair x _) = x.getPairSecond
        None =
            def ok = catWith " " (map getPairFirst variants)
            \_\_\_ makeBadPath (makeError "No variant matches {variant}; options: {ok}")

export def compileC variant = pickVariant variant (subscribe compileC)
export def linkO    variant = pickVariant variant (subscribe linkO)
