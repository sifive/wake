# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package gcc_wake

export def cpp11Flags: List String =
    "-std=c++11", Nil
export def c11Flags: List String =
    "-std=c11", Nil
export def debugCFlags: List String =
    "-Wall", "-Wextra", "-O0", "-g", "-pg", Nil
export def debugLFlags: List String =
    "-g", "-pg", Nil
export def releaseCFlags: List String =
    "-Wall", "-O2", Nil
export def releaseLFlags: List String =
    Nil
export def staticCFlags: List String =
    "-Wall", "-O2", "-flto", Nil
export def staticLFlags: List String =
    "-flto", "-static", "-s", Nil

def doCompileC (variant: String) (gcc: String) (flags: List String) (headers: List Path) (cfile: Path): Result (List Path) Error =
    def obj = replace `\.c(pp)?$` ".{variant}.o" cfile.getPathName
    def cmdline =
        gcc, flags ++
        ("-c", cfile.getPathName, "-frandom-seed={obj}", "-o", obj, Nil)
    makeExecPlan cmdline (cfile, headers)
    | setPlanLabel "compile {replace `^.*/` '' gcc} {obj}"
    | runJob
    | getJobOutputs
    | findFailFn getPathResult

def doLinkO (variant: String) (linker: String) (flags: List String) (objects: List Path) (targ: String): Result (List Path) Error =
    def cmdline =
        (linker, "-o", "{targ}.{variant}", map getPathName objects) ++
        flags
    makeExecPlan cmdline (mkdir "{targ}/..", objects)
    | setPlanLabel "link {replace `^.*/` '' linker} {targ}"
    | runJob
    | getJobOutputs
    | findFailFn getPathResult

export def makeCompileC (variant: String) (gcc: String) (flags: List String): List (Pair String (List String => List Path => Path => Result (List Path) Error)) =
    Pair variant (\extraFlags doCompileC variant gcc (flags ++ extraFlags)), Nil

export def makeLinkO (variant: String) (linker: String) (flags: List String): List (Pair String (List String => List Path => String => Result (List Path) Error)) =
    Pair variant (\extraFlags doLinkO variant linker (flags ++ extraFlags)), Nil

export topic compileC: Pair String ((extraFlags: List String) => (headers: List Path) => (cfile: Path) => Result (List Path) Error)
publish compileC = makeCompileC "native-c11-debug"     (which "cc")  (c11Flags ++ debugCFlags)
publish compileC = makeCompileC "native-c11-release"   (which "cc")  (c11Flags ++ releaseCFlags)
publish compileC = makeCompileC "native-c11-static"    (which "cc")  (c11Flags ++ staticCFlags)
publish compileC = makeCompileC "native-cpp11-debug"   (which "c++") (cpp11Flags ++ debugCFlags)
publish compileC = makeCompileC "native-cpp11-release" (which "c++") (cpp11Flags ++ releaseCFlags)
publish compileC = makeCompileC "native-cpp11-static"  (which "c++") (cpp11Flags ++ staticCFlags)

export topic linkO: Pair String ((extraFlags: List String) => (objects: List Path) => (targ: String) => Result (List Path) Error)
publish linkO = makeLinkO "native-c11-debug"     (which "cc") (c11Flags ++ debugLFlags)
publish linkO = makeLinkO "native-c11-release"   (which "cc") (c11Flags ++ releaseLFlags)
publish linkO = makeLinkO "native-c11-static"    (which "cc") (c11Flags ++ staticLFlags)
publish linkO = makeLinkO "native-cpp11-debug"   (which "c++") (cpp11Flags ++ debugLFlags)
publish linkO = makeLinkO "native-cpp11-release" (which "c++") (cpp11Flags ++ releaseLFlags)
publish linkO = makeLinkO "native-cpp11-static"  (which "c++") (cpp11Flags ++ staticLFlags)

def pickVariant variant variants =
    match (find (variant ==* _.getPairFirst) variants)
        Some (Pair x _) = x.getPairSecond
        None =
            def ok = catWith " " (map getPairFirst variants)
            \_\_\_ failWithError "No variant matches {variant}; options: {ok}"

export def compileC (variant: String): (extraFlags: List String) => (headers: List Path) => (cfile: Path) => Result (List Path) Error =
    pickVariant variant (subscribe compileC)

export def linkO (variant: String): (extraFlags: List String) => (objects: List Path) => (targ: String) => Result (List Path) Error =
    pickVariant variant (subscribe linkO)
