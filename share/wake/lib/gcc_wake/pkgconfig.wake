# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package gcc_wake

export tuple SysLib =
    export Verison: String
    export Headers: List Path
    export Objects: List Path
    export CFlags:  List String
    export LFlags:  List String

export def makeSysLib (version: String): SysLib =
    SysLib version Nil Nil Nil Nil

export def flattenSysLibs (packages: List SysLib): SysLib =
    def headers = map getSysLibHeaders packages | flatten
    def objects = map getSysLibObjects packages | flatten
    def cflags  = map getSysLibCFlags  packages | flatten
    def lflags  = map getSysLibLFlags  packages | flatten
    SysLib "" headers objects cflags lflags

target pkgConfigImp args =
    def cmdline = which "pkg-config", args
    def addenv list = match (getenv "PKG_CONFIG_PATH")
        Some p = "PKG_CONFIG_PATH={p}", list
        None   = list
    def result =
        makeExecPlan cmdline Nil
        | setPlanLocalOnly True
        | setPlanStdout logNever
        | setPlanStderr logDebug
        | editPlanEnvironment addenv
        | runJob
    require Some output =
        result.getJobStdout
        | getWhenFail ""
        | tokenize `\n`
        | head
    if result.isJobOk then
        output
        | tokenize ` `
        | filter (_ !=* "")
        | Some
    else
        None

export def pkgConfig (pkg: String): Option SysLib =
    def pkgs = tokenize ` ` pkg
    require Some (version, _) =
        pkgConfigImp ("--short-errors", "--modversion", pkgs)
    else
        None
    def cflags = pkgConfigImp ("--silence-errors", "--cflags", pkgs)
    def lflags = pkgConfigImp ("--silence-errors", "--libs",   pkgs)
    require Some cflags = cflags
    require Some lflags = lflags
    Some (SysLib version Nil Nil cflags lflags)
