# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# String methods

export def strlen string = prim "strlen"

export def cat listString = prim "lcat"

export def catWith separator strings =
  if strings.empty then "" else
    def inserted = foldr (separator, _, _) Nil strings
    cat inserted.tail

# String => List String of codepoints
export def explode str = prim "explode"

# String <=> Integer type conversion
export def strbase base n = prim "str" # int -> string
export def intbase base s =
  def p b s = prim "int" # string -> int
  p base s | head
export def str n = strbase 10 n
export def int s = intbase 0 s

# String <=> Integer Unicode conversion
export def integerToUnicode i = prim "code2str"
export def unicodeToInteger s = prim "str2code"

# String <=> Integer Binary conversion (Warning: may create invalid Unicode)
export def integerToByte i = prim "bin2str"
export def byteToInteger s = prim "str2bin"

# Version of wake
export def version = prim "version"

# Unicode normalization methods
export def unicodeCanonical  x = prim "sNFC"
export def unicodeIdentifier x = prim "sNFKC"
export def unicodeLowercase  x = prim "scaseNFKC"

# Sort a list of strings
export def sortStrings list = sortBy (_ <~ _) list

# Unicode NFC string comparison Ç == C+◌̧
export def scmpCanonical x y = scmp (unicodeCanonical x) (unicodeCanonical y)
# Unicode NFKC string comparison (¼i⁹ = 1/4i9)
export def scmpIdentifier x y = scmp (unicodeIdentifier x) (unicodeIdentifier y)
# Unicode case insensitive NFKC comparison
export def scmpLowercase x y = scmp (unicodeLowercase x) (unicodeLowercase y)
# Raw binary string comparison; no normalization performed
export def scmp x y = prim "scmp"

# NFKC order (fancy format removed) -- secure default
# This is the string order you should probably be using
export def x <=>~y = scmpIdentifier x y

# Returns True if x is less than y.
export def x <~  y = isLT (x <=>~ y)

# Returns True if x is greater than y.
export def x >~  y = isGT (x <=>~ y)

# Returns True if x is greater than or equal to y.
export def x >=~ y = isGE (x <=>~ y)

# Returns True if x is less than or equal to y.
export def x <=~ y = isLE (x <=>~ y)

# Returns True if x is equal to y.
export def x ==~ y = isEQ (x <=>~ y)

# Returns True if x is not equal to y.
export def x !=~ y = isNE (x <=>~ y)

# Case insensitive order (^ = capitals ignored)
export def x <=>^y = scmpLowercase x y

# Returns True if x is less than y, ignoring case.
export def x <^  y = isLT (x <=>^ y)

# Returns True if x is greater than y, ignoring case.
export def x >^  y = isGT (x <=>^ y)

# Returns True if x is greater than or equal to y, ignoring case.
export def x >=^ y = isGE (x <=>^ y)

# Returns True if x is less than or equal to y, ignoring case.
export def x <=^ y = isLE (x <=>^ y)

# Returns True if x is equal to y, ignoring case.
export def x ==^ y = isEQ (x <=>^ y)

# Returns True if x is not equal to y, ignoring case.
export def x !=^ y = isNE (x <=>^ y)

# Raw binary string order
# Only use this for non-textual data
export def x <=>*y = scmp x y

# Returns True if x is less than y, in raw binary representation.
export def x <*  y = isLT (x <=>* y)

# Returns True if x is greater than y, in raw binary representation.
export def x >*  y = isGT (x <=>* y)

# Returns True if x is greater than or equal to y, in raw binary representation.
export def x >=* y = isGE (x <=>* y)

# Returns True if x is less than or equal to y, in raw binary representation.
export def x <=* y = isLE (x <=>* y)

# Returns True if x is equal to y, in raw binary representation.
export def x ==* y = isEQ (x <=>* y)

# Returns True if x is not equal to y, in raw binary representation.
export def x !=* y = isNE (x <=>* y)
