# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

export data Result pass fail =
  Pass pass
  Fail fail

export def isPass = match _
  Pass _ = True
  Fail _ = False

export def isFail = match _
  Pass _ = False
  Fail _ = True

export def getPass = match _
  Pass x = Some x
  Fail _ = None

export def getFail = match _
  Pass _ = None
  Fail x = Some x

export def getWhenFail fail = match _
  Pass a = a
  Fail _ = fail

export def rmap fn = match _
  Pass a = Pass (fn a)
  Fail f = Fail f

# Applies a fallible function to Pass value or propogates Fail
# (fn: a => Result b c) => Result a c => Result b c
export def rmapPass fn = match _
  Pass a = fn a
  Fail f = Fail f

# Applies a fallible function to Fail value or propogates Pass
# (fn: a => Result b c) => Result b a => Result b c
export def rmapFail fn = match _
  Pass a = Pass a
  Fail f = fn f

# Finds the first Fail in a List of Result or aggregates Passes into a List
# List (Result a b) => Result (List a) b
export def findFail = findFailFn (_)
# Applies a fallible function to each element of a List,
#   returning the first Fail or aggregates the Passes into a List
# (fn: a => Result b c) => List a => Result (List b) c
export def findFailFn fn =
  def helper = match _
    Nil = Pass Nil
    h, t = match (fn h)
      Fail y = Fail y
      Pass x = match (helper t)
        Pass tt = Pass (x, tt)
        z = z
  helper

# Finds the first Pass in a List of Result or aggregates Fails into a List
# List (Result a b) => Result a (List b)
export def findPass = findPassFn (_)
# Applies a fallible function to each element of a List
#  returning the first Pass or aggregates the Fails into a List
# (fn: a => Result b c) => List a => Result b (List c)
export def findPassFn fn =
  def helper = match _
    Nil = Fail Nil
    h, t = match (fn h)
      Pass y = Pass y
      Fail x = match (helper t)
        Fail tt = Fail (x, tt)
        z = z
  helper

export def panic s = prim "panic"

export def stack s = prim "stack"

export tuple Error =
  export Cause: String
  export Stack: List String

export def makeError cause =
  Error cause (stack Unit)

# String => Result a Error => Result a Error
# Internal, but useful helper function to enrich error messages.
# This should probably be in the wake standard library.
export def addErrorContext prefix = match _
  Pass x = Pass x
  Fail (Error cause stack) = Fail (Error "{prefix}: {cause}" stack)

# String => Result a Error
# Handy method to fail with the specified message
export def failWithError msg = Fail (makeError msg)
