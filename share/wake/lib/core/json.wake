# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The JSON data type
global data JValue =
  JString  String
  JInteger Integer
  JDouble  Double
  JBoolean Boolean
  JNull
  JObject  (List (Pair String JValue))
  JArray   (List JValue)

global def getJString = match _
  JString x               = Some x
  JArray (JString x, Nil) = Some x
  _                       = None
global def getJInteger = match _
  JInteger x               = Some x
  JArray (JInteger x, Nil) = Some x
  _                        = None
global def getJDouble = match _
  JDouble x               = Some x
  JInteger x              = dint x
  JArray (JDouble x, Nil) = Some x
  JArray (JInteger x, Nil)= dint x
  _                       = None
global def getJBoolean = match _
  JBoolean x               = Some x
  JArray (JBoolean x, Nil) = Some x
  _                        = None
global def getJObject = match _
  JObject x               = Some x
  JArray (JObject x, Nil) = Some x
  _                       = None
global def getJArray = match _
  JArray x = Some x
  _        = None

global def parseJSONBody body = prim "json_body"
global def parseJSONFile path =
  def imp f = prim "json_file"
  match (getPathResult path)
    Pass f = match (imp f.getPathName)
      Pass body = Pass body
      Fail f = Fail (makeError f)
    Fail f = Fail f

global def jsonEscape str = prim "json_str"

tuple JSONFormat =
  global String:  String  => String
  global Integer: Integer => String
  global Double:  Double  => String
  global Indent:  Integer

def doFormat fmt lhs =
  def indent = fmt.getJSONFormatIndent
  def space = if indent > 0 then " " else ""
  def indention = tab (\_ ' ') indent | cat
  def rec rhs depth lhs =
    def deeper = omap ("{indention}{_}") depth
    def tabbed = omap ("\n{_}") depth | getOrElse ""
    def tabbeder = omap ("\n{_}") deeper | getOrElse ""
    match lhs
      JString  s    = '"', fmt.getJSONFormatString s, '"', rhs
      JInteger i    = fmt.getJSONFormatInteger i,          rhs
      JDouble  d    = fmt.getJSONFormatDouble d,           rhs
      JBoolean True = "true",   rhs
      JBoolean False= "false",  rhs
      JNull         = "null",   rhs
      JArray   list =
        def helper value acc = ",{tabbeder}", rec acc deeper value
        if list.empty then '[]', rhs
        else "[{tabbeder}", foldr helper ("{tabbed}]", rhs) list | tail
      JObject  list =
        def helper (Pair key value) acc =
          ",{tabbeder}", '"', jsonEscape key, ("\":{space}", rec acc deeper value)
        if list.empty then '{}', rhs
        else "\{{tabbeder}", foldr helper ("{tabbed}\}", rhs) list | tail
  rec Nil (if indent > 0 then Some "" else None) lhs

global def defaultJSONFormat =
  def formatDouble d =
    match (dclass d)
      DoubleInfinite if d <. 0e0 = "-1e9999"
      DoubleInfinite = "1e9999"
      DoubleNaN      = "NaN"
      _              = dstr d
  JSONFormat jsonEscape str formatDouble 0

global def prettyJSONFormat = defaultJSONFormat | setJSONFormatIndent 2

global def customFormatJSON fmt body = doFormat fmt body | cat
global def formatJSON = customFormatJSON defaultJSONFormat
global def prettyJSON = customFormatJSON prettyJSONFormat

global def x /| f = match x
  JArray l = JArray (filter f l)
  _ = if f x then JArray (x, Nil) else JArray Nil

global def x // y =
  def helper tail = match _
    JString  _ = tail
    JInteger _ = tail
    JDouble  _ = tail
    JBoolean _ = tail
    JNull      = tail
    JObject  l =
      def flatten v tail = match v.getPairSecond
        JArray l = l ++ tail
        w = w, tail
      foldr flatten tail (filter (matches y _.getPairFirst) l)
    JArray   l =
      def flatten v tail = helper tail v
      foldr flatten tail l
  JArray (helper Nil x)

global def x ==/ y = match x y
  (JString  a) (JString  b) = a ==~ b
  (JInteger a) (JInteger b) = a ==  b
  (JDouble  a) (JDouble  b) = a ==. b
  (JBoolean a) (JBoolean b) = if a then b else !b
  JNull        JNull        = True
  (JObject  a) (JObject  b) =
    def helper (Pair (Pair k c) (Pair l d)) = k ==~ l && c ==/ d
    if a.len != b.len then False else zip a b | forall helper
  (JArray   a) (JArray   b) =
    def helper (Pair c d) = c ==/ d
    if a.len != b.len then False else zip a b | forall helper
  (JArray a) _ = exists (_ ==/ y) a
  _ (JArray b) = exists (_ ==/ x) b
  _ _ = False
