# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# The JSON data type
export data JValue =
  JString  String
  JInteger Integer
  JDouble  Double
  JBoolean Boolean
  JNull
  JObject  (List (Pair String JValue))
  JArray   (List JValue)

# Attempt to retrieve the value of a textual JSON structure.
# This succeeds if passed a `JString` or a `JArray` containing only a single
# `JString`, and returns `None` otherwise.
export def getJString: (json: JValue) => Option String = match _
    JString x               = Some x
    JArray (JString x, Nil) = Some x
    _                       = None
# Retrieve the value of a JSON text, or a fallback if the type is incompatible.
# This returns the represented value if passed a `JString` or a `JArray`
# containing only a single `JString`, and returns `default` otherwise.
export def getJStringOrElse (default: String) (json: JValue): String =
    getJString json
    | getOrElse default

# Attempt to retrieve the value of an integer JSON structure.
# This succeeds if passed a `JInteger` or a `JArray` containing only a single
# `JInteger`, and returns `None` otherwise.
export def getJInteger: (json: JValue) => Option Integer = match _
    JInteger x               = Some x
    JArray (JInteger x, Nil) = Some x
    _                        = None
# Retrieve the value of a JSON integer, or a fallback if the type is incompatible.
# This returns the represented value if passed a `JInteger` or a `JArray`
# containing only a single `JInteger`, and returns `default` otherwise.
export def getJIntegerOrElse (default: Integer) (json: JValue): Integer =
    getJInteger json
    | getOrElse default

# Attempt to retrieve the value of a numeric JSON structure.
# This succeeds if passed a `JDouble`, `JInteger`, or a `JArray` containing only
# a single value of either type, and returns `None` otherwise.
export def getJDouble: (json: JValue) => Option Double = match _
    JDouble x               = Some x
    JInteger x              = dint x
    JArray (JDouble x, Nil) = Some x
    JArray (JInteger x, Nil)= dint x
    _                       = None
# Retrieve the value of a JSON integer, or a fallback if the type is incompatible.
# This returns the represented value if passed a `JDouble`, `JInteger`, or a
# `JArray` containing only a single value of either type, and returns `default`
# otherwise.
export def getJDoubleOrElse (default: Double) (json: JValue): Double =
    getJDouble json
    | getOrElse default

# Attempt to retrieve the value of a boolean JSON structure.
# This succeeds if passed a `JBoolean` or a `JArray` containing only a single
# `JBoolean`, and returns `None` otherwise.
export def getJBoolean: (json: JValue) => Option Boolean = match _
    JBoolean x               = Some x
    JArray (JBoolean x, Nil) = Some x
    _                        = None
# Retrieve the value of a JSON boolean, or a fallback if the type is incompatible.
# This returns the represented value if passed a `JBoolean` or a `JArray`
# containing only a single `JBoolean`, and returns `default` otherwise.
export def getJBooleanOrElse (default: Boolean) (json: JValue): Boolean =
    getJBoolean json
    | getOrElse default

# Attempt to retrieve the key/value pair contents of a JSON object.
# This succeeds if passed a `JObject` or a `JArray` containing only a single
# `JObject`, and returns `None` otherwise.
export def getJObject: (json: JValue) => Option (List (Pair String JValue)) = match _
    JObject x               = Some x
    JArray (JObject x, Nil) = Some x
    _                       = None
# Retrieve the contents of a JSON object, or a fallback if the type is incompatible.
# This returns the component key/value pairs if passed a `JObject` or a `JArray`
# containing only a single `JObject`, and returns `default` otherwise.
export def getJObjectOrElse (default: List (Pair String JValue)) (json: JValue): List (Pair String JValue) =
    getJObject json
    | getOrElse default

# Attempt to retrieve the contents of a JSON array.
# This only succeeds if passed a `JArray`, and returns `None` otherwise.
export def getJArray: (json: JValue) => Option (List JValue) = match _
    JArray x = Some x
    _        = None
# Retrieve the contents of a JSON array, or a fallback if the type is incompatible.
# This returns the contained values if passed a `JArray`, and returns `default`
# otherwise.
export def getJArrayOrElse (default: List JValue) (json: JValue): List JValue =
    getJArray json
    | getOrElse default

export def parseJSONBody (body: String): Result JValue Error =
  def imp b = prim "json_body"
  match (imp body)
    Pass jvalue = Pass jvalue
    Fail cause = Fail (makeError cause)

export def parseJSONFile (path: Path): Result JValue Error =
  def imp f = prim "json_file"
  match (getPathResult path)
    Pass f = match (imp f.getPathName)
      Pass body = Pass body
      Fail f = Fail (makeError f)
    Fail f = Fail f

export def jsonEscape str = prim "json_str"

tuple JSONFormat =
  export String:  String  => String
  export Integer: Integer => String
  export Double:  Double  => String
  export Indent:  Integer

def doFormat (fmt: JSONFormat) (lhs: JValue): List String =
  def indent = fmt.getJSONFormatIndent
  def space = if indent > 0 then " " else ""
  def indention = tab (\_ ' ') indent | cat
  def rec rhs depth lhs =
    def deeper = omap ("{indention}{_}") depth
    def tabbed = omap ("\n{_}") depth | getOrElse ""
    def tabbeder = omap ("\n{_}") deeper | getOrElse ""
    match lhs
      JString  s    = '"', fmt.getJSONFormatString s, '"', rhs
      JInteger i    = fmt.getJSONFormatInteger i,          rhs
      JDouble  d    = fmt.getJSONFormatDouble d,           rhs
      JBoolean True = "true",   rhs
      JBoolean False= "false",  rhs
      JNull         = "null",   rhs
      JArray   list =
        def helper value acc = ",{tabbeder}", rec acc deeper value
        if list.empty then '[]', rhs
        else "[{tabbeder}", foldr helper ("{tabbed}]", rhs) list | tail
      JObject  list =
        def helper (Pair key value) acc =
          ",{tabbeder}", '"', jsonEscape key, ("\":{space}", rec acc deeper value)
        if list.empty then '{}', rhs
        else "\{{tabbeder}", foldr helper ("{tabbed}\}", rhs) list | tail
  rec Nil (if indent > 0 then Some "" else None) lhs

export def defaultJSONFormat: JSONFormat =
  def formatDouble d =
    match (dclass d)
      DoubleInfinite if d <. 0e0 = "-1e9999"
      DoubleInfinite = "1e9999"
      DoubleNaN      = "NaN"
      _              = dstr d
  JSONFormat jsonEscape str formatDouble 0

export def prettyJSONFormat = defaultJSONFormat | setJSONFormatIndent 2

export def customFormatJSON fmt body = doFormat fmt body | cat
export def formatJSON = customFormatJSON defaultJSONFormat
export def prettyJSON = customFormatJSON prettyJSONFormat

export def root /| filterFn = jfilter filterFn root
export def jfilter filterFn root = match root
  JArray l = JArray (filter filterFn l)
  _ = if filterFn root then JArray (root, Nil) else JArray Nil

export def root /../ filterFn = jfind filterFn root
export def jfind filterFn root =
  def helper node acc = match node
    JArray l =
      def tail = foldr helper acc l
      if filterFn node then node, tail else tail
    JObject l =
      def tail = foldr (helper _.getPairSecond _) acc l
      if filterFn node then node, tail else tail
    _ =
      if filterFn node then node, acc else acc
  helper root Nil | JArray

export def jempty root = empty (jlist root)
export def jlist root = match root
  JArray x = x
  _ = root, Nil

export def x // y =
  def helper tail = match _
    JString  _ = tail
    JInteger _ = tail
    JDouble  _ = tail
    JBoolean _ = tail
    JNull      = tail
    JObject  l =
      def flatten v tail = match v.getPairSecond
        JArray l = l ++ tail
        w = w, tail
      foldr flatten tail (filter (matches y _.getPairFirst) l)
    JArray   l =
      def flatten v tail = helper tail v
      foldr flatten tail l
  JArray (helper Nil x)

export def x ==/ y = match x y
  (JString  a) (JString  b) = a ==~ b
  (JInteger a) (JInteger b) = a ==  b
  (JDouble  a) (JDouble  b) = a ==. b
  (JBoolean a) (JBoolean b) = if a then b else !b
  JNull        JNull        = True
  (JObject  a) (JObject  b) =
    def helper (Pair (Pair k c) (Pair l d)) = k ==~ l && c ==/ d
    if a.len != b.len then False else zip a b | forall helper
  (JArray   a) (JArray   b) =
    def helper (Pair c d) = c ==/ d
    if a.len != b.len then False else zip a b | forall helper
  (JArray a) _ = exists (_ ==/ y) a
  _ (JArray b) = exists (_ ==/ x) b
  _ _ = False
