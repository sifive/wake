# balanced order-statistic trees
data Tree a = Tree (a => a => Order) (TreeNode a) # cmp root
data TreeNode a =
  Tip
  Bin Integer (TreeNode a) a (TreeNode a) # size left key right

# delta = 2.5, gamma = 1.5 for a reasonably tight balance
def deltaQ = 5
def deltaD = 2
def ratioQ = 3
def ratioD = 2

# Create a new tree, sorted by cmp: a => a => Boolean
global def tnew cmp = Tree cmp Tip

global def ltree cmp list = vtree cmp (lvector list)
global def ltreeMulti cmp list = vtreeMulti cmp (lvector list)

global def vtreeMulti cmp v =
  Tree cmp (build (vsortBy (lt cmp) v))

global def vtree cmp v =
  Tree cmp (build (vdistinctRunBy (eq cmp) (vsortBy (lt cmp) v)))

def build v = match (vlen v)
  0 = Tip
  1 = Bin 1 Tip (vat 0 v) Tip
  len =
    def mid = len >> 1
    def l = vtake mid v
    def r = vdrop (mid+1) v
    Bin len (build l) (vat mid v) (build r)

global def tlen (Tree _ root) = size root
def size = match _
  Tip         = 0
  Bin s _ _ _ = s

global def tempty (Tree _ root) = match root
  Tip = True
  _   = False

# Insert y into the tree only if no other keys = y
global def tinsert y (Tree cmp root) =
  def helper t = match t
    Tip         = Bin 1 Tip y Tip
    Bin _ l x r = match (cmp x y)
      GT = balanceL (helper l) x r
      EQ = t
      LT = balanceR l x (helper r)
  Tree cmp (helper root)

# Insert y into the tree, removing any existing keys = y
global def tinsertReplace y (Tree cmp root) =
  def helper t = match t
    Tip         = Bin 1 Tip y Tip
    Bin s l x r = match (cmp x y)
      GT = join3 (helper l) x r
      EQ = join3 (delete cmp y l) y (delete cmp y r)
      LT = join3 l x (helper r)
  Tree cmp (helper root)

# Insert y into the tree at the lowest rank of keys = y
global def tinsertMulti y (Tree cmp root) =
  def helper = match _
    Tip         = Bin 1 Tip y Tip
    Bin _ l x r = match (cmp x y)
      GT = balanceL (helper l) x r
      _  = balanceR l x (helper r)
  Tree cmp (helper root)

global def a ⊆ b = tsubset a b
global def a ⊇ b = tsubset b a
global def a ⊉ b = ! a ⊇ b
global def a ⊈ b = ! a ⊆ b

global def a ⊊ b = a ⊆ b && b ⊈ a # strict
global def a ⊋ b = a ⊇ b && b ⊉ a # strict

# True if every element of a appears in b
global def tsubset (Tree _ aroot) (Tree cmp broot) =
  def helper a b = match a b
    Tip _ = True
    _ Tip = False
    _ (Bin _ bl bx br) = match (split bx cmp a)
      Triple al _ ag = helper al bl && helper ag br
  helper aroot broot

# Remove ALL keys = y
global def tdelete y (Tree cmp root) =
  Tree cmp (delete cmp y root)
def delete cmp y t =
  def helper = match _
    Tip = Tip
    Bin _ l x r = match (cmp x y)
      GT = join3 (helper l) x r
      EQ = join2 (helper l) (helper r)
      LT = join3 l x (helper r)
  helper t

# Folds from left to right
global def tfoldl f a (Tree _ root) =
  def helper a = match _
    Tip         = a
    Bin _ l x r = helper (f (helper a l) x) r
  helper a root

# Folds from right to left
global def tfoldr f a (Tree _ root) =
  def helper a = match _
    Tip         = a
    Bin _ l x r = helper (f x (helper a r)) l
  helper a root

# Fold in parallel; assumes f is an associative operator and has type: a => a => a
global def tfoldmap f a g (Tree _ root) =
  def helper a = match _
    Tip = g a
    Bin _ l x r = f (helper a l) (helper x r)
  helper a root

global def tfold f a t = tfoldmap f a (_) t

# Convert a Tree to a List
global def tlist = tfoldr (_,_) Nil

global def tappi f (Tree _ root) =
  def helper i = match _
    Tip = Unit
    Bin _ l x r =
      def ix = i + size l
      def _ = helper i l
      def _ = helper (ix+1) r
      def _ = f ix x
      Unit
  helper 0 root

# Extract the i-th ranked element
global def tatOpt i (Tree _ root) =
  def helper i = match _
    Tip = None
    Bin _ l x r =
      def sizeL = size l
      match (icmp i sizeL)
        LT = helper i l
        EQ = Some x
        GT = helper (i-sizeL-1) r
  helper i root

global def tat i l = match (tatOpt i l)
  None   = raise "tat index out of bounds"
  Some x = x

# Split elements ranked [0,i) and [i,inf) into two trees
global def tsplitAt i (Tree cmp root) =
  def helper i = match _
    Tip = Pair Tip Tip
    Bin _ l x r =
      def sizeL = size l
      if i > sizeL
      then match (helper (i-sizeL-1) r)
        Pair rl rr = Pair (join3 l x rl) rr
      else match (helper i l)
        Pair ll lr = Pair ll (join3 lr x r)
  match (helper i root)
    Pair l r = Pair (Tree cmp l) (Tree cmp r)

global def ttake i t = tsplitAt i t | getPairFirst
global def tdrop i t = tsplitAt i t | getPairSecond

# Lowest rank element where f x = True  => Option (Pair x rank)
global def tfind f (Tree _ root) =
  def helper = match _
    Tip         = None
    Bin s l x r = match (helper l) (f x) (helper r)
      (Some p) _    _       = Some p
      _        True _       = Some (Pair x (s-size r-1))
      _ _ (Some (Pair x i)) = Some (Pair x (i+size l+1))
      _        _    _       = None
  helper root

global def tsplitUntil f t =
  match (tfind f t)
    None = match t
      (Tree cmp _) = Pair t (Tree cmp Tip)
    Some (Pair _ i) = tsplitAt i t

global def ttakeUntil f t = tsplitUntil f t | getPairFirst
global def tdropUntil f t = tsplitUntil f t | getPairSecond

# Returns True if there exists an x where f x = True
global def texists f t = match (tfind f t)
  Some _ = True
  None   = False

global def tforall f t = ! texists (! f _) t

# Split tree into those elements <, =, and > y
global def tsplit y (Tree cmp root) =
  match (split y cmp root)
    Triple l e g = Triple (Tree cmp l) (Tree cmp e) (Tree cmp g)

def split y cmp root =
  def helper = match _
    Tip = Triple Tip Tip Tip
    Bin _ l x r = match (cmp x y)
      LT = match (helper r)
        Triple rl re rg = Triple (join3 l x rl) re rg
      GT = match (helper l)
        Triple ll le lg = Triple ll le (join3 lg x r)
      EQ = match (splitlt l) (splitgt r)
        (Pair ll le) (Pair re rg) = Triple ll (join3 le x re) rg
  def splitlt = match _
    Tip = Pair Tip Tip
    Bin _ l x r = match (cmp x y)
      LT = match (splitlt r)
        Pair rl re = Pair (join3 l x rl) re
      _  = match (splitlt l)
        Pair ll le = Pair ll (join3 le x r)
  def splitgt = match _
    Tip = Pair Tip Tip
    Bin _ l x r = match (cmp x y)
      GT = match (splitgt l)
        Pair le lg = Pair le (join3 lg x r)
      _  = match (splitgt r)
        Pair re rg = Pair (join3 l x re) rg
  helper root

# Split tree into those elements where f x = True and those where f x = False
global def tsplitBy f (Tree cmp root) =
  def helper t = match t
    Tip = Pair Tip Tip
    Bin _ l x r = match (helper l) (helper r)
      (Pair tl fl) (Pair tr fr) =
        if f x
        then Pair (join3 tl x tr) (join2 fl fr)
        else Pair (join2 tl tr) (join3 fl x fr)
  match (helper root)
    Pair t f = Pair (Tree cmp t) (Tree cmp f)

# Drop all elements except those where f x = True
global def tfilter f (Tree cmp root) =
  def helper t = match t
    Tip = Tip
    Bin _ l x r =
      def l_ = helper l
      def r_ = helper r
      if f x then join3 l_ x r_ else join2 l_ r_
  Tree cmp (helper root)

# Return the smallest element in the tree
global def tmin (Tree _ root) = min root
def min root =
  def none = match _
    Tip         = None
    Bin _ l x _ = some x l
  def some x = match _
    Tip         = Some x
    Bin _ l y _ = some y l
  none root

# Return the largest element in the tree
global def tmax (Tree _ root) = max root
def max root =
  def none = match _
    Tip         = None
    Bin _ _ x r = some x r
  def some x = match _
    Tip         = Some x
    Bin _ _ y r = some y r
  none root

# Lowest rank element with x >= y
global def tlowerGE y (Tree cmp root) =
  def f x = match (cmp x y)
    LT = False
    _  = True
  lower f root

# Lowest rank element with x > y
global def tlowerGT y (Tree cmp root) =
  def f x = match (cmp x y)
    GT = True
    _  = False
  lower f root

# Lowest rank element f x = True   => Option (Pair x rank)
def lower f root =
  def none = match _
    Tip         = None
    Bin s l x r = if f x then someL x (size root - s) l else none r
  def someR z i = match _ # i = size including self
    Tip         = Some (Pair z i)
    Bin s l x r = if f x then someL x (i-s) l else someR z i r
  def someL z i = match _ # i = size left of self
    Tip         = Some (Pair z i)
    Bin s l x r = if f x then someL x i l else someR z (i+s) r
  none root

# Highest rank element with x < y
global def tupperLT y (Tree cmp root) =
  def f x = match (cmp x y)
    LT = False
    _  = True
  upper f root

# Highest rank element with x <= y
global def tupperLE y (Tree cmp root) =
  def f x = match (cmp x y)
    GT = True
    _  = False
  upper f root

# Highest rank element with f x = False  => Option (Pair x rank)
def upper f root =
  def none = match _
    Tip         = None
    Bin s l x r = if f x then none l else someR x s r
  def someR z i = match _ # i = size including self
    Tip         = Some (Pair z (i-1))
    Bin s l x r = if f x then someL z (i-s) l else someR x i r
  def someL z i = match _ # i = size left of self
    Tip         = Some (Pair z (i-1))
    Bin s l x r = if f x then someL z i l else someR x (i+s) r
  none root

# Extract all elements from the tree which are equal to y
# => Pair (matches: List x) (rank: Integer)
global def textract y (Tree cmp root) =
  def helperR i out = match _ # i = size including self
    Tip         = Pair out i
    Bin s l x r = match (cmp x y)
      LT = helperR i out r
      GT = helperL (i-s) out l
      EQ = helperL (i-s) (x, helperR i out r | getPairFirst) l
  def helperL i out = match _ # i = size left of self
    Tip         = Pair out i
    Bin s l x r = match (cmp x y)
      LT = helperR (i+s) out r
      GT = helperL i out l
      EQ = helperL i (x, helperR (i+s) out r | getPairFirst) l
  helperL 0 Nil root

# Returns True if there is a key in t = y
global def x ∈ y = tcontains x y
global def x ∉ y = ! x ∈ y
global def x ∋ y = y ∈ x
global def x ∌ y = y ∉ x
global def tcontains y t =
  match t (tupperLE y t)
    (Tree cmp _) None              = False
    (Tree cmp _) (Some (Pair x _)) = match (cmp x y)
      EQ = True
      _  = False

# Eliminate duplicates, as identified by cmp
global def tdistinctBy cmp t = match t
  Tree tcmp _ = ltree tcmp (distinctBy cmp (tlist t))

# Eliminate duplicates, as identified by f
global def tdistinctRunBy f t = match t
  Tree cmp _ = Tree cmp (build (vdistinctRunBy f (tvector t)))

# Union of two trees, keeping only values from a on equality
global def a ∪ b = tunion a b
global def tunion (Tree _ aroot) (Tree cmp broot) =
  Tree cmp (union cmp aroot broot)
def union cmp aroot broot =
  def helper a b = match a b
    Tip _ = b
    _ Tip = a
    (Bin _ al ax ar) _ = match (split ax cmp b)
      Triple bl _ bg = join3 (helper al bl) ax (helper ar bg)
  helper aroot broot

# Union of two trees, keeping equal values of a before equal values of b
global def a ⊎ b = tunionMulti a b
global def tunionMulti (Tree _ aroot) (Tree cmp broot) =
  Tree cmp (unionMulti cmp aroot broot)

def unionMulti cmp aroot broot =
  def helper a b = match a b
    Tip _ = b
    _ Tip = a
    (Bin _ _ ax _) _ = match (split ax cmp a) (split ax cmp b)
      (Triple al ae ag) (Triple bl be bg) =
        def l = helper al bl
        def r = helper ag bg
        def r_ = join2 be r # fast if be=Tip
        if size ae == 1
        then join3 l ax r_
        else join2 (join2 l ae) r_
  helper aroot broot

# Remove all occurrences of keys from a which appear in b
global def a ∖ b = tsubtract a b
global def tsubtract (Tree _ aroot) (Tree cmp broot) =
  def helper a b = match a b
    Tip _ = Tip
    _ Tip = a
    _ (Bin _ bl bx br) = match (split bx cmp a)
      Triple al _ ag = join2 (helper al bl) (helper ag br)
  Tree cmp (helper aroot broot)

# Keep all occurrences of keys from a which appear in b
global def a ∩ b = tintersect a b
global def tintersect (Tree _ aroot) (Tree cmp broot) =
  def helper a b = match a b
    Tip _ = Tip
    _ Tip = Tip
    _ (Bin _ bl bx br) = match (split bx cmp a)
      Triple al ae ag =
        def l = helper al bl
        def r = helper ag br
        match ae
          Tip = join2 l r
          Bin aes _ aex _ =
            if aes == 1 then join3 l aex r else join2 (join2 l ae) r
  Tree cmp (helper aroot broot)

# Pretty print the tree shape for debug
global def tshape (Tree _ root) =
  def row x =
    def helper i = match _
      Tip = Nil
      Bin _ l _ r =
        def me = if i == x then "." else " "
        helper (i+1) l ++ (me, helper (i+1) r)
    cat (helper 0 root)
  catWith "\n" $ map row (seq 8)

# Create a balanced tree with with order: l:Tree x:Element r:Tree
def join3 l x r = match l r
  Tip _ = insertMin x r
  _ Tip = insertMax x l
  (Bin ls ll lx lr) (Bin rs rl rx rr) =
    if      deltaQ*ls < deltaD*rs then balanceL (join3 l x rl) rx rr
    else if deltaQ*rs < deltaD*ls then balanceR ll lx (join3 lr x r)
    else Bin (ls+rs+1) l x r

# Create a balanced tree with with order: l:Tree r:Tree
def join2 l r = match l
  Tip = r
  Bin _ ll lx lr = match (splitLast ll lx lr)
    Pair l_ x_ = join3 l_ x_ r

def splitLast l x r = match r
  Tip = Pair l x
  Bin _ rl rx rr = match (splitLast rl rx rr)
    Pair l_ x_ = Pair (join3 l x l_) x_

def insertMax x = match _
  Tip = Bin 1 Tip x Tip
  Bin _ l y r = balanceR l y (insertMax x r)

def insertMin x = match _
  Tip = Bin 1 Tip x Tip
  Bin _ l y r = balanceL (insertMin x l) y r

# Written while reading the Haskell Set implementation 
def balanceL l x r = match l r
  Tip Tip = Bin 1 Tip x Tip
  (Bin ls ll lx lr) Tip = match ll lr
    Tip Tip = Bin 2 l x Tip
    ll  Tip = Bin 3 ll lx (Bin 1 Tip x Tip)
    Tip (Bin _ _ lrx _) = Bin 3 (Bin 1 Tip lx Tip) lrx (Bin 1 Tip x Tip)
    (Bin lls _ _ _) (Bin lrs lrl lrx lrr) = match (ratioD*lrs < ratioQ*lls)
      True  = Bin (1+ls) ll lx (Bin (1+lrs) lr x Tip)
      False = Bin (1+ls) (Bin (1+lls+size lrl) ll lx lrl) lrx (Bin (1+size lrr) lrr x Tip)
  Tip (Bin rs _ _ _) = Bin (1+rs) Tip x r
  (Bin ls ll lx lr) (Bin rs _ _ _) = match (ls*deltaD > deltaQ*rs)
    True = match ll lr
      (Bin lls _ _ _) (Bin lrs lrl lrx lrr) = match (ratioD*lrs < ratioQ*lls)
        True  = Bin (1+ls+rs) ll lx (Bin (1+rs+lrs) lr x r)
        False = Bin (1+ls+rs) (Bin (1+lls+size lrl) ll lx lrl) lrx (Bin (1+rs+size lrr) lrr x r)
      _ _ = raise "Failure in Tree.balanceL"
    False = Bin (1+ls+rs) l x r

def balanceR l x r = match l r
  Tip Tip = Bin 1 Tip x Tip
  Tip (Bin rs rl rx rr) = match rl rr
    Tip Tip = Bin 2 Tip x r
    Tip _   = Bin 3 (Bin 1 Tip x Tip) rx rr
    (Bin _ _ rlx _) Tip = Bin 3 (Bin 1 Tip x Tip) rlx (Bin 1 Tip rx Tip)
    (Bin rls rll rlx rlr) (Bin rrs _ _ _) = match (ratioD*rls < ratioQ*rrs)
      True  = Bin (1+rs) (Bin (1+rls) Tip x rl) rx rr
      False = Bin (1+rs) (Bin (1+size rll) Tip x rll) rlx (Bin (1+rrs+size rlr) rlr rx rr)
  (Bin ls _ _ _) Tip = Bin (1+ls) l x Tip
  (Bin ls _ _ _) (Bin rs rl rx rr) = match (deltaD*rs > deltaQ*ls)
    True = match rl rr
      (Bin rls rll rlx rlr) (Bin rrs _ _ _) = match (ratioD*rls < ratioQ*rrs)
        True  = Bin (1+ls+rs) (Bin (1+ls+rls) l x rl) rx rr
        False = Bin (1+ls+rs) (Bin (1+ls+size rll) l x rll) rlx (Bin (1+rrs+size rlr) rlr rx rr)
      _ _ = raise "Failure in Tree.balanceR"
    False = Bin (1+ls+rs) l x r
