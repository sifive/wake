# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# The ``Option`` datatype.  Either holds a valid entry with value ``a`` (``Some``), or nothing (``None``).
export data Option a =
    Some a
    None

# isSome: Report if an Option has a value.
# If you find yourself using the function, consider using a match instead.
#
#   isSome (Some 451) = True
#   isSome (Some "x") = True
#   isSome None       = False
export def isSome: Option a => Boolean = match _
    Some _ = True
    None   = False

# isNone: Report if an Option has no value.
# If you find yourself using the function, consider using a match instead.
#
#   isNone (Some 451) = False
#   isNone (Some "x") = False
#   isNone None       = True
export def isNone: Option a => Boolean = match _
    Some _ = False
    None   = True

# getOrElse: extract the value from an Option, with a supplied default if None.
# The default value expression is evaluated whether or not the Option is None.
#
#   int "not-an-integer"     # Option Integer
#   | getOrElse 5            # Integer
#   ---
#   5
export def getOrElse (default: a): Option a => a = match _
    Some x = x
    None   = default

# getOrElse: extract the value from an Option, with a supplied default function if None.
# The default value function is evaluated only when the Option is None.
#
#   int "567"
#   | getOrElseFn (\Unit firstFactorOf 8947289472892423423423423235325)
#   ---
#   567
export def getOrElseFn (fn: Unit => a): Option a => a = match _
    Some a = a
    None   = fn Unit

# orElse: combine two Options, using the first value found, if any.
#
#   int "not-an-integer"
#   | orElse (int "343")
#   | orElse (int "asd")
#   ---
#   Some 343
export def orElse (alternate: Option a): Option a => Option a = match _
    Some a = Some a
    None   = alternate

# omap: apply function `f` to the optional contents
# If you find yourself using the function with getOrElse, consider using a match instead.
#
#   omap (_+1) (Some 4) = Some 5
#   omap (_+1) None     = None
export def omap (f: a => b): Option a => Option b = match _
    Some a = Some (f a)
    None   = None

# omapPartial: apply partial function 'f' to the optional contents
# A partial function returns Option; only Some cases result in a value.
#
#   def divideEven x =
#       if x&1 == 1 then
#           None
#       else
#           Some (x / 2)
#
#   omapPartial divideEven None     = None
#   omapPartial divideEven (Some 8) = Some 4
#   omapPartial divideEven (Some 7) = None
export def omapPartial (f: a => Option b): Option a => Option b = match _
    Some a = f a
    None   = None

# ofilter: remove the contents of an option when `f` returns False.
#
#   def isEven x =
#       x&x == 0
#   ofilter isEven None     = None
#   ofilter isEven (Some 7) = None
#   ofilter isEven (Some 8) = Some 8
export def ofilter (f: a => Boolean): Option a => Option a = match _
    Some a if f a = Some a
    _ = None

# findSome: return the first Some in a List or else None
#
#   findSome (Some 456, None, Some 123, Nil) = Some 456
#   findSome (None, None, Nil) = None
export def findSome: List (Option a) => Option a =
    findSomeFn (_)

# findSomeFn: return the first Some output by 'fn' on a List or else None
# Once a Some is found, fn is not evaluated on further elements.
# This means that fn is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map fn | findSome' instead.
#
#   findSomeFn int ("abc", "456", "zz", "123", Nil) = Some 456
#   findSomeFn int ("abc", "_56", "zz", "_23", Nil) = None
export def findSomeFn (fn: a => Option b): List a => Option b =
    def loop = match _
        Nil = None
        h, t =
            require None = fn h
            loop t
    loop

# findNone: if all List elements are Some return the contents else None
#
#   findNone (Some 456, Some 123, Nil) = Some (456, 123, Nil)
#   findNone (Some 456, None, Some 123, Nil) = None
export def findNone: List (Option a) => Option (List a) =
    findNoneFn (_)

# findNoneFn: if fn returns Some for all List elements, return the outputs else None
# Once a None is found, fn is not evaluated on further elements.
# This means that fn is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map fn | findNone' instead.
#
#   findNoneFn int ("456", "123", Nil) = Some (456, 123, Nil)
#   findNoneFn int ("_56", "123", Nil) = None
export def findNoneFn (fn: a => Option b): List a => Option (List b) =
    def loop = match _
        Nil = Some Nil
        h, t =
            require Some x = fn h
            require Some t = loop t
            Some (x, t)
    loop

# Promote Option to Result:

# getOrFail: Convert Some to Pass and None to a Fail with the supplied value.
# The fail expression is evaluated even when the Option is None.
#
#   int "not-an-integer"
#   | getOrFail "some error"
#   ---
#   Fail "some error"
#
#   int "81234"
#   | getOrFail "some error"
#   ---
#   Pass 81234
export def getOrFail (failVal: fail): Option pass => Result pass fail =
    getOrFailFn (\_ failVal)

# getOrFailFn: Convert Some to Pass and None to a Fail with the function output.
# The fail function is evaluated only when the Option is None.
#
#   int "not-an-integer"
#   | getOrFailFn (\Unit "some error")
#   ---
#   Fail "some error"
#
#   int "81234"
#   | getOrFailFn (\Unit "some error")
#   ---
#   Pass 81234
export def getOrFailFn (failFn: Unit => fail): Option pass => Result pass fail = match _
    Some a = Pass a
    None   = Fail (failFn Unit)

# getOrPass: Convert Some to Fail and None to a Pass with the supplied value.
# The fail expression is evaluated even when the Option is None.
#
#   int "not-an-integer"
#   | getOrPass "some error"
#   ---
#   Pass "some error"
#
#   int "81234"
#   | getOrPass "some error"
#   ---
#   Fail 81234
export def getOrPass (passVal: pass): Option fail => Result pass fail =
    getOrPassFn (\_ passVal)

# getOrPassFn: Convert Some to Fail and None to a Pass with the function output.
# The pass function is evaluated only when the Option is None.
#
#   int "not-an-integer"
#   | getOrFailFn (\Unit "some error")
#   ---
#   Pass "some error"
#
#   int "81234"
#   | getOrFailFn (\Unit "some error")
#   ---
#   Fail 81234
export def getOrPassFn (passFn: Unit => pass): Option fail => Result pass fail = match _
    None   = Pass (passFn Unit)
    Some f = Fail f
