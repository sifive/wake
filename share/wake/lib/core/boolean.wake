# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# This Boolean type must exist in package wake for if/then/else syntax to work.

# The Boolean type has two values: True or False.
export data Boolean =
    True
    False

# Unary operator for Boolean NOT.
#
# ```
# !True  = False
# !False = True
# ```
export def !(x: Boolean): Boolean =
    if x then
        False
    else
        True

# Binary operator for Boolean AND; `x && y`.
# Both `x` and `y` must be True to return True.
#
# ## BEWARE: unlike other languages, in wake, expression 'y' is evaluated even if 'x' is False ##
#
# ```
# True  && True  = True
# False && True  = False
# True  && False = False
# False && False = False
# ```
export def (x: Boolean) && (y: Boolean): Boolean =
    if x then
        y
    else
        False

# Binary operator for Boolean OR; `x || y`.
# Either `x` or `y` must be True to return True.
#
# ## BEWARE: unlike other languages, in wake, expression 'y' is evaluated even if 'x' is True ##
#
# ```
# True  || True  = True
# False || True  = True
# True  || False = True
# False || False = False
# ```
export def (x: Boolean) || (y: Boolean): Boolean =
    if x then
        True
    else
        y

# Binary operator for Boolean XOR/EOR; `eor x y`.
# When `x` and `y` differ, returns True.
#
# ```
# eor True  True  = False
# eor False True  = True
# eor True  False = True
# eor False False = False
# ```
export def eor (x: Boolean) (y: Boolean): Boolean =
    if x then
        !y
    else
        y

# Binary operator for Boolean XNOR/ENOR; `enor x y`.
# When `x` and `y` are equal, returns True.
#
# ```
# enor True  True  = True
# enor False True  = False
# enor True  False = False
# enor False False = True
# ```
export def enor (x: Boolean) (y: Boolean): Boolean =
    if x then
        y
    else
        !y
