# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# Constructs a List object.  
export data List a =
  Nil
  (head: a), (tail: List a)

# Returns True if the list contains no elements, otherwise False.
export def empty = match _
  Nil = True
  _   = False

# Returns the first element of the list.
export def head = match _
  Nil  = None
  h, _ = Some h

# Returns a list of all elements, starting from the second.
export def tail = match _
  Nil  = Nil
  _, t = t

# Applies a function f to each element of the list.
export def map f =
  def helper = match _
    Nil  = Nil
    h, t = f h, helper t
  helper

# Applies a function to each element of the List and builds a new List from the resulting elements
# (f: a => List b) => List a => List b
export def mapFlat f =
  def helper = match _
    Nil  = Nil
    h, t = f h ++ helper t
  helper

export def mapPartial f =
  def helper = match _
    Nil  = Nil
    h, t =
      def sub = helper t
      match (f h)
        Some x = x, sub
        None   = sub
  helper

export def foldl f =
  def helper a = match _
    Nil  = a
    h, t = helper (f a h) t
  helper

export def scanl f =
  def helper a = match _
    Nil  = a, Nil
    h, t = a, helper (f a h) t
  helper

export def foldr f =
  def helper a = match _
    Nil  = a
    h, t = f h (helper a t)
  helper

export def scanr f =
  def helper a = match _
    Nil  = Pair a (a, Nil)
    h, t =
      def Pair u v = helper a t
      def head = f h u
      Pair head (head, v)
  helper _ _ | getPairSecond

# list helpers
def lcat = foldr (_,_) # curried to expose recursive helper outside of ++
export def l ++ r  = lcat r l # ++ is required by the implementation of publish
export def reverse = foldl (\a\b b,a) Nil
export def flatten = foldr (_++_) Nil
export def len     = foldl (\a\_ a+1) 0

# Place item at start of list. This is O(1).
export def prepend item list = item, list

# Place item at end of list. This is O(n), use prepend or ',' for O(1).
export def append  item list = list ++ (item, Nil)

# list choppers
export def splitAt i l =
  if i <= 0 then Pair Nil l else match l
    Nil  = Pair Nil Nil
    h, t =
      def Pair u v = splitAt (i-1) t
      Pair (h, u) v

export def take i l =
  if i <= 0 then Nil else match l
    Nil = Nil
    h, t = h, take (i-1) t

export def drop i l =
  if i <= 0 then l else match l
    Nil = Nil
    _, t = drop (i-1) t

export def at i l =
  if i < 0 then None else head (drop i l)

export def splitUntil f =
  def helper l = match l
    Nil  = Pair Nil Nil
    h, t =
      if f h
      then Pair Nil l
      else
        def Pair u v = helper t
        Pair (h, u) v
  helper

export def takeUntil f =
  def helper = match _
    Nil  = Nil
    h, t = if f h then Nil else h, helper t
  helper

export def dropUntil f =
  def helper l = match l
    Nil  = Nil
    h, t = if f h then l else helper t
  helper

export def find f =
  def helper i = match _
    Nil  = None
    h, t = if f h then Some (Pair h i) else helper (i+1) t
  helper 0

export def exists f l = find f l | isSome
export def forall f =
  def not = ! f _
  ! exists not _

export def splitBy f = match _
  Nil  = Pair Nil Nil
  h, t =
    def Pair u v = splitBy f t
    if   f h
    then Pair (h, u) v
    else Pair u (h, v)

export def filter f =
  def helper = match _
    Nil  = Nil
    h, t =
      def sub = helper t
      if f h then h, sub else sub
  helper

# Tranposition is only it's own inverse when the lists have non-increasing size
def mapTail = match _
  Nil = Nil
  Nil, t = mapTail t
  (_, b), t = b, mapTail t
export def transpose l =
  def heads = mapPartial head l
  def tails = mapTail l
  if heads.empty then Nil else heads, transpose tails

# f should be a less-than comparison
export def sortBy f l = vectorToList (vsortBy f (listToVector l))

# keep only the first occurrence of a value
export def distinctBy cmp =
  def helper tree = match _
    Nil = Nil
    x, tail =
      def sub = helper (tinsert x tree) tail
      if x âˆˆ tree then sub else x, sub
  helper (tnew cmp)

# f should be an equality comparison
# keep only the first occurrence in a run of equal values
export def distinctRunBy f l = match l
  x, y, t =
    if f x y
    then distinctRunBy f (x, t)
    else x, distinctRunBy f (y, t)
  _ = l

export def cmp f = match _ _
  Nil     Nil     = EQ
  Nil     _       = LT
  _       Nil     = GT
  (lh,lt) (rh,rt) = match (f lh rh)
    EQ = cmp f lt rt
    x  = x

export def tab f =
  def helper a n = if n <= 0 then a else helper (f (n-1), a) (n-1)
  helper Nil

export def seq = tab (_)

export def zip = match _ _
  Nil     _       = Nil
  _       Nil     = Nil
  (lh,lt) (rh,rt) = Pair lh rh, zip lt rt

export def unzip = match _
  Nil         = Pair Nil Nil
  Pair a b, t =
    def Pair u v = unzip t
    Pair (a, u) (b, v)

# Group a list by some comparison function.
# Elements which compare equal are placed into the same bucket.
# Buckets preserve the order of the original list.
# The buckets appear in the sort-order specified by cmp.
# Examples:
#
#   def cmp a b = a%3 < b%3
#   def list = seq 10
#   groupBy cmp list
#   ---
#   (0,3,6,9,Nil), (1,4,7,Nil), (2,5,8,Nil), Nil
#
#   def cmp a b = a/3 > b/3
#   def list = seq 10
#   groupBy cmp list
#   ---
#   (9,Nil), (6,7,8,Nil), (3,4,5,Nil), (0,1,2,Nil), Nil
#
export def groupBy cmp list =
  def sorted = sortBy cmp list
  def combo elem acc = match acc
    (head, rest), tail if ! cmp elem head = (elem, head, rest), tail
    _ = (elem, Nil), acc
  foldr combo Nil sorted
