# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# The List type in wake is the most common way to represent a collection.
# It is an ordered collection with efficient access only to the first element.
#
# This definition introduces:
#   - the Nil constructor for the empty List
#   - the comma operator to prepend elements to a List
#
# Because the comma operator is right associative, a List parses like this:
# ```
#   0, 1, 2, Nil = (0, (1, (2, Nil)))
# ```
#
# Since List has a type parameter, any type can be legally stored in a list
# ```
#   0, 1, 2, Nil         # ok! This is a `List Integer`
#   "0", "1", "2", Nil   # ok! This is a `List String`
# ```
#
# However, mixing types is *not* legal:
# ```
#   0, "1", Nil          # bad! This will trigger a type-check failure.
# ```
export data List a =
# The empty list. Nil represents a list with no elements.
    Nil
# The prepend constructor. This is often called "cons".
#
# Examples:
# ```
#   10, list       # Add a number to `list`
#   1, 2, 3, Nil   # Create a list of 3 elements
# ```
    (head: a), (tail: List a)

# Create a singleton list from a value. This
# can be used to slightly increase the niceness
# of lists by avoid the Nil at the end. This is
# especially nice for vertical lists.
#
# Examples:
# ```
#   10,                      # Create a singleton list containing just 10
#   1, 2, 3,                 # Create a list of 3 elements without using Nil
#   (1, 2, 3,) ++ (4, 5, 6,) # append two lists
# ```
export def element, = element, Nil

# Report if the list contains no elements.
# If you find yourself using the function, consider using match instead.
#
# Examples:
# ```
#   empty Nil      = True
#   empty (seq 0)  = True
#   empty (1, Nil) = False
#   empty (seq 9)  = False
# ```
export def empty: List a => Boolean = match _
    Nil = True
    _   = False

# Retrieve the first element of the list, else None.
# If you find yourself using the function, consider using match instead.
#
# Examples:
# ```
#   head Nil = None
#   head ("a", "b", Nil) = Some "a"
#   head (seq 10) = Some 0
# ```
export def head: List a => Option a = match _
    Nil  = None
    h, _ = Some h

# Remove the first element from the List
# If you find yourself using the function, consider using match instead.
#
# Examples:
# ```
#   tail (seq 5) = 1, 2, 3, 4, Nil
#   tail ("a", Nil) = Nil
#   tail Nil = Nil
#   tail (pi, 1.0, Nil) = 1.0, Nil
# ```
export def tail: List a => List a = match _
    Nil  = Nil
    _, t = t

# Create a new List by applying the function `mapFn` to each element of `list`.
# The `map` function (along with `foldl`) is generally how one implements loops in wake.
# This function (like most in wake) runs `mapFn` in parallel.
#
# Parameters:
#  - `mapFn`: The function to apply to each element
#  - `list`: The List of elements to feed to `mapFn`
#
# Guarantees:
#  - The resultant List has the same length as `list`
#
# Examples:
# ```
#   map str     (3, 9, Nil) = "3", "9", Nil
#   map (_+100) (3, 9, Nil) = 103, 109, Nil
# ```
export def map (mapFn: a => b): (list: List a) => List b =
    def loop list = match list
        Nil  = Nil
        h, t = mapFn h, loop t
    loop

# Create a new List by applying a function f to each element and concatenating the output.
#
# Parameters:
#  - `mapFn`: The function to apply to each element
#  - `list`: The list of elements to feed to `mapFn`
#
# Examples:
# ```
#   def twice x = x, x, Nil
#   mapFlat twice (seq 3) = 0, 0, 1, 1, 2, 2, Nil
#   mapFlat seq (seq 5) = 0, 0, 1, 0, 1, 2, 0, 1, 2, 3, Nil
# ```
export def mapFlat (mapFn: a => List b): (list: List a) => List b =
    def loop = match _
        Nil  = Nil
        h, t = mapFn h ++ loop t
    loop

# Create a new List by applying a partial function to each element of a List.
# Partial functions can return None, in which case the result is not included in the output.
#
# Parameters:
#  - `mapFn`: The partial function to apply to each element
#  - `list`: The list of elements to feed to `mapFn`
#
# Guarantees:
#  - The resultant List is no longer than `list`
#
# Examples:
# ```
#   mapPartial int ("3", "x", "44", Nil) = 3, 44, Nil
# ```
export def mapPartial (f: a => Option b): (list: List a) => List b =
    def loop = match _
        Nil  = Nil
        h, t =
            # don't wait on f to process tail:
            def sub = loop t
            match (f h)
                Some x = x, sub
                None   = sub
    loop

# Combine the elements of a List front-to-back into a single value.
# An accumulator is updated from its initial value by combiningFn for each element.
#
# In C++ syntax, `foldl <combiningFn> <accumulateInitalValue> <List>` does:
# ```c++
#   auto accumulator = <accumulateInitalValue>;
#   for (element : <List>) accumulator = combiningFn(accumulator, element);
#   return accumulator;
# ```
# In python this is similar to `functools.reduce`
#
# Parameters:
#  - `combiningFn`: The function to combine elements of the list with the accumulator
#  - `initialValue`: The initial value of the accumulator
#  - `list`: The list to combine the elements of
#
# Examples:
# ```
#   foldl f x Nil = x
#   foldl f x (a, b, c, Nil) = f (f (f x a) b) c
#   foldl (_+_) 0 (seq 6) = 15
#   foldl (_*_) 0 l = 0
# ```
export def foldl (combiningFn: accumulator => element => accumulator): accumulator => List element => accumulator =
    def loop accumulator = match _
        Nil = accumulator
        element, rest = loop (combiningFn accumulator element) rest
    loop

# Create a new List from an accumulator run over the elements front-to-back.
# The last element of the produced List is equivalent to the result of foldl.
#
# Parameters:
#  - `combiningFn`: The function to combine elements of the list with the accumulator
#  - `initialValue`: The initial value of the accumulator
#  - `list`: The list to scan over
#
# Guarantees:
#  - The resultant List is exactly one element longer than `list`
#  - The first element of the resultant List will be `initialValue`
#  - The last element of the resultant List will be equal to `foldl combiningFn initialValue list`
#  - If `combiningFn` is a group operation, the difference between the resultants yields `list`
#
# Examples:
# ```
#   scanl f z Nil = z
#   scanl (_+_) 100 (seq 6) = 100, 100, 101, 103, 106, 110, 115, Nil
#                                                           ^^^- 100+0+1+2+3+4+5
#                                            ^^^- 100+0+1+2
#                                  ^^^- 100+0
#                             ^^^- 100
#  ```
export def scanl (combiningFn: accumulator => element => accumulator): accumulator => List element => List accumulator =
    def loop accumulator = match _
        Nil = accumulator, Nil
        element, rest = accumulator, loop (combiningFn accumulator element) rest
    loop

# Combine the elements of a List back-to-front into a single value.
# An accumulator is updated from its initial value by combiningFn for each element.
#
# Parameters:
#  - `combiningFn`: The function to combine elements of the list with the accumulator
#  - `initialValue`: The initial value of the accumulator
#  - `list`: The list to combine the elements of
#
# Examples:
# ```
#   foldr f x Nil = x
#   foldr f x (a, b, c, Nil) = f a (f b (f c x))
#   foldr (_,_) y x = x ++ y
# ```
export def foldr (combiningFn: element => accumulator => accumulator): accumulator => List element => accumulator =
    def loop accumulator = match _
        Nil = accumulator
        element, rest = combiningFn element (loop accumulator rest)
    loop

# Create a new List from an accumulator run over the elements back-to-front.
# The first element of the produced List is equivalent to the result of a foldr.
#
# Parameters:
#  - `combiningFn`: The function to combine elements of the list with the accumulator
#  - `initialValue`: The initial value of the accumulator
#  - `list`: The list to scan over
#
# Guarantees:
#  - The resultant List is exactly one element longer than `list`
#  - The first element of the resultant List will be `foldl combiningFn initialValue list`
#  - The last element of the resultant List will be equal to `initialValue`
#  - If `combiningFn` is a group operation, the difference between the resultants yields `list`
#
# Examples:
# ```
#   scanr
#   scanr (_+_) 100 (seq 6) = 115, 115, 114, 112, 109, 105, 100, Nil
#                                                           ^^^- 100
#                                                      ^^^- 5+100
#                                  ^^^- 1+2+3+4+5+100
#                             ^^^- 0+1+2+3+4+5+100
#  ```
export def scanr (combiningFn: element => accumulator => accumulator): accumulator => List element => List accumulator =
    def loop accumulator = match _
        Nil = accumulator, Nil
        element, rest =
            def tail = loop accumulator rest
            require acc, _ = tail
            else unreachable "scanr never returns an empty list"
            combiningFn element acc, tail
    loop

# Concatenate two lists into one List.
# The ++ operator must be provided by the wake package for publish to work.
#
# Guarantees:
#  - ++ is associtive
#  - Nil is an identity of ++
#
# Examples:
# ```
#   (1, 2, 3, Nil) ++ (8, 9, Nil) = (1, 2, 3, 8, 9, Nil)
#   (x ++ y) ++ z = x ++ (y ++ z)                        # associtive
#   Nil ++ x = x                                         # left identity
#   x ++ Nil = x                                         # right identity
# ```
export def (l: List a) ++ (r: List a): List a = lcat r l
# curried to expose recursive loop outside of ++
def lcat = foldr (_,_)

# Reverse the order of elements in a List
#
# Guarantees:
#  - reverse is its own inverse
#  - The resultant List has the same length as `list`
#  - The resultant List is a permutation of `list`
#
# Examples:
# ```
#   reverse (seq 5) = 4, 3, 2, 1, 0, Nil
#   reverse Nil = Nil
#   reverse (reverse x) = x
# ```
export def reverse: List a => List a =
    foldl (\a\b b,a) Nil

# Concatenate a List of Lists into a simple List
#
# Examples:
# ```
#   flatten ((1, 2, Nil), (3, Nil), (4, 5, Nil), Nil) = 1, 2, 3, 4, 5, Nil
#   flatten Nil = Nil
#   flatten (x, Nil) = x
#   flatten (x, y, Nil) = x ++ y
# ```
export def flatten: List (List a) => List a =
    foldr (_++_) Nil

# Count the number of elements in a List
#
# Examples:
# ```
#   len Nil = 0
#   len (1, 2, Nil) = 2
#   len (seq x) = x
# ```
export def len: List a => Integer =
    foldl (\a\_ a+1) 0

# Add `item` to the start of `list`.
# This is efficient no matter how large the list.
# Consider using ',' directly as it is more idiomatic.
#
# Examples:
# ```
#   prepend 9 (seq 3) = 9, 0, 1, 2, Nil
#   prepend 8 Nil     = 8, Nil
# ```
export def prepend (item: a) (list: List a): List a =
    item, list

# Add `item` to the end of `list`.
#
# **NOTE**: This function must recreate the entire list to add the item.
# If you add 1000 items to an empty list, this costs 1000*1000/2 steps.
# Therefore, if you need to add more than one item to the end of a list,
# you should consider prepending them to an empty list and then appending
# that list in reverse to the list you want to enlarge.
#
# Examples:
# ```
#   append 9 (seq 3) = 0, 1, 2, 9, Nil
#   append 9 Nil     = 9, Nil
#
#   append 8 (append 7 (append 6 (seq 6)))
#   = 0, 1, 2, 3, 4, 5, 6, 7, 8, Nil
#   = (seq 6) ++ reverse (8, 7, 6, Nil)   # <== potentially much faster
# ```
export def append (item: a) (list: List a): List a =
    list ++ (item, Nil)

# Given an index, cut a List into elements before and after the index
#
# Examples:
# ```
#   splitAt 4 (seq 8) = Pair (0, 1, 2, 3, Nil) (4, 5, 6, 7, Nil)
#   splitAt 0 (seq 8) = Pair Nil (0, 1, 2, 3, 4, 5, 6, 7, Nil)
#   splitAt 8 (seq 8) = Pair (0, 1, 2, 3, 4, 5, 6, 7, Nil) Nil
#   splitAt 1000 (seq 3) = Pair (seq 3) Nil
# ```
export def splitAt (index: Integer) (listToDivide: List a): Pair (List a) (List a) =
    if index <= 0 then
        Pair Nil listToDivide
    else match listToDivide
        Nil  = Pair Nil Nil
        h, t =
            def Pair u v = splitAt (index-1) t
            Pair (h, u) v

# Keep only the first `length` elements
#
# Examples:
# ```
#   take 2 (seq 100) = 0, 1, Nil
#   take 0 (seq 100) = Nil
#   take 2 Nil = Nil
#   take (-2) (seq 100) = Nil
# ```
export def take (length: Integer) (l: List a): List a =
    if length <= 0 then
        Nil
    else match l
        Nil  = Nil
        h, t = h, take (length-1) t

# Discard the first `num` elements
#
# Examples:
# ```
#   drop 4 (seq 6) = 4, 5, Nil
#   drop 6 (seq 6) = Nil
#   drop 0 (seq 3) = 0, 1, 2, Nil
#   drop (-2) (seq 3) = 0, 1, 2, Nil
# ```
export def drop (num: Integer) (l: List a): List a =
    if num <= 0 then
        l
    else match l
        Nil = Nil
        _, t = drop (num-1) t

# Extract the i-th element if it exists or else None
#
# Examples:
# ```
#   at 4 (seq 8) = Some 4
#   at 4 (seq 4) = None
#   at (-1) (seq 4) = None
# ```
export def at (i: Integer) (l: List a): Option a =
    if i < 0 then
        None
    else
        head (drop i l)

# Cut the List at the point `f` is first True
# Once `stopFn` returns True, `stopFn` is not evaulated on further elements.
# This means that `stopFn` is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map f | find (_)' and splitAt.
#
# Examples:
# ```
#   splitUntil (_>=4) (seq 8) = Pair (0, 1, 2, 3, Nil) (4, 5, 6, 7, Nil)
#   splitUntil (_>=0) (seq 8) = Pair Nil (0, 1, 2, 3, 4, 5, 6, 7, Nil)
#   splitUntil (_>=8) (seq 8) = Pair (0, 1, 2, 3, 4, 5, 6, 7, Nil) Nil
# ```
export def splitUntil (stopFn: a => Boolean): List a => Pair (List a) (List a) =
    def loop l = match l
        Nil  = Pair Nil Nil
        h, t =
            if stopFn h then
                Pair Nil l
            else
                def Pair u v = loop t
                Pair (h, u) v
    loop

# Take the longest prefix of a list where `f` is False
# Once `f` returns True, `f` is not evaulated on further elements.
# This means that `f` is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map f | find (_)' and take.
#
# Examples:
# ```
#   takeUntil (_>=4) (seq 8) = 0, 1, 2, 3, Nil
#   takeUntil (_>=0) (seq 8) = Nil
#   takeUntil (_>=8) (seq 8) = 0, 1, 2, 3, 4, 5, 6, 7, Nil
# ```
export def takeUntil (f: a => Boolean): List a => List a =
    def loop = match _
        Nil         = Nil
        h, _ if f h = Nil
        h, t        = h, loop t
    loop

# Discard elements from the list until 'f' returns True
# Once `f` returns True, `f` is not evaulated on further elements.
# This means that `f` is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map f | find (_)' and drop.
#
# Examples:
# ```
#   dropUntil (_>=4) (seq 8) = 4, 5, 6, 7, Nil
#   dropUntil (_>=0) (seq 8) = 0, 1, 2, 3, 4, 5, 6, 7, Nil
#   dropUntil (_>=8) (seq 8) = Nil
# ```
export def dropUntil (f: a => Boolean): List a => List a =
    def loop l = match l
        Nil         = Nil
        h, _ if f h = l
        _, t        = loop t
    loop

# Find the location of the first element accepted by `f`
# Returns: `Pair value index`, such that `value` is `at index`
# Once `f` returns True, `f` is not evaulated on further elements.
# This means that `f` is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map f | find (_)'.
#
# Examples:
# ```
#   def l = (85, 4, 10, 3, Nil)
#   find (_==10) l = Some (Pair 10 3)
#   find (_>9) l = Some (Pair 85 0)
#   find (_<3) l = None
# ```
export def find (f: a => Boolean): List a => Option (Pair a Integer) =
    def loop i = match _
        Nil         = None
        h, _ if f h = Some (Pair h i)
        _, t        = loop (i+1) t
    loop 0

# Does `f` return True for any element in the list?
# Once `f` returns True, `f` is not evaulated on further elements.
# This means that `f` is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map f | exists (_)'.
#
# Examples:
# ```
#   exists (_==11) (seq 20) = True
#   exists (_>100) (seq 20) = False
#   exists (_<100) (seq 20) = True
#   exists (\_ True) Nil    = False
#   exists (\_ True) (prepend x xs) = True
#   exists p xs = ! (forall (! p _) xs)
# ```
export def exists (f: a => Boolean): List a => Boolean =
    find f _ | isSome

# Does `f` return True for all elements in the list?
# Once `f` returns False, `f` is not evaulated on further elements.
# This means that `f` is applied to the List mostly sequentially.
# If more parallelism is desired, use 'map f | forall (_)'.
#
# Examples:
# ```
#   forall (_==11) (seq 20) = False
#   forall (_>100) (seq 20) = False
#   forall (_<100) (seq 20) = True
#   forall (\_ False) Nil   = True
#   forall (\_ False) (prepend x xs) = False
#   forall (\_ True) xs = True
#   forall p xs = ! (exists (! p _) xs)
# ```
export def forall (f: a => Boolean): List a => Boolean =
    def not = ! f _
    ! exists not _

# Partition one `list` into two Lists based on the output of `acceptFn`.
# Every element of `list` appears in exactly one of the output Lists.
# Two elements in an output List retain the order they had in `list`.
#
# Parameters:
#  - `acceptFn`: The Boolean function which categorizes each element
#  - `list`: The List of elements to be categorized by `True` / `False`
#
# Returns `Pair true false`, where:
#  - `true`:  List of elements from `list` for which `acceptFn` returned `True`
#  - `false`: List of elements from `list` for which `acceptFn` returned `False`
#
# Examples:
# ```
#   def isEven x = x%2 == 0
#   splitBy isEven (0, 1, 3, 5, 6, Nil) = Pair (0, 6, Nil) (1, 3, 5, Nil)
#   splitBy p xs = Pair (filter p xs) (filter (! p _) xs)
# ```
export def splitBy (acceptFn: a => Boolean): (list: List a) => Pair (true: List a) (false: List a) =
    def loop list = match list
        Nil  = Pair Nil Nil
        h, t =
            # don't wait on f to process tail:
            def Pair u v = loop t
            if acceptFn h then
                Pair (h, u) v
            else
                Pair u (h, v)
    loop

# Keep only those elements in the List where `f` evaluates to True
#
# Examples:
# ```
#   def isEven x = x%2 == 0
#   filter isEven (seq 10) = 0, 2, 4, 6, 8, Nil
#   filter p Nil = Nil
#   filter (\x True) xs = xs
#   filter (\x False) xs = Nil
#   filter p xs = getPairFirst (splitBy p xs)
# ```
export def filter (f: a => Boolean): List a => List a =
    def loop = match _
        Nil  = Nil
        h, t =
            def sub = loop t
            if f h then
                h, sub
            else
                sub
    loop

# Flip the 1st and 2nd indexes in a List of Lists
# transpose is only it's own inverse when the lists have non-increasing length
#
# Examples:
# ```
#   transpose ((1, 2, 3, Nil), (4, 5, 6, Nil), Nil) =
#   (1, 4, Nil), (2, 5, Nil), (3, 6, Nil), Nil
#
#   transpose (map seq (seq 5)) =
#   (0, 0, 0, 0, Nil), (1, 1, 1, Nil), (2, 2, Nil), (3, Nil), Nil
#
#   transpose Nil = Nil
#   transpose (Nil, Nil) = (Nil, Nil)
# ```
export def transpose: List (List a) => List (List a) =
    def innerHead =
        mapPartial head
    def innerTail = match _
        Nil = Nil
        Nil, t = innerTail t
        (_, b), t = b, innerTail t
    def outer l =
        def heads = innerHead l
        if heads.empty then
            Nil
        else
            def tails = innerTail l
            heads, outer tails
    outer

# Given a less-than comparison operator, sort the list
# Elements which compare equal retain their order in the output list.
# The lessThanFn must provide these two properties for all x, y, z:
# ```
#   if lessThanFn x y then ! lessThanFn y x
#   if lessThanFn x z then lessThanFn x y || lessThanFn y z
# ```
#
# Parameters:
#  - `lessThanFn`: The less-than comparision operator that defines the ordering
#  - `list`: The list of elements to sort by `lessThanFn`
#
# Guarantees:
#  - The output is a permutation of `list`
#  - If `0 <= x < y < len list` then `lessThanFn (at list x) (at list y)` (ignoring None)
#
# Example:
# ```
#   sortBy (_<_) (6, 1, 4, 2, Nil) = 1, 2, 4, 6, Nil
#   sortBy p Nil = Nil
#   sortBy p (x, Nil) = (x, Nil)
#   sortBy (\x\y if x == y then False else ! p x y) xs = reverse (sortBy p xs)
# ```
export def sortBy (lessThanFn: a => a => Boolean): (list: List a) => List a =
    def sort =
        vsortBy lessThanFn
    def top l =
        listToVector l
        | sort
        | vectorToList
    top

# Keep only the first occurrence of a value
# The order of non-duplicated elements is retained.
#
# This runs in O(n*lg(n))
#
# Example:
# ```
#   distinctBy (_<=>_) (1, 2, 1, 3, 4, 3, Nil) = 1, 2, 3, 4, Nil
#   distinctBy (_<=>_) Nil = Nil
# ```
export def distinctBy (cmp: a => a => Order): List a => List a =
    def loop tree = match _
        Nil = Nil
        x, tail =
            def sub =
                loop (tinsert x tree) tail
            if x ∈ tree then
                sub
            else
                x, sub
    loop (tnew cmp)

# Keep only the first occurrence in a run of equal values
#
# Example:
#  ```
#  distinctRunBy (_==_) (1, 1, 2, 1, 3, 3, Nil) = 1, 2, 1, 3, Nil
#  distinctRunBy (_==_) Nil = Nil
#  distinctBy (_<=>_) | sortBy (_<_) = sortBy (_<_) | distinctRunBy (_==_)
#  ```
export def distinctRunBy (eqFn: a => a => Boolean): List a => List a =
    def loop l =
        require x, y, t = l
        if eqFn x y then
            loop (x, t)
        else
            x, loop (y, t)
    loop

# Compare two lists using an Order comparator
# * `EQ` is the result if the lists are exactly equal.
# * `LT` is the result if the first elements that `f` does not return `EQ` for returns `LT`
#   or if `l` is a prefix of `r`.
# * `GT` is the result if the first elements that `f` does not return `EQ` for returns `GT`
#   or if `r` is a prefix of `l`.
#
# This is also called a lexicographical ordering.
#
# Parameters:
#  - `cmpFn`: The function by which elements of `l` and `r` are compared
#  - `l`: The left list
#  - `r`: The right list
#
# Example:
# ```
#   cmp (_<=>_) (seq 5)  (seq 5)  = EQ
#   cmp (_<=>_) (seq 5)  (seq 4)  = GT
#   cmp (_<=>_) (0, Nil) (1, Nil) = LT
# ```
export def cmp (cmpFn: a => b => Order): (l: List a) => (r: List b) => Order =
    def loop = match _ _
        Nil Nil = EQ
        Nil _   = LT
        _   Nil = GT
        (lh,lt) (rh,rt) =
            require EQ = cmpFn lh rh
            loop lt rt
    loop

# Create a list of specified size by calling `f` on the index to generate.
#
# Example:
# ```
#   tab (_+100) 5 = 100, 101, 102, 103, 104, Nil
#   tab f 0 = Nil
#   tab f 3 = f 0, f 1, f 2, Nil
# ```
export def tab (f: Integer => a): Integer => List a =
    def loop a n =
        if n <= 0 then
            a
        else
            loop (f (n-1), a) (n-1)
    loop Nil

# Create a List of specified length with value ascending from 0.
# For x <  y: at x (seq y) = Some x
# For x >= y: at x (seq y) = None
#
# Example
# ```
#   seq 10 = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, Nil
#   seq (-1) = Nil
#   seq 0 = Nil
# ```
export def seq: Integer => List Integer =
    tab (_)

# Take two Lists and turn them into a List of Pairs
# The shortest length of the two input lists sets the output length.
#
# Example:
# ```
#   zip (4, 7, Nil) ("a", "b", Nil) = (Pair 4 "a", Pair 7 "b", Nil)
#   zip (4, 7, Nil) ("a", "b", "c", Nil) = (Pair 4 "a", Pair 7 "b", Nil)
#   zip Nil x = Nil
#   zip x Nil = Nil
# ```
export def zip (a: List a) (b: List b): List (Pair a b) = match a b
    Nil _   = Nil
    _   Nil = Nil
    (lh,lt) (rh,rt) = Pair lh rh, zip lt rt

# Turn a List of Pairs into a Pair of Lists
#
# Guarantees:
#  - Both output lists will be the same length
#  - if `(len x) == (len y)` then `unzip (zip x y) = Pair x y`
#  - `(\(Pair x y) zip x y) (unzip l) = l`
#
# Example:
# ```
#   unzip (Pair 4 "a", Pair 7 "b", Nil) = Pair (4, 7, Nil) ("a", "b", Nil)
#   unzip Nil = Pair Nil Nil
# ```
export def unzip (list: List (Pair a b)): Pair (List a) (List b) = match list
    Nil = Pair Nil Nil
    Pair a b, t =
        def Pair u v = unzip t
        Pair (a, u) (b, v)

# Group a list by some comparison function.
# Elements which compare equal are placed into the same bucket.
# Buckets preserve the order of the original list.
# The buckets appear in the sort-order specified by cmp.
#
# Examples:
# ```
#   def cmp a b = a%3 < b%3
#   def list = seq 10
#   groupBy cmp list =
#   (0,3,6,9,Nil), (1,4,7,Nil), (2,5,8,Nil), Nil
#
#   def cmp a b = a/3 > b/3
#   def list = seq 10
#   groupBy cmp list =
#   (9,Nil), (6,7,8,Nil), (3,4,5,Nil), (0,1,2,Nil), Nil
# ```
export def groupBy (cmp: a => a => Boolean) (list: List a): List (List a) =
    def sorted = sortBy cmp list
    def combo elem acc = match acc
        (head, rest), tail if ! cmp elem head =
            (elem, head, rest), tail
        _ = (elem, Nil), acc
    foldr combo Nil sorted
