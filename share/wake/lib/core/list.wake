# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# lists
global data List a =
  Nil
  (head: a), (tail: List a)

global def empty = match _
  Nil = True
  _   = False

global def head = match _
  Nil  = raise "empty list"
  h, _ = h

global def tail = match _
  Nil  = raise "empty list"
  _, t = t

global def map f = match _
  Nil  = Nil
  h, t = f h, map f t

global def mapPartial f = match _
  Nil  = Nil
  h, t = match (f h)
    Some x = x, mapPartial f t
    None   = mapPartial f t

global def foldl f a = match _
  Nil  = a
  h, t = foldl f (f a h) t

global def scanl f a = match _
  Nil  = a, Nil
  h, t = a, scanl f (f a h) t

global def foldr f a = match _
  Nil  = a
  h, t = f h (foldr f a t)

global def scanr f a = match _
  Nil  = a, Nil
  h, t =
    def finish r = f h r.head, r
    finish (scanr f a t)

# list helpers
global def l ++ r    = foldr (_,_) r l # ++ is required by the implementation of publish
global def reverse l = foldl (\a\b b,a) Nil l
global def flatten l = foldr (_++_) Nil l
global def len l     = foldl (\a\_ a+1) 0 l

# list choppers
global def splitAt i l =
  if i <= 0 then Pair Nil l else match l
    Nil  = Pair Nil l
    h, t = match (splitAt (i-1) t)
      Pair f s = Pair (h, f) s

global def take i l = splitAt i l | getPairFirst
global def drop i l = splitAt i l | getPairSecond

global def atOpt i l =
  if i < 0 then None else match (drop i l)
    Nil  = None
    x, _ = Some x

global def at i l = match (atOpt i l)
  None   = raise "at index out of bounds"
  Some x = x

global def splitUntil f l = match l
  Nil  = Pair Nil Nil
  h, t = if f h then Pair Nil l else match (splitUntil f t)
    Pair f s = Pair (h, f) s

global def takeUntil f l = splitUntil f l | getPairFirst
global def dropUntil f l = splitUntil f l | getPairSecond

global def find f =
  def helper i = match _
    Nil  = None
    h, t = if f h then Some (Pair h i) else helper (i+1) t
  helper 0

global def exists f l = match (find f l)
  Some _ = True
  None   = False

global def forall f l = ! exists (! f _) l

global def splitBy f = match _
  Nil  = Pair Nil Nil
  h, t = match (splitBy f t)
    Pair x y =
      if f h
      then Pair (h, x) y
      else Pair x (h, y)

global def filter f l = splitBy f l | getPairFirst

# Tranposition is only it's own inverse when the lists have non-increasing size
global def transpose l =
  def todo = filter (!_.empty) l
  def heads = map head todo
  def tails = map tail todo
  if todo.empty then Nil else heads, transpose tails

# f should be a less-than comparison
global def sortBy f l = vectorToList (vsortBy f (listToVector l))

# keep only the first occurrence of a value
global def distinctBy cmp =
  def helper tree = match _
    Nil = Nil
    x, tail = match (x âˆˆ tree)
      True  = helper tree tail
      False = x, helper (tinsert x tree) tail
  helper (tnew cmp) _

# f should be an equality comparison
# keep only the first occurrence in a run of equal values
global def distinctRunBy f l = match l
  x, y, t =
    if f x y
    then distinctRunBy f (x, t)
    else x, distinctRunBy f (y, t)
  _ = l

global def cmp f = match _ _
  Nil     Nil     = EQ
  Nil     _       = LT
  _       Nil     = GT
  (lh,lt) (rh,rt) = match (f lh rh)
    EQ = cmp f lt rt
    x  = x

global def tab f n =
  def helper i = if i >= n then Nil else f i, helper (i+1)
  helper 0

global def seq = tab (_)

global def zip = match _ _
  Nil     _       = Nil
  _       Nil     = Nil
  (lh,lt) (rh,rt) = Pair lh rh, zip lt rt

global def unzip = match _
  Nil           = Pair Nil Nil
  (Pair a b), t = match (unzip t)
    Pair c d = Pair (a, c) (b, d)
