# Vector type
data Vector a = Vector (Array a) Integer Integer

# Convert List a => Vector a
global def lvector l =
  def llen = len l
  def vnew n = prim "vnew"
  # take out as an arg so vnew does not generalize
  def bind out =
    def vset o i v = prim "vset"
    def doit i v =
      def _ = vset out i v
      i+1
    def _ = foldl doit 0 l
    out
  Vector (bind (vnew llen)) 0 llen

global def tvector t =
  def len = tlen t
  def vnew n = prim "vnew"
  # take out as an arg so vnew does not generalize
  def bind out =
    def vset o i v = prim "vset"
    def f i x = vset out i x
    def _ = tappi f t
    out
  Vector (bind (vnew len)) 0 len

global def vempty (Vector _ s e) = s == e
global def vlen (Vector _ s e) = e - s
global def vlist = vfoldr (_,_) Nil

global def vsplitAt i (Vector v s e) =
  def x = min e (s + max 0 i)
  Pair (Vector v s x) (Vector v x e)

global def vtake i v = (vsplitAt i v).first
global def vdrop i v = (vsplitAt i v).second

global def vatOpt i (Vector v s e) =
  def get v i = prim "vget"
  def j = i+s
  if i >= 0 && j < e then Some (get v j) else None

global def vat i v = match (vatOpt i v)
  None   = raise "vat index out of bounds"
  Some x = x

def vat_ i (Vector v s _) =
  def get v i = prim "vget"
  get v (s+i)

global def vmap f v = vtab (\i f (vat_ i v)) (vlen v)
global def vseq n = vtab (_) n
global def vzip a b = vtab (\i Pair (vat_ i a) (vat_ i b)) (min (vlen a) (vlen b))
global def vunzip v =
  Pair (vtab (\i (vat_ i v).first) (vlen v)) (vtab (\i (vat_ i v).second) (vlen v))
global def vreverse v =
  def n = vlen v
  def n1 = n-1
  vtab (\i vat_ (n1-i) v) n

global def vfoldl f a v =
  def len = vlen v
  def helper a i =
    if i == len
    then a
    else helper (f a (vat_ i v)) (i+1)
  helper a 0

global def vfoldr f a v =
  def helper a i =
    if i == -1
    then a
    else helper (f (vat_ i v) a) (i-1)
  helper a (vlen v - 1)

global def vfoldmap f a g v =
  def len = vlen v
  def helper a s e =
    def mid = (e + s) >> 1
    def mid1 = mid + 1
    def b = g (vat_ mid v)
    def l = if mid  == s then a else helper a s mid
    def r = if mid1 == e then b else helper b mid1 e
    f l r
  if len == 0 then a else helper a 0 len

global def vfold f a v = vfoldmap f a (_) v

global def vfind f v =
  def len = vlen v
  def helper i =
    if i == len then None else
      def x = vat_ i v
      if f x then Some (Pair x i) else helper (i+1)
  helper 0

global def vsplitUntil f v =
  match (vfind f v)
    None = match v
      (Vector z _ _) = Pair v (Vector z 0 0)
    Some (Pair _ i) = vsplitAt i v

global def vtakeUntil f t = (vsplitUntil f t).first
global def vdropUntil f t = (vsplitUntil f t).second

# Returns True if there exists an x where f x = True
global def vexists f t = match (vfind f t)
  Some _ = True
  None   = False

global def vforall f t = !vexists (!f _) t

global def vsplitBy f v =
  def len = vlen v
  def vnew n = prim "vnew"
  def select = vmap f v
  def index = vscanmap (_+_) 0 (\x (if x then 1 else 0)) select
  def ntake = vat_ len index
  def ndrop = len - ntake
  def bind take drop =
    def vset o i v = prim "vset"
    def exec i =
      def t = vat_ i select
      def o = vat_ i index
      def x = vat_ i v
      if t then vset take o x else vset drop (i-o) x
    def _ = vappi exec len
    Pair (Vector take 0 ntake) (Vector drop 0 ndrop)
  bind (vnew ntake) (vnew ndrop)

global def vfilter f v = (vsplitBy f v).first

global def vunfoldl f a n =
  def vnew n = prim "vnew"
  def bind out =
    def vset o i v = prim "vset"
    def helper a i =
      if i == n then Unit else match (f a)
        Pair a x =
          def _ = vset out i x
          helper a (i+1)
    def _ = helper a 0
    Vector out 0 n
  bind (vnew n)

global def vscanl f a v =
  def len = vlen v
  def vnew n = prim "vnew"
  def bind out =
    def vset o i v = prim "vset"
    def helper a i =
      def _ = vset out i a
      if i == len
      then Unit
      else helper (f a (vat_ i v)) (i+1)
    def _ = helper a 0
    Vector out 0 (len+1)
  bind (vnew (len+1))

global def vscanr f a v =
  def len = vlen v
  def vnew n = prim "vnew"
  def bind out =
    def vset o i v = prim "vset"
    def helper a i =
      def _ = vset out i a
      def i1 = i - 1
      if i == 0
      then Unit
      else helper (f (vat_ i1 v) a) i1
    def _ = helper a len
    Vector out 0 (len+1)
  bind (vnew (len+1))

# vscan = O(n), log n deep prefix-sum
# f called exactly once per input
global def vscanmap f a g v =
  def len = vlen v + 1
  def vnew n = prim "vnew"
  def vset o i v = prim "vset"
  def gather out =
    def helper s e =
      if e - s == 1
      then if s == -1 then a else g (vat_ s v)
      else
        def mid = (e+s) >> 1
        def lo = helper s mid
        def hi = helper mid e
        def _ = vset out mid lo
        f lo hi
    def bitrev x =
      if x == 0 then Unit else
        def lowbit = and x (-x)
        def bottom = xor x lowbit
        def _ = vset out (x-1) (helper (bottom-1) (x-1))
        bitrev bottom
    def _ = bitrev len
    Vector out 0 len
  def temp = gather (vnew len)
  def scatter out =
    def helper a s e =
      def _ = vset out s a
      if e - s == 1 then Unit else
        def mid = (e+s) >> 1
        def _ = helper a s mid
        if mid >= len then Unit else
          def v = vat_ mid temp
          helper (f a v) mid e
    def double x =
      if x >= len then Unit else
        def e = (x<<1) + 1
        def _ = helper (vat_ x temp) x e
        double e
    def _ = double 0
    Vector out 0 len
  scatter (vnew len)
global def vscan f a v = vscanmap f a (_) v

# Merge-sort, if sorted then O(n) else O(nlogn)
global def vsortBy lt v =
  def nondesc i = # 1 if v(i) > v(i+1)
    def vi = vat_ i v
    def vi1 = vat_ (i+1) v
    if lt vi1 vi then 1 else 0
  def runs = vscan (_+_) 0 (vtab nondesc (vlen v - 1))
  # 0000111112345
  #         ^^^^^ strictly descending run
  #     ^^^^^ non-descending runs
  def merge a b =
    def helper (Pair ai bi) =
      def doit x a b = Pair (Pair (ai+a) (bi+b)) x
      match (vatOpt ai a) (vatOpt bi b)
        None     None     = raise "impossible"
        (Some x) None     = doit x 1 0
        None     (Some y) = doit y 0 1
        (Some x) (Some y) = match (lt y x)
          True  = doit y 0 1
          False = doit x 1 0 # x <= y prefers x for stable sort
    vunfoldl helper (Pair 0 0) (vlen a + vlen b)
  def helper v r =
    def len = vlen v
    def mid = len >> 1
    if mid == 0 then v else
      def len1 = len-1
      def lo = vat_ 0 r
      def hi = vat_ len1 r
      if lo == hi then v
      else if lo + len1 == hi then vreverse v
      else match (vsplitAt mid v) (vsplitAt mid r)
        (Pair l r) (Pair rl rr) = merge (helper l rl) (helper r rr)
  helper v runs

global def vdistinctBy eq v =
  def keep i =
    def vi = vat_ i v
    if i == 0 then Some vi else
      def vi1 = vat_ (i-1) v
      if eq vi1 vi then None else Some vi
  vmapPartial (_) (vtab keep (vlen v))

global def vcmp f l r =
  def len = min (vlen l) (vlen r)
  def helper i =
    if i == len then
      icmp (vlen l) (vlen r)
    else match (f (vat_ i l) (vat_ i r))
      EQ = helper (i+1)
      x  = x
  helper 0

global def vtranspose v =
  def outer i = vmapPartial (vatOpt i _) v
  vtab outer (vfoldmap max 0 vlen v)

global def vflatten vo =
  def leno = vlen vo
  def offset = vscanmap (_+_) 0 vlen vo
  def flat = vat_ leno offset
  def vnew n = prim "vnew"
  def bind out =
    def vset o i v = prim "vset"
    def outer o =
      def vi   = vat_ o vo
      def base = vat_ o offset
      def leni = vlen vi
      def inner i = vset out (base+i) (vat_ i vi)
      vappi inner leni
    def _ = vappi outer leno
    Vector out 0 flat
  bind (vnew flat)

# Simple parallel construction
global def vtab f n =
  def vnew n = prim "vnew"
  def bind out =
    def vset o i v = prim "vset"
    def _ = vappi (\i vset out i (f i)) n
    Vector out 0 n
  bind (vnew n)

# f will be called more than once per element
def vmapPartial f v =
  def intSome x = match (f x)
    Some _ = 1
    None   = 0
  def dest = vscanmap (_+_) 0 intSome v
  def leni = vlen v
  def leno = vat_ leni dest
  def vnew n = prim "vnew"
  def bind out =
    def vset o i v = prim "vset"
    def exec i = match (f (vat_ i v))
      Some x = vset out (vat_ i dest) x
      None   = True
    def _ = vappi exec leni
    Vector out 0 leno
  bind (vnew leno)

def vappi f n =
  def helper s e =
    def mid = (s + e) >> 1
    def mid1 = mid + 1
    def _ = f mid
    def _ = if mid  == s then Unit else helper s mid
    def _ = if mid1 == e then Unit else helper mid1 e
    Unit
  if n == 0 then Unit else helper 0 n
