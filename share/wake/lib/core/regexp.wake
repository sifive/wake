# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# Regular expressions

# Create RegExp that only matches str, by escaping special characters.
# quote "a.b" = `a\.b`
# quote "hello[world]" = `hello\[world\]`
export def quote (str: String): RegExp =
    def res str = prim "quote"
    match (res str).stringToRegExp
        Pass x = x
        Fail error = unreachable "quote primitive bug: {error.getErrorCause}"

# Concatenate a list of regular expressions.
# The resulting regular expression must match the elements sequentially.
# For simple expressions, use built-in RegExp interpolation `${x}${y}${z}`.
# regExpCast (`abc`, `def`, Nil) = `abcdef`
export def regExpCat (l: List RegExp): RegExp =
    def res = l | map regExpToString | cat | stringToRegExp
    match res
        Pass regex  = regex
        Fail error = unreachable "regexp parser bug post concatenation: {error.getErrorCause}"

# Convert a String into a Regular expression.
# If the string is an illegal RegExp, returns Fail.
# stringToRegExp "abc" = Pass `abc`
# stringToRegExp "a("  = Fail (Error "missing ): a(" _)
export def stringToRegExp (str: String): Result RegExp Error =
    def p s = prim "re2"
    match (p str)
        Pass r = Pass r
        Fail e = failWithError e

# Convert a String glob-style expression into a RegExp.
# A glob expression has:
#   ?    matches any single non-/ character
#   *    matches 0 or more non-/ characters
#   /**  matches any path after the /
#   **/  matches any path leading up to the /
#   [ab] matches either a or b
#   \*   matches a *
export def globToRegExp (glob: String): RegExp =
    def glob2regexp glob = prim "glob2regexp"
    match (glob2regexp glob).stringToRegExp
        Pass x = x
        Fail error = unreachable "glob primitive bug: {error.getErrorCause}"

# Convert a regular expression into a String.
# stringToRegExp (regExpToString x) = Pass x
# regExpToString `abc` = "abc"
# regExpToString `.*`  = ".*"
export def regExpToString (regExp: RegExp): String =
    (\_ prim "re2str") regExp

# Test if a regular expression matches an entire String.
# matches `a*` "ba" = False
# matches `a*` "aa" = True
export def matches (testRegExp: RegExp) (str: String): Boolean =
    (\_\_ prim "match") testRegExp str

# Extract fields out of a String using a parenthetical regular expression.
# extract `(.*)-(.*)` "hello-world-hello" = ("hello", "world-hello", Nil)
# extract `(.*)-(.*)` "helloworldhello" = Nil
export def extract (parensRegexp: RegExp) (str: String): List String =
    (\_\_ prim "extract") parensRegexp str

# Replace all occurances of locatorRegExp in str with replacement.
# replace `:` " " "a:b:c" = "a b c"
export def replace (locatorRegExp: RegExp) (replacement: String) (str: String): String =
    (\_\_\_ prim "replace") locatorRegExp replacement str

# Remove all occurances of seperatorRegExp from str, creating a List of String fragments.
# tokenize `:` "hello:there:friend" = ("hello", "there", "friend", Nil)
export def tokenize (seperatorRegExp: RegExp) (str: String): List String =
    (\_\_ prim "tokenize") seperatorRegExp str
