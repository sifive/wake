# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Regular expressions

# Turns a String into a properly quoted Regular Expression
# quote: (str: String) => RegExp
global def quote str =
  def res str = prim "quote"
  match (res str).stringToRegExp
    Pass x = x
    Fail _ = panic "Quoted String is invalid Regular Expression"

# (str: String) => RegExp
global def stringToRegExp str = prim "re2"

global def regExpToString regexp = prim "re2str"

# matches: (testRegexp: String) => (str: String) => Boolean
global def matches testRegexp str = prim "match"

# extract: (parensRegexp: String) => (str: String) => List String
# returns Nil on no match
global def extract parensRegexp str = prim "extract"

# replace: (locatorRegexp: String) => (replacement: String) => (str: String) => String
global def replace locatorRegexp replacement str = prim "replace"

# tokenize: (seperatorRegexp: String) => (str: String) => List String
global def tokenize seperatorRegexp str = prim "tokenize"
