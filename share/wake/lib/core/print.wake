# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# format: render any type into a printable String
#
#   format 44        = "44"
#   format "Hello"   = "\"Hello\""
#   format "\n"      = "\"\\n\""
#   format (seq 4)'  = "0, 1, 2, 3, Nil"
#   format pi        = "3.1415926535897931"
#   format (Pass 33) = "Pass 33"
#   format True      = "True"
#   format (_)       = "<source-file.wake:line:column>"
export def format (anyType: a): String =
    def p x = prim "format"

    p anyType

# To construct a LogLevel
export data LogLevel =
    LogLevel (name: String)

# getLogLevelName: return the name of the LogLevel
export def getLogLevelName (LogLevel name): String =
    name

# The standard logging levels used in wake

# logError: logged to stdout and stderr by default (Red)
export def logError: LogLevel =
    LogLevel "error" # (Some Red)

# logWarning: logged to stdout unless run with -q (Yellow)
export def logWarning: LogLevel =
    LogLevel "warning" # (Some Yellow)

# logInteractive: logged to stdout when wake invoked with a tty (Color)
export def logInteractive: LogLevel =
    LogLevel "interactive" # (Some Cyan)

# logReport: logged to stdout unless run with -q (Magenta)
export def logReport: LogLevel =
    LogLevel "report" # (Some Magenta)

# logEcho: logged to stdout when run with -v (default console color)
export def logEcho: LogLevel =
    LogLevel "echo" # None

# logInfo: logged to stdout when run with -v (Dim version of default console color)
export def logInfo: LogLevel =
    LogLevel "info" # None (Some Dim)

# logDebug: logged to stdout when run with -d (Blue)
export def logDebug: LogLevel =
    LogLevel "debug" # (Some Blue)

# logBSP: by default not logged. Used for implementing a bsp in wake.
export def logBSP: LogLevel =
    LogLevel "bsp" # (Some Green)

# logNever: not logged to any stream
export def logNever: LogLevel =
    LogLevel "null" # None

# logRunnerOutput: logged to stdout when run with -d
export def logRunnerOutput: LogLevel =
    LogLevel "runner_out"

# logRunnerError: logged to stderr by default
export def logRunnerError: LogLevel =
    LogLevel "runner_error"

# tap: inject a diagnostic into a pipeline
# Oftern used in conjunction with println and/or format.
#
#   def foo =
#     "123123"
#     | tap (println "DEBUG; I SAW: {format _}")
#     | int
#     | getOrElse 0
export def tap (consumerFn: a => b) (value: a): a =
    def _ = consumerFn value

    value

# printlnLevel: print a String with a newline on the given LogLevel.
#
#   # Produce a yellow hello on stdout unless run with -q
#   def Unit = printlnLevel logWarning "hello"
export def printlnLevel (LogLevel name) (message: String): Unit =
    def p stream outputStr = prim "print"

    p name "{message}\n"

# println: print a colourless String with a newline, visible when run with -v.
#
#   # Print a happy face visible when run with -v
#   def Unit = println "{integerToUnicode 0x1f600}"
export def println: String => Unit =
    printlnLevel logReport

# breadcrumb: Leaves an out of band message in the wake internal log
#
# This should primarily be used by core/standard libraries over normal user code.
# However it can be useful for tracing or debugging wake code out of band. The contents
# of the log may only be inspected outside of wake and thus any breakcrumbs are
# "blackholed" from the perspective of wakelang.
#
#   # Emit a structured message to 'wake.log'
#   def _ = breadcrumb "encountered failing event"
export def breadcrumb (x: String): Unit =
    def p s = prim "breadcrumb"

    p x

