# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

from prim_wake import _

# The Integer type has unbounded precision (aka a "big" integer).
# Any wake literal like 12331_1232 or 0x3123 is an Integer.

# Unary positive sign operator for Integer values.
# (+5) = 5
export def +(x: Integer): Integer =
    x

# Unary negative sign operator for Integer values.
# (-5) = 0-5
export def -(x: Integer): Integer =
    prim_neg x

# Unary two's complement operator for Integer values.
# ~0 = -1
# ~4 = -5
export def ~(x: Integer): Integer =
    prim_com x

# Binary addition operator for Integer values.
# 1 + 2 = 3
# 1 + 5 = 6
export def (x: Integer) + (y: Integer): Integer =
    prim_add x y

# Binary subtraction operator for Integer values.
# 2 - 1 =  1
# 3 - 4 = -1
export def (x: Integer) - (y: Integer): Integer =
    prim_sub x y

# Binary multiplication operator for Integer values.
#  3 *   4  = 12
# -3 * (-4) = 12
export def (x: Integer) * (y: Integer): Integer =
    prim_mul x y

# Binary division operator for Integer values.
# 12 / 3 =  4
# 13 / 3 =  4
# -8 / 4 = -2
export def (x: Integer) / (y: Integer): Integer =
    prim_div x y

# Binary remainder operator for Integer values.
# 11 % 5 = 1
#  4 % 5 = 5
#  7 % 5 = 2
export def (x: Integer) % (y: Integer): Integer =
    prim_mod x y

# Binary left shift operator for Integer values.
# 1 << 10 = 1024
# 3 <<  8 =  768
export def (x: Integer) << (y: Integer): Integer =
    prim_shl x y

# Binary right shift operator for Integer values.
# 1024 >> 11 = 0
# 1024 >>  9 = 2
#  768 >>  8 = 3
export def (x: Integer) >> (y: Integer): Integer =
    prim_shr x y

# Binary exponentiation operator for Integer values.
# 2^8 = 256
# 3^2 = 9
# 5^3 = 125
export def (x: Integer) ^ (y: Integer): Integer =
    prim_exp x y

# Returns the n-th root of x.
# root 2  9    = Some 3
# root 3 27    = Some 3
# root 3 28    = Some 3
# root 3 (-27) = Some -3
# root 2 (-9)  = None
export def root (n: Integer) (x: Integer): Option Integer =
    if and n 1 == 0 && x < 0 then
        None
    else
        Some (prim_root x n)

# Unary square root operator.
# sqrt 9    = Some 3
# sqrt (-9) = None
export def sqrt (x: Integer): Option Integer =
    root 2 x

# Unary absolute-value operator.
export def abs (x: Integer): Integer =
    prim_abs x

# Binary bitwise XOR operator.
# xor 4 4 = 0
# xor 4 3 = 7
# xor (-4) (-3) = 1
export def xor (x: Integer) (y: Integer): Integer =
    prim_xor x y

# Binary bitwise AND operator.
# and 4 4 = 4
# and 4 3 = 0
# and (-4) (-3) = -4
export def and (x: Integer) (y: Integer): Integer =
    prim_and x y

# Binary bitwise OR operator.
# or 4 4 = 4
# or 4 3 = 7
# or (-4) (-3) = -3
export def or (x: Integer) (y: Integer): Integer =
    prim_or x y

# Greatest Common Divisor.
# gcd 4 4 = 4
# gcd 4 3 = 1
# gcd (-4) (-3) = 1
export def gcd (x: Integer) (y: Integer): Integer =
    prim_gcd x y

# Least Common Multiple.
# lcm 4 4 = 4
# lcm 4 3 = 12
# lcm (-4) (-3) = 12
export def lcm (x: Integer) (y: Integer): Integer =
    prim_lcm x y

# Computes (x^y) % m.
# powm 2 7 5 = 4
# powm 3 2 2 = 1
export def powm (x: Integer) (y: Integer) (m: Integer): Integer =
    prim_powm x y m

# Compare two Integers for Order
# icmp 4 5 = LT
# icmp 5 5 = EQ
# icmp 5 4 = GT
export def icmp (x: Integer) (y: Integer): Order =
    prim_icmp x y

# Compare two Integers for Order
# 4 <=> 5 = LT
# 5 <=> 5 = EQ
# 5 <=> 4 = GT
export def (x: Integer) <=> (y: Integer): Order =
    prim_icmp x y

# Binary Less-Than operator for Integers.
# 4 < 5 = True
# 4 < 4 = False
# 5 < 4 = False
export def (x: Integer) < (y: Integer): Boolean =
    isLT (x <=> y)

# Binary Greater-Than operator for Integers.
# 4 > 5 = False
# 4 > 4 = False
# 5 > 4 = True
export def (x: Integer) > (y: Integer): Boolean =
    isGT (x <=> y)

# Binary Greater-Or-Equal operator for Integers.
# 4 >= 5 = False
# 4 >= 4 = True
# 5 >= 4 = True
export def (x: Integer) >= (y: Integer): Boolean =
    isGE (x <=> y)

# Binary Less-Or-Equal operator for Integers.
# 4 <= 5 = True
# 4 <= 4 = True
# 5 <= 4 = False
export def (x: Integer) <= (y: Integer): Boolean =
    isLE (x <=> y)

# Binary Is-Equal operator for Integers.
# 4 == 5 = False
# 4 == 4 = True
# 5 == 4 = False
export def (x: Integer) == (y: Integer): Boolean =
    isEQ (x <=> y)

# Binary Not-Equal operator for Integers.
# 4 == 5 = True
# 4 == 4 = False
# 5 == 4 = True
export def (x: Integer) != (y: Integer): Boolean =
    isNE (x <=> y)

# Calculates the minimum of two Integers.
# min 4 5 = 4
export def min (x: Integer) (y: Integer): Integer =
    if x < y then x else y

# Calculates the maximum of two Integers.
# max 4 5 = 5
export def max (x: Integer) (y: Integer): Integer =
    if x < y then y else x

# Calculates the product of a list of integers.
# prod (1, 2, 3, 4, Nil) = 24
# prod Nil = 1
export def prod: List Integer => Integer =
    foldl (_ * _) 1

export def ∏(l: List Integer): Integer =
    prod l

# Calculates the sum of a list of integers.
# sum (1, 2, 3, 4, Nil = 10
# sum Nil = 0
export def sum: List Integer => Integer =
    foldl (_ + _) 0

export def ∑(l: List Integer): Integer =
    sum l
