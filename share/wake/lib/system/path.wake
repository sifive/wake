# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# Simplify away the ..s and .s in a String
export def simplify (path: String): String =
    def p s = prim "simplify"

    p path

export def sortPaths (paths: List Path): List Path =
    def fn a b = a.getPathName <=>~ b.getPathName

    sortBy fn paths

# Concatenate two paths
#  join "foo"  "bar"    => "foo/bar"
#  join "foo"  "/bar "  => "/bar"
#  join "/foo" "bar"    => "/foo/bar"
#  join "foo"  "../bar" => "bar"
export def in (dir: String) (path: String): String =
    if matches `/.*` path then
        path
    else
        simplify "{dir}/{path}"

# Reframe path into a form accesible relative to dir
# For example:
#  relative "bin" "bin/usr" => "usr"
#  relative "bin" "bin"     => "."
#  relative "bin" "hax"     => "../hax"
export def relative (dir: String) (path: String): String =
    def p d p = prim "relative"

    p dir path

# Locate an executable in the search path
export target whichIn (path: String) (exec: String): String =
    def imp path exec = prim "search_path"

    imp path exec

export def which (exec: String): String =
    whichIn path exec

# Locate an executable in the users env PATH
export target whichInEnvPath (exec: String): Option String =
    require Some path = getenv "PATH"

    def cmd = whichIn path exec

    if cmd ==~ exec then None else Some cmd

# Absolute path to the workspace root.
# All paths in wake are relative to the workspace root; you probably just want "."
# The absolute path should rarely be used because it breaks build relocatability
export def workspace: String =
    prim "workspace"

# The directory within which wake was invoked (relative to the workspace root)
export def cwd: String =
    prim "cwd"

# Remove any leading directories from `file`.
#
# Parameters:
#  - `file`: The filename to simplify
#
# Guarantees:
#  - The resulting String contains no '/'s
#
# ```
# basename "abc/def"  = "def"
# basename "abc/def/" = "def"
# basename "/foo/bar" = "bar"
# basename "/foo"     = "foo"
# basename "foo-bar"  = "foo-bar"
# ```
export def basename (file: String): String =
    replace `/*$` '' file
    | replace `^.*/` ''

# Extract the directory name from `file`.
#
# Parameters:
#  - `file`: The filename to simplify
#
# Guarantees:
#  - The resulting String is non-empty
#
# ```
# dirname "foo/bar"  = "foo"
# dirname "bar"      = "."
# dirname "/bar"     = "/"
# dirname "/foo/bar" = /foo"
# ```
export def dirname (file: String): String =
    simplify "{file}/.."

export def isPathDir (path: Path): Boolean =
    getPathHash path
    | matches `0+`

# Paths differ from Strings in that they have been hashed; their content is frozen
tuple Path =
    Name: String
    Hash: String

from wake export type Path
from wake export def getPathName getPathHash

# We still use Path for directories even though hashing doesn't make a lot of sense.
# The previous definition of `getPathHash` would return all zeros so we mimic that.
def dirHash =
    "0000000000000000000000000000000000000000000000000000000000000000"

export def getPathParent (path: Path): Path =
    Path (simplify "{getPathName path}/..") dirHash

# Previously we were using ++ to concat the hashed and non-hashed files
# but this would cause non-deterministic behavior with the hash order being
# different on different runs depending on which files were touched. By
# merging them this way we can maintain the existing order.
def mergeSelect (existing_hashes: List Boolean) (hashed: List String) (not_to_hash: List String): List String =
    match existing_hashes hashed not_to_hash
        Nil Nil Nil -> Nil
        (False, es) _ (path, ns) -> path, mergeSelect es hashed ns
        (True, es) (path, hs) _ -> path, mergeSelect es hs not_to_hash
        _ _ _ ->
            unreachable "impossible hash merge occured ({format existing_hashes}), ({format hashed}), ({format not_to_hash})"

def computeHashes (prefix: String) (files: List String): List String =
    def simple_files = map simplify files

    # Many files will not even need to be rehashed because of their modtime
    def needsHashing (file: String) =
        def get f = prim "get_hash"
        def hash = get file

        if hash ==* "" then True else False

    # Get just the files that we need to hash
    def which_files_to_hash = map needsHashing simple_files

    def (Pair hs ns) =
        zip simple_files which_files_to_hash
        | splitBy (_.getPairSecond)

    def to_hash = map getPairFirst hs
    def not_to_hash = map getPairFirst ns

    # Lots of jobs have no outputs at all, and some do not need to be rehashed
    require False = empty to_hash
    else not_to_hash

    # if the number of files to hash is too long then execve will
    # error out.
    def to_hash_len = len to_hash
    def to_hash_file_bytes = sum (map strlen to_hash)

    # These numbers don't appear to be well documented in any easily computeable fashion for Linux.
    # The problem is that the same error is returned for multiple cases, and many hard to compute
    # things cause us to go over. These numbers appear to be safe in practice (found exact via binary search).
    # To account for any other variance I backed off these numbers quite a bit.
    def use_file = to_hash_file_bytes >= 1900000 || to_hash_len >= 12000
    def add f h = prim "add_hash"

    def hashPlan cmd vis =
        Plan "<hash>" cmd vis Nil "." "" logNever logError logDebug ReRun Nil hashUsage id id False

    def stdin_file_path = "to_hash.{prefix}.stdin"

    # We construct a different plan depending on if we could use command line arguments or not
    require Pass plan = match use_file
        True ->
            require Pass stdin_file = write stdin_file_path (catWith "\n" to_hash)

            hashPlan ("{wakePath}/../lib/wake/wake-hash", "@",) (stdin_file,)
            | setPlanStdin stdin_file.getPathName
            | Pass
        False ->
            hashPlan ("{wakePath}/../lib/wake/wake-hash", to_hash) Nil
            | Pass
    else mergeSelect which_files_to_hash (map (add _ "BadHash") to_hash) not_to_hash

    require Pass stdout =
        plan
        | runJobWith localRunner
        | getJobStdout
    else mergeSelect which_files_to_hash (map (add _ "BadHash") to_hash) not_to_hash

    # We want a better error message if the number of lines do not match
    # that are returned
    def hash_lines =
        stdout
        | tokenize `\n`
        | filter (_ !=* "")

    require True = len hash_lines == to_hash_len
    else unreachable "wake-hash returned {format hash_lines} lines but we expected {str to_hash_len} lines"

    # Finally actually add all the hashes
    def hashed =
        hash_lines
        | zip to_hash
        | map (\(Pair file hash) add file hash)

    # Make sure to unlink the file if we created it
    def unlink _ = prim "unlink"
    def _ = if use_file then unlink stdin_file_path else Unit

    # Finally we merge them back in the order we got them so that we don't
    # get non-determinism in the hash order.
    mergeSelect which_files_to_hash hashed not_to_hash

def hashUsage =
    defaultUsage
    | setUsageCPUtime 0.1

target hashcode (f: String): String =
    def get f = prim "get_hash"
    def reuse = get f

    if reuse !=* "" then
        reuse
    else
        def hashPlan cmd =
            Plan "" cmd Nil Nil "." "" logNever logError logDebug ReRun Nil hashUsage id id False

        def job =
            hashPlan ("<hash>", f, Nil)
            | setPlanLabel "hash: {f}"
            | runJobWith localRunner

        def hash =
            job.getJobStdout
            | getWhenFail ""
            | extract `(.{64}).*`

        match job.isJobOk hash
            True (x, Nil) = x
            _ _ = "BadHash"
