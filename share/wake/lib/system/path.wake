# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Read the file contents of a Path
global def read path =
  def imp p = prim "read"
  match (getPathResult path)
    Pass f = match (imp f.getPathName)
      Pass body = Pass body
      Fail f = Fail (makeError f)
    Fail e = Fail e

# Simplify away the ..s and .s in a String
global def simplify path = prim "simplify"

# Reframe path into a form accesible relative to dir
global def relative dir path = prim "relative"

# Locate an executable in the search path
global target whichIn path exec =
  def imp path exec = prim "search_path"
  imp path exec

global def which exec = whichIn path exec
global def workspace = prim "workspace"

def mkdirRunner =
  def imp m p = prim "mkdir"
  def pre = match _
    Fail f = Pair (Fail f) (Pair "" "")
    Pass input = match input.getRunnerInputCommand
      _, _, mode, dir, Nil = Pair (Pass input) (Pair mode dir)
      _ = panic "mkdirRunner: invalid command-line"
  def post = match _
    Pair (Fail f) _ = Fail f
    Pair (Pass output) (Pair smode dir) =
      def mode = int smode | getOrElse 0x200
      if mode < 0 || mode > 0x1ff
      then Fail (makeError "mkdir {dir}: Invalid mode ({smode})")
      else match (imp mode dir)
        Fail f = Fail (makeError f)
        Pass path = Pass (editRunnerOutputOutputs (path, _) output)
  makeRunner "mkdir" (\_ Pass 0.0) pre post virtualRunner

def mkdirImp inputs mode path =
  makePlan ("<mkdir>", "-m", "0{strbase 8 mode}", path, Nil) inputs
  | setPlanKeep        False
  | setPlanEcho        Verbose
  | setPlanEnvironment Nil
  | runJobWith mkdirRunner
  | getJobOutput

# Create a directory in the parent
global def mkdirIn parent mode name =
  mkdirImp (parent, Nil) mode "{parent.getPathName}/{name}".simplify

# Make all every element in the directory path with mode 0775
global def mkdir path =
  def root = match _
    "", x, t = foldl (mkdirIn _ 0775 _) (mkdirImp Nil 0775 "/{x}") t
    x, t     = foldl (mkdirIn _ 0775 _) (mkdirImp Nil 0775 x) t
    Nil      = panic "impossible"
  path | simplify | tokenize `/` | root

def writeImp inputs mode path content =
  def writeRunner =
    def imp m p c = prim "write"
    def pre input = Pair input Unit
    def post = match _
      Pair (Fail f) _ = Fail f
      Pair (Pass output) Unit =
        if mode < 0 || mode > 0x1ff
        then Fail (makeError "write {path}: Invalid mode ({strbase 8 mode})")
        else match (imp mode path content)
          Fail f = Fail (makeError f)
          Pass path = Pass (editRunnerOutputOutputs (path, _) output)
    makeRunner "write" (\_ Pass 0.0) pre post virtualRunner
  makePlan ("<write>", str mode, path, Nil) inputs
  | setPlanOnce        False
  | setPlanEcho        Verbose
  | setPlanEnvironment Nil
  | runJobWith writeRunner
  | getJobOutput

# Create a file with the given mode in the specified directory
global def writeIn parent mode name content =
  writeImp (parent, Nil) mode "{parent.getPathName}/{name}".simplify content

# Create all directories and the named file
global def write path content =
  def spath = simplify path
  def parent = simplify "{spath}/.."
  writeImp (mkdir parent, Nil) 0664 spath content
