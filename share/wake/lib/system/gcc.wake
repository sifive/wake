# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

def c11Flags      = ("-std=c++11", Nil)
def c99Flags      = ("-std=c99", Nil)
def debugCFlags   = ("-Wall", "-Wextra", "-O0", "-g", "-pg", Nil)
def debugLFlags   = ("-g", "-pg", Nil)
def releaseCFlags = ("-Wall", "-O2", "-flto", Nil)
def releaseLFlags = ("-flto", Nil)

def doCompileC variant gcc flags headers cfile =
  def obj = replace `\.c(pp|\+\+)?$` ".{variant}.o" cfile.getPathName
  def cmdline = gcc, distinctBy scmp flags ++ ("-c", cfile.getPathName, "-frandom-seed={obj}", "-o", obj, Nil)
  def result = job cmdline (cfile, headers)
  result.getJobOutput

def doLinkO variant linker flags objects targ =
  def cmdline = (linker, "-o", "{targ}.{variant}", map getPathName objects) ++ distinctBy scmp flags
  def result = job cmdline (mkdir "{targ}/..", objects)
  result.getJobOutput

def makeCompileC variant gcc flags =
  Pair variant (\extraFlags doCompileC variant gcc (flags ++ extraFlags)), Nil

def makeLinkO variant linker flags =
  Pair variant (\extraFlags doLinkO variant linker (flags ++ extraFlags)), Nil

publish compileC = makeCompileC "native-c99-debug"     (which "gcc") (c99Flags ++ debugCFlags)
publish compileC = makeCompileC "native-c99-release"   (which "gcc") (c99Flags ++ releaseCFlags)
publish compileC = makeCompileC "native-cpp11-debug"   (which "g++") (c11Flags ++ debugCFlags)
publish compileC = makeCompileC "native-cpp11-release" (which "g++") (c11Flags ++ releaseCFlags)

publish linkO = makeLinkO "native-c99-debug"     (which "gcc") (debugLFlags)
publish linkO = makeLinkO "native-c99-release"   (which "gcc") (releaseLFlags)
publish linkO = makeLinkO "native-cpp11-debug"   (which "g++") (debugLFlags)
publish linkO = makeLinkO "native-cpp11-release" (which "g++") (releaseLFlags)

def pickVariant variant variants =
  match (find (variant ==* _.getPairFirst) variants)
    Some (Pair x _) = x.getPairSecond
    None =
      def ok = catWith " " (map getPairFirst variants)
      \_\_\_ makeBadPath (makeError "No variant matches {variant}; options: {ok}")

global def compileC variant = pickVariant variant (subscribe compileC)
global def linkO    variant = pickVariant variant (subscribe linkO)
