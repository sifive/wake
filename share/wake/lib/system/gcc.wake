def c11Flags      = ("-std=c++11", Nil)
def debugCFlags   = ("-Wall", "-Wextra", "-O0", "-g", "-pg", Nil)
def debugLFlags   = ("-g", "-pg", Nil)
def releaseCFlags = ("-Wall", "-O2", "-flto", Nil)
def releaseLFlags = ("-flto", Nil)

def doCompileC variant gcc flags headers file =
  def obj = replace '\.c(pp)?$' ".{variant}.o" file
  def cmdline = gcc, flags ++ ("-c", file, "-frandom-seed={obj}", "-o", obj, Nil)
  def result = job cmdline (file, headers)
  result.output

def doLinkO variant linker flags objs file =
  def cmdline = (linker, "-o", "{file}.{variant}", objs) ++ flags
  def outdir = simplify "{file}/.."
  def result = job cmdline (outdir, objs)
  result.output

def makeCompileC variant gcc flags =
  Pair variant (\extra doCompileC variant gcc (flags ++ extra))

def makeLinkO variant linker flags =
  Pair variant (\extra doLinkO variant linker (flags ++ extra))

publish compileC = makeCompileC "native-c99-debug"     (which "gcc") (debugCFlags)
publish compileC = makeCompileC "native-c99-release"   (which "gcc") (releaseCFlags)
publish compileC = makeCompileC "native-cpp11-debug"   (which "g++") (c11Flags ++ debugCFlags)
publish compileC = makeCompileC "native-cpp11-release" (which "g++") (c11Flags ++ releaseCFlags)

publish linkO = makeLinkO "native-c99-debug"     (which "gcc") (debugLFlags)
publish linkO = makeLinkO "native-c99-release"   (which "gcc") (releaseLFlags)
publish linkO = makeLinkO "native-cpp11-debug"   (which "g++") (debugLFlags)
publish linkO = makeLinkO "native-cpp11-release" (which "g++") (releaseLFlags)

def pickVariant variant variants =
  match (find (matches variant _.first) variants)
    Some (Pair x _) = x.second
    None =
      def ok = catWith " " (map first variants)
      raise "No variant matches {variant}; options: {ok}"

global def compileC variant = pickVariant variant (subscribe compileC)
global def linkO    variant = pickVariant variant (subscribe linkO)
