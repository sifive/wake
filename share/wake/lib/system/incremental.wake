# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

target tarExe Unit =
    def gnutar = which "gnutar"
    if gnutar ==* "gnutar" then which "tar" else gnutar

def targz output paths =
    require Pass fileList =
        def fileListPath =
            replace `\.tar\.gz` ".F" output
        map getPathName paths
        | sortBy scmp
        | catWith "\n"
        | write fileListPath
    def script =
        """
            # Intentionally record mtime in ns (posix) => needed for incremental builds
            %{tarExe Unit} --numeric-owner --owner=0 --group=0 --format=posix -czf %{output}.tmp -T %{fileList.getPathName} && \
            mv %{output}.tmp %{output}
        """
    require Pass tar =
        makePlan "incremental snapshot: {output}" paths script
        | setPlanLocalOnly True
        | setPlanFnOutputs (\_ output, Nil)
        | runJobWith       localRunner
        | getJobOutput
    Pass tar

# This API allows a Job to access those outputs from its last invocation
# which are accepted by reusedOutputFilterFn. To use this method, you must
# guarantee that all output contents will be the same whether or not the
# previous outputs were made available or not. Also, for incremental jobs,
# all visible files are considered as inputs, since the job might not read
# all inputs on each run, based on (for example) timestamps.
export def runIncrementalJob (stateFileLabel: String) (reusedOutputFilterFn: Path => Boolean) (plan: Plan): Job =
    def code = plan | getPlanHash | strHex
    def pre  = "{stateFileLabel}-pre-{code}.tar.gz"
    def post = "{stateFileLabel}-post-{code}.tar.gz"
    def escape s = prim "shell_str"
    def preTarResult =
        claimFileAsPath post pre
    def untar = "! test -f {escape pre} || tar -xzf {escape pre}\n"
    def stateFiles = match preTarResult
        Pass preTar = preTar, Nil
        Fail _      = Nil
    def cd =
        if plan.getPlanDirectory ==* "." then
            ""
        else
            "cd {plan.getPlanDirectory}\n"
    def orig = plan.getPlanCommand | map escape | catWith " "
    def script = "{untar}{cd}{orig}"
    def job =
        plan
        | setPlanDirectory "."
        | setPlanCommand   (which "dash", "-ec", script, Nil)
        | editPlanVisible  (stateFiles ++ _)
        | setPlanFnInputs  (\_ plan.getPlanVisible | map getPathName)
        | runJob
    def _postTar = # ignored, but executed
        require Pass outputs =
            job.getJobOutputs
        outputs
        | filter reusedOutputFilterFn
        | targz post
    job
