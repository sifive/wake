# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package plan_scorer

from wake import _

# Runners usable by plan scorer.
export topic runner: Runner

publish runner =
    defaultRunner, Nil

# Run a job, via a Runner chosen based on 'score' functions.
export def runJob (p: Plan): Job = match p
    Plan label cmd vis env dir stdin stdout stderr echo pers res usage finputs foutputs isatty =
        def implode l = cat (foldr (_, "\0", _) Nil l)
        def bToInt b = if b then 1 else 0

        # Transform the 'List Runner' into 'List RunnerOption'
        def qualify runner = match runner
            Runner name scorefn fn = match (scorefn p)
                Pass x if x <=. 0.0 = Reject "{name}: non-positive score"
                Pass x = Accept x fn
                Fail x = Reject "{name} {x}"

        def opts =
            subscribe runner
            | map qualify

        def best acc = match _ acc
            (Reject _) _ = acc
            (Accept score fn) (Pair bests _bestr) =
                if score >. bests then
                    Pair score (Some fn)
                else
                    acc

        match (opts | foldl best (Pair 0.0 None) | getPairSecond)
            Some r =
                runJobImp label cmd env dir stdin res usage finputs foutputs vis pers r echo stdout stderr isatty
            None =
                def create label dir stdin env cmd signature visible keep echo stdout stderr isatty =
                    prim "job_create"

                def badfinish job e = prim "job_fail_finish"
                def badlaunch job e = prim "job_fail_launch"

                def job =
                    create label dir stdin env.implode cmd.implode 0 "" 0 "echo" "info" "error" (bToInt isatty)

                def error =
                    def pretty = match _
                        Accept _ _ = ""
                        Reject why = why

                    makeError "No runner for '{job.getJobDescription}' available, because: {map pretty opts | catWith ", "}"

                # Make sure badlaunch completes before badfinish
                def _ = wait (\_ badfinish job error) (badlaunch job error)

                job

data RunnerOption =
    Accept (score: Double) (runnerFn: Job => Result RunnerInput Error => Result RunnerOutput Error)
    Reject (why: String)
