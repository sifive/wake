# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

def implodeNull = implode "\0"

def runAlways cmd env dir stdin res uusage finputs foutputs vis keep run echo stdout stderr label isatty: Job =
    def create label dir stdin env cmd signature visible keep echo stdout stderr isatty =
        prim "job_create"

    def finish job inputs outputs all_outputs status runtime cputime membytes ibytes obytes =
        prim "job_finish"

    def badfinish job error = prim "job_fail_finish"
    def cache dir stdin env cmd signature visible isatty = prim "job_cache"
    def signature cmd res fni fno keep = prim "hash"
    def hash = signature cmd res finputs foutputs keep

    def build Unit =
        def visStrings = map getPathName vis

        def job =
            create
            label
            dir
            stdin
            env.implodeNull
            cmd.implodeNull
            hash
            visStrings.implodeNull
            (booleanToInt keep)
            echo
            stdout
            stderr
            (booleanToInt isatty)

        def prefix = str (getJobId job)

        def usage =
            getJobRecord job
            | getOrElse uusage

        def output =
            run job (Pass (RunnerInput label cmd vis env dir stdin res prefix usage isatty))

        def final _ = match output
            Fail e -> badfinish job e
            Pass (RunnerOutput inputs outputs (Usage status runtime cputime mem in out)) ->
                def input =
                    finputs inputs
                    | map simplify
                    | implodeNull

                def output =
                    foutputs outputs
                    | computeHashes prefix
                    | implodeNull

                finish job input output (implodeNull outputs) status runtime cputime mem in out

        # Make sure we don't hash files before the job has stopped running
        def _ = waitJobMerged final job

        job

    def confirm abort last job =
        # notOk cannot be deadcode eliminated thanks to printlnLevel having effects
        def notOk (Pair name hash) =
            if hashcode name ==* hash then
                Unit
            # The panic will not be deadcode dropped, because it's an alternative return of the effect-ful notOk
            else if abort then
                panic "The hashcode of output file '{name}' has changed from {hash} (when wake last ran) to {hashcode name} (when inspected this time). Presumably it was hand edited. Please move this file out of the way. Aborting the build to prevent loss of your data."
            else
                printlnLevel
                logError
                "Wake was run with '-c' and the hashcode of output file '{name}' has changed, despite being produced from identical inputs. In the prior run, it was {hash} and now it is {hashcode name}. Hashes of dependent jobs using this file will not be checked."

        def _ = waitJobMerged (\_ map notOk last) job

        job

    match keep
        False -> build Unit
        True ->
            match (cache dir stdin env.implodeNull cmd.implodeNull hash (map getPathName vis).implodeNull (booleanToInt isatty))
                Pair (job, _) last -> confirm True last job
                Pair Nil last -> confirm False last (build Unit)

# Only run if the first four arguments differ
target runOnce cmd env dir stdin vis isatty run \ res usage finputs foutputs keep echo stdout stderr label =
    runAlways cmd env dir stdin res usage finputs foutputs vis keep run echo stdout stderr label isatty

export def runJobImp label cmd env dir stdin res usage finputs foutputs vis pers run (LogLevel echo) (LogLevel stdout) (LogLevel stderr) isatty =
    if isOnce pers then
        runOnce
        cmd
        env
        dir
        stdin
        vis
        isatty
        run
        res
        usage
        finputs
        foutputs
        (isKeep pers)
        echo
        stdout
        stderr
        label
    else
        runAlways
        cmd
        env
        dir
        stdin
        res
        usage
        finputs
        foutputs
        vis
        (isKeep pers)
        run
        echo
        stdout
        stderr
        label
        isatty

export def runJobWith (Runner _ _ run) (Plan label cmd vis env dir stdin stdout stderr echo pers res usage finputs foutputs isatty) =
    runJobImp label cmd env dir stdin res usage finputs foutputs vis pers run echo stdout stderr isatty

# Set the value of a tag on a Job
# This is useful for post-build reflection into the database
export def setJobTag (key: String) (value: String) (job: Job): Job =
    def p job key value = prim "job_tag"
    def _ = p job key value

    job

def toUsage (Pair (Pair status runtime) (Pair (Pair cputime membytes) (Pair ibytes obytes))) =
    Usage status runtime cputime membytes ibytes obytes

def getJobReality (job: Job): Result Usage Error =
    def raw job = prim "job_reality"

    raw job
    | rmap toUsage

def waitJobMerged (f: Unit => a) (job: Job): a =
    def raw job = prim "job_reality"

    wait (\_ f Unit) (raw job)

# Actual usage of a finished job
export def getJobReport (job: Job): Result Usage Error =
    def raw job = prim "job_report"

    raw job
    | rmap toUsage

# From database, available the moment a Job exists
export def getJobRecord (job: Job): Option Usage =
    def raw job = prim "job_record"

    raw job
    | at 0
    | omap toUsage

# Control a running/finished Job
def stdio job fd =
    prim "job_output" # 1=stdout, 2=stderr; blocks till closed

def tree job typ =
    prim "job_tree" # 0=visible, 1=input, 2=output; blocks till finished

def treeOk file =
    def Pair f h = file

    match h
        "BadHash" -> failWithError "Could not hash {f}"
        _ -> Pass (Path f h)

def guardPath job = match _
    Fail e -> Fail e
    Pass l if job.isJobOk -> findFailFn treeOk l
    _ ->
        failWithError
        "Non-zero exit status ({format job.getJobStatus}) for job {str job.getJobId}: '{job.getJobDescription}'"

def mapPath = match _
    Fail e -> Fail e
    Pass l -> findFailFn treeOk l

export def getJobStdoutRaw (job: Job): Result String Error =
    require Exited 0 = getJobStatus job
    else failWithError "job terminated with non-zero exit code"

    stdio job 1

export def getJobStderrRaw (job: Job): Result String Error =
    require Exited 0 = getJobStatus job
    else failWithError "job terminated with non-zero exit code"

    stdio job 2

# Gives the full stdout of a job as a string, without any manipulation.
# Returns the result successfully as long as the job was successfully launched
# and closed its stdout handle at some point during its execution. This
# generally occurs by the process simply terminating. The only case where
# this would return a failure is if the job did not successfully launch.
export def getJobFailedStdoutRaw (job: Job): Result String Error =
    stdio job 1

# Gives the full stderr of a job as a string, without any manipulation.
# Returns the result successfully as long as the job was successfully launched
# and closed its stderr handle at some point during its execution. This
# generally occurs by the process simply terminating. The only case
# in which this would return a failure is if the job did not successfully
# launch.
export def getJobFailedStderrRaw (job: Job): Result String Error =
    stdio job 2

# Gives the job's stdout if the job exited with an exit
# code of zero. The output will be manipulated to not contain
# ANSI escape codes.
export def getJobStdout (job: Job): Result String Error =
    require Pass stdout = getJobStdoutRaw job

    Pass (stdout | filterTerminalCodes)

# Gives the job's stderr if the job exited with an exit
# code of zero. The output will be manipulated to not contain
# ANSI escape codes.
export def getJobStderr (job: Job): Result String Error =
    require Pass stderr = getJobStderrRaw job

    Pass (stderr | filterTerminalCodes)

# Gives the job's stdout if the job was launched successfully
# and closed its stdout at some point. The output will be
# manipulated to not contain ANSI escape codes.
export def getJobFailedStdout (job: Job): Result String Error =
    require Pass stdout = getJobFailedStdoutRaw job

    Pass (stdout | filterTerminalCodes)

# Gives the job's stdout if the job was launched successfully
# and closed its stdout at some point. The output will be
# manipulated to not contain ANSI escape codes.
export def getJobFailedStderr (job: Job): Result String Error =
    require Pass stderr = getJobFailedStderrRaw job

    Pass (stderr | filterTerminalCodes)

export def getJobInputs (job: Job): Result (List Path) Error =
    tree job 1
    | guardPath job

export def getJobOutputs (job: Job): Result (List Path) Error =
    tree job 2
    | guardPath job

export def getJobFailedInputs (job: Job): Result (List Path) Error =
    tree job 1
    | mapPath

export def getJobFailedOutputs (job: Job): Result (List Path) Error =
    tree job 2
    | mapPath

export def getJobId (job: Job): Integer =
    (\j prim "job_id") job

export def getJobDescription (job: Job): String =
    (\j prim "job_desc") job

export def getJobOutput (job: Job): Result Path Error =
    require Pass outputs = getJobOutputs job

    match outputs
        Nil ->
            failWithError "No outputs available from job {str job.getJobId}: '{job.getJobDescription}'"
        (singleOutput, Nil) -> Pass singleOutput
        _ ->
            failWithError "More than one output found from job {str job.getJobId}: '{job.getJobDescription}'"

export def isJobOk (job: Job): Boolean = match (getJobReport job)
    Fail _ -> False
    Pass u -> u.getUsageStatus == 0

export data Status =
    Exited Integer
    Signaled Integer
    Aborted Error

export def getJobStatus (job: Job): Status = match (getJobReport job)
    Fail f -> Aborted f
    Pass u ->
        def status = u.getUsageStatus

        if status >= 0 then
            Exited status
        else
            Signaled (-status)

# Location of the wake executable
export def wakePath: String =
    prim "execpath"

export def rOK: Integer =
    0

export def wOK: Integer =
    1

export def xOK: Integer =
    2

export def access (file: String) (mode: Integer): Boolean =
    (\f \m prim "access") file mode
