# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# System information
def uname = prim "uname"
export def sysname = uname.getPairFirst
export def machine = uname.getPairSecond

# Default search path for new Plans
export topic path: String
export def path = catWith ":" (subscribe path | distinctBy scmp)
publish environment = "PATH={path}", Nil

# Inject command-line specified path entries
publish path = match (getenv "WAKE_PATH")
  Some x = tokenize `:` x
  None = Nil

# Setup a default path
publish path =
  def default = "/usr/bin", "/bin", Nil
  match (getenv "WAKE_STRICT_PATH")
    Some "1" = Nil
    Some _ = default
    None = default


# Default environment for new Plans
export topic environment: String
export def environment = subscribe environment

# Use of this function can lead to unnecessary rebuilds!
export def getenv key =
  def p x = prim "getenv"
  head (p key)

def test key = replace `=.*` "" _ ==* key
def value pair = replace `[^=]*=` "" pair

# Retrieve the value for 'key' from a KEY=VALUE environment list
# (key: String) => (environment: List String) => Option String
export def getEnvironment key environment =
  def clean (Pair eq _) = value eq
  find (test key) environment | omap clean

# Remove a key from a KEY=VALUE environment list
# (key: String) => (environment: List String) => List String
export def unsetEnvironment key environment =
  filter (! test key _) environment

# Set key=value in an environment list, removing all prior values for that key
# (key: String) => (value: String) => (environment: List String) => List String
export def setEnvironment key value environment =
  "{key}={value}", unsetEnvironment key environment

# Update a key's value in a KEY=VALUE environment list
# All prior values for that key are rmeoved
# Only the first match (if any) is supplied to fn
# (key: String) => (fn: Option String => Option String) => (environment: List String) => List String
export def editEnvironment key fn environment =
  match (splitBy (test key) environment)
    Pair eq rest = match (head eq | omap value | fn)
      Some v = "{key}={v}", rest
      None = rest

# Add a component to the PATH in a KEY=VALUE environment
# (path: String) => (environment: List String) => List String
export def addEnvironmentPath path environment =
  def mod = match _
    None = Some path
    Some x = Some "{path}:{x}"
  editEnvironment "PATH" mod environment

# Optionally add a component to the PATH in a KEY=VALUE environment
# (pathopt: Option String) => (environment: List String) => List String
export def addEnvironmentPathOpt pathopt environment =
  match pathopt
    None = environment
    Some x = addEnvironmentPath x environment
