# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

def uname = prim "uname"

# sysname: build system's operating system.
#
#   sysname = "Darwin" # on a Macbook
#   sysname = "Linux"  # on Linux
export def sysname: String =
    uname.getPairFirst

# machine: Build system's CPU architecture.
#
#   machine = "x86_64"  # on 64-bit Intel systems
#   machine = "riscv64" # on 64-bit RISC-V systems
export def machine: String =
    uname.getPairSecond

# A topic used to globally add directories to the default PATH of a Plans
export topic path: String

# Default search path for new Plans
export def path: String =
    catWith ":" (subscribe path | distinctBy scmp)

# Add PATH to the default environment
publish environment =
    "PATH={path}",
    Nil

# Inject command-line specified path entries
# Note: changing this value will likely cause a total workspace rebuild
publish path = match (getenv "WAKE_PATH")
    Some x = tokenize `:` x
    None = Nil

# Setup a default path
publish path = "/usr/bin", Nil
publish path = "/bin", Nil

# A topic used to globally add variables to the default environment of Plans
export topic environment: String

# The default environment for new Plans
export def environment: List String =
    subscribe environment

# getenv: access environment variables provided to the wake executable
# Use of this function can lead to unnecessary rebuilds!
export def getenv (key: String): Option String =
    def p x = prim "getenv"
    head (p key)

def test key = replace `=.*` "" _ ==* key
def value pair = replace `[^=]*=` "" pair

# Retrieve the value for 'key' from a KEY=VALUE environment list
export def getEnvironment (key: String) (environment: List String): Option String =
    def clean (Pair eq _) = value eq
    find (test key) environment | omap clean

# Remove a key from a KEY=VALUE environment list
#
#    makePlan ...
#    | editPlanEnvironment (unsetEnvironment "JAVA_HOME")
#    | ...
export def unsetEnvironment (key: String) (environment: List String): List String =
    filter (! test key _) environment

# Set key=value in an environment list, removing all prior values for that key
#
#    makePlan ...
#    | editPlanEnvironment (setEnvironment "HELLO" "world")
#    | ...
export def setEnvironment (key: String) (value: String) (environment: List String): List String =
    "{key}={value}", unsetEnvironment key environment

# Update a key's value in a KEY=VALUE environment list
# All prior values for that key are rmeoved
# Only the first match (if any) is supplied to fn
export def editEnvironment (key: String) (fn: Option String => Option String) (environment: List String): List String =
    def Pair eq rest = splitBy (test key) environment
    match (head eq | omap value | fn)
        Some v = "{key}={v}", rest
        None = rest

# Add a component to the PATH in a KEY=VALUE environment
#
#    makePlan ...
#    | editPlanEnvironment (addEnvironmentPath "/usr/local/bin")
#    | ...
export def addEnvironmentPath (path: String) (environment: List String): List String =
    def mod = match _
        None = Some path
        Some x = Some "{path}:{x}"
    editEnvironment "PATH" mod environment

# Optionally add a component to the PATH in a KEY=VALUE environment
export def addEnvironmentPathOpt (pathopt: Option String) (environment: List String): List String =
    match pathopt
        None = environment
        Some x = addEnvironmentPath x environment
