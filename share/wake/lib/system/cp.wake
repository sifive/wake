# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# installAs: copy a file to a specified destination
export def installAs (dest: String) (file: Path): Path = match file.getPathResult
    Fail e = makeBadPath e
    Pass _ =
        def sdest = simplify dest
        def cmd = which "cp", file.getPathName, sdest, Nil
        def inputs = mkdir "{dest}/..", file, Nil
        def foutputs _ = sdest, Nil
        makeExecPlan cmd inputs
        | setPlanEnvironment Nil
        | setPlanLocalOnly True
        | setPlanFnOutputs foutputs
        | runJob
        | getJobOutput

# Copy a file from one directory subtree to another
# installIn "/to" "from"  "from/subdir/file"  => "/to/subdir/file"
# installIn "/to" "."     "from/subdir/file"  => "/to/from/subdir/file"
# installIn "/to" "/from" "/from/subdir/file" => "/to/subdir/file"
# installIn "/to" "/"     "/from/subdir/file" => "/to/from/subdir/file"
# These fail:
# installIn "/to" "from"  "subdir/file"
# installIn "/to" "/from" "/subdir/file"
# installIn "/to" "from"  "/from/subdir/file"
# installIn "/to" "/from" "from/subdir/file"
export def installIn (toRoot: String) (fromRoot: String) (sourcePath: Path): Path =
    require Path sourceStr = sourcePath
    def rel = relative fromRoot sourceStr
    def isAbs = matches `/.*`
    def uneq a b = (a && !b) || (!a && b)
    if matches `[.][.]/.*` rel || uneq fromRoot.isAbs sourceStr.isAbs then
        makeBadPath (makeError "{sourceStr} is not contained in {fromRoot}")
    else
        installAs (in toRoot rel) sourcePath
