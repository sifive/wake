# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# The source topic is used to inform wake about source files.
# Normally, wake obtains this information from git.
# However, in a distribution tarball this information is not available.
# In that situation, provide a manifest.wake which publishes to this topic.
# Anything published to this topic will be returned by calls to `sources`.
export topic source: String

# Private implementation of global sources
def add_sources str = prim "add_sources"
def got_sources = add_sources (subscribe source | map simplify | implode)

# Find files
# WARNING! Use of this method can make a build unreproducible.
# Depending on when the method is invoked, the results may vary!
# This method is ntended to be used by the outputFn of LocalOnly Jobs.
export def files (dir: String) (regexp: RegExp): List String =
    def p d r = prim "files"
    p dir regexp

def raw_source file =
    def get_modtime file = prim "get_modtime"
    def time = get_modtime file
    if time == -1 then
        makeBadPath (makeError "{file}: source does not exist. Did you delete it or move it without telling git?")
    else
        makeExecPlan ("<source>", str time, file, Nil) Nil
        | setPlanShare       False
        | setPlanEcho        logDebug
        | setPlanEnvironment Nil
        | setPlanFnOutputs   (file, _)
        | runJobWith virtualRunner
        | getJobOutput

export def source (file: String): Path =
    def basename = replace `^.*/` '' file
    def dirname = simplify "{file}/.."
    match (sources dirname basename.quote)
        Nil = makeBadPath "{file}: not a source file".makeError
        x, Nil = x
        _ = unreachable "a quoted RegExp can never match more than one distinct String"

# Find sources files
export def sources (dir: String) (filterRegexp: RegExp): List Path =
    def scan dir regexp = prim "sources"
    match got_sources
        True  = scan dir filterRegexp | map raw_source
        False = unreachable "add_sources always returns True"
