# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# The source topic is used to inform wake about source files.
# Normally, wake obtains this information from git.
# However, in a distribution tarball this information is not available.
# In that situation, provide a manifest.wake which publishes to this topic.
# Anything published to this topic will be returned by calls to `sources`.
export topic source: String

# Private implementation of global sources
def add_sources str = prim "add_sources"
def got_sources = add_sources (subscribe source | map simplify | implode)

# Find files
# WARNING! Use of this method can make a build unreproducible.
# Depending on when the method is invoked, the results may vary!
# This method is ntended to be used by the outputFn of LocalOnly Jobs.
export def files (dir: String) (regexp: RegExp): List String =
    def p d r = prim "files"
    p dir regexp

def raw_source file =
    def get_modtime file = prim "get_modtime"
    def time = get_modtime file
    if time == -1 then
        failWithError "{file}: source does not exist. Did you delete it or move it without telling git?"
    else
        makeExecPlan ("<source>", str time, file, Nil) Nil
        | setPlanShare       False
        | setPlanEcho        logDebug
        | setPlanEnvironment Nil
        | setPlanFnOutputs   (file, _)
        | runJobWith virtualRunner
        | getJobOutput

export def source (file: String): Result Path Error =
    def base = basename file
    def dir = dirname file
    require Pass allSources =
        sources dir base.quote
    match allSources
        Nil    = failWithError "{file}: not a source file"
        x, Nil = Pass x
        _      = unreachable "a quoted RegExp can never match more than one distinct String"

# Allows claiming of a file so long as the file is within
# wakeroot. Keep in mind that if another job produces this
# file, claim will fail. Likewise if you claim a file then
# any job that produces this file will fail. Claim should
# be thought of as a "virtual" job and wake demands that
# all paths be produced by exactly one job, virtual or
# otherwise.
#
# For source files please use `soruce`. For files outside
# of wakeroot please use `claimFileAsPath` or `claimFileAsPathIn`.
# `claim` is good for claiming files of previous builds that
# are not being used again this build.
#
# Parameters:
#  - `file`: The string giving the path to the file to be claimed
#
# Example:
# ```
#   claim "build/my_flow/my_step/previous-output.txt" # Claims the file
# ```
export def claim (file: String): Result Path Error =
    def claimRel relpath =
        def isOutsideRoot = matches `\.\..*` relpath
        if isOutsideRoot then
            failWithError "claim cannot be used on files outside of wake's root. Consider using claimFileAsPath instead."
        else
            raw_source relpath

    def simplePath = simplify file
    def isAbs = matches `/.*` simplePath
    require True = isAbs else claimRel simplePath

    relative workspace file
    | simplify
    | claimRel

# Find sources files
export def sources (dir: String) (filterRegexp: RegExp): Result (List Path) Error =
    def scan dir regexp = prim "sources"
    match got_sources
        True =
            scan dir filterRegexp
            | findFailFn raw_source
        False =
            unreachable "add_sources always returns True"

# This API makes it possible to include a non-source file into a wake build.
# Generally, one should obtain Paths from sources or as the output of Jobs.
# This API is useful for things like a command-line-supplied input file.
export def claimFileAsPath (existingFile: String) (desiredWorkspacePath: String): Result Path Error =
    def fileName = replace `.*/` "" desiredWorkspacePath
    require Pass destDir =
        extract `(.*)/.*` desiredWorkspacePath
        | head
        | getOrElse "."
        | mkdir
    claimFileAsPathIn destDir existingFile fileName

export def claimFileAsPathIn (outputDirectory: Path) (existingFile: String) (desiredName: String): Result Path Error =
    def get_modtime file = prim "get_modtime"
    def time = get_modtime existingFile
    if time == -1 then
        failWithError "{existingFile}: claimed file does not exist"
    else
        def desiredWorkspacePath = simplify "{outputDirectory.getPathName}/{desiredName}"
        def visible = outputDirectory, Nil
        def cmdline = which "cp", existingFile, desiredWorkspacePath, Nil
        makeExecPlan cmdline visible
        | setPlanLocalOnly   True
        | setPlanPersistence Once
        | setPlanFnOutputs   (\_ desiredWorkspacePath, Nil)
        | runJobWith localRunner
        | getJobOutput
