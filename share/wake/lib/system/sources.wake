# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Private implementation of global sources
def add_sources str = prim "add_sources"
def implode l = cat (foldr (_, "\0", _) Nil l)
def got_sources = add_sources (subscribe source).implode # returns true

# Find files
# WARNING! Use of this method can make a build unreproducible
# Depending on when the method is invoked, the results may vary
global def files dir regexp = prim "files"

def raw_source file =
  def get_modtime file = prim "get_modtime"
  def time = get_modtime file
  if time == -1
  then makeBadPath (makeError "{file}: source does not exist")
  else
    makePlan ("<source>", str time, file, Nil) Nil
    | setPlanShare       False
    | setPlanEcho        Debug
    | setPlanEnvironment Nil
    | setPlanFnOutputs   (file, _)
    | runJobWith virtualRunner
    | getJobOutput

global def source file =
  def basename = replace `^.*/` '' file
  def dirname = simplify "{file}/.."
  match (sources dirname basename.quote)
    Nil = makeBadPath "{file}: not a source file".makeError
    x, Nil = x
    _ = panic "unreachable: multiple sources match the same regexp"

# Find sources files
global def sources dir filterRegexp =
  def scan dir regexp = prim "sources"
  waitOne (\_ scan dir filterRegexp | map raw_source) got_sources
