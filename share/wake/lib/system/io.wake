# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# Read the file contents of a Path
export def read (path: Path): Result String Error =
    def imp p = prim "read"

    match (imp path.getPathName)
        Pass body = Pass body
        Fail f = Fail (makeError f)

target writeImp inputs mode path content =
    def writeRunner =
        def imp m p c = prim "write"
        def pre input = Pair input Unit

        def post = match _
            Pair (Fail f) _ = Fail f
            Pair (Pass output) Unit =
                if mode < 0 || mode > 0x1ff then
                    Fail (makeError "write {path}: Invalid mode ({strOctal mode})")
                else match (imp mode path content)
                    Fail f = Fail (makeError f)
                    Pass path = Pass (editRunnerOutputOutputs (path, _) output)

        makeRunner "write" (\_ Pass 0.0) pre post virtualRunner

    makeExecPlan ("<write>", str mode, path, Nil) inputs
    | setPlanLabel "write: {path} {str mode}"
    | setPlanOnce False
    | setPlanEnvironment Nil
    | runJobWith writeRunner
    | getJobOutput

# Create all directories and the named file
export def write (path: String) (content: String): Result Path Error =
    def spath = simplify path

    require Pass parent =
        simplify "{spath}/.."
        | mkdir

    writeImp (parent, Nil) 0644 spath content

# Create a file with the given mode in the specified directory
export def writeIn (parent: Path) (mode: Integer) (name: String) (content: String): Result Path Error =
    writeImp (parent, Nil) mode "{parent.getPathName}/{name}".simplify content

# installAs: copy a file to a specified destination
export def installAs (dest: String) (file: Path): Result Path Error =
    def sdest = simplify dest
    def cmd = which "cp", file.getPathName, sdest, Nil

    require Pass destDir =
        simplify "{dest}/.."
        | mkdir

    def inputs = destDir, file, Nil
    def foutputs _ = sdest, Nil

    makeExecPlan cmd inputs
    | setPlanLabel "installAs: {dest} {file.getPathName}"
    | setPlanEnvironment Nil
    | setPlanFnOutputs foutputs
    | runJobWith localRunner
    | getJobOutput

# Copy a file from one directory subtree to another
# installIn "/to" "from"  "from/subdir/file"  => "/to/subdir/file"
# installIn "/to" "."     "from/subdir/file"  => "/to/from/subdir/file"
# installIn "/to" "/from" "/from/subdir/file" => "/to/subdir/file"
# installIn "/to" "/"     "/from/subdir/file" => "/to/from/subdir/file"
# These fail:
# installIn "/to" "from"  "subdir/file"
# installIn "/to" "/from" "/subdir/file"
# installIn "/to" "from"  "/from/subdir/file"
# installIn "/to" "/from" "from/subdir/file"
export def installIn (toRoot: String) (fromRoot: String) (sourcePath: Path): Result Path Error =
    def sourceStr = sourcePath.getPathName
    def rel = relative fromRoot sourceStr
    def isAbs = matches `/.*`
    def uneq a b = (a && !b) || (!a && b)

    if matches `[.][.]/.*` rel || uneq fromRoot.isAbs sourceStr.isAbs then
        failWithError "{sourceStr} is not contained in {fromRoot}"
    else
        installAs (in toRoot rel) sourcePath

def mkdirRunner: Runner =
    def imp m p = prim "mkdir"

    def pre = match _
        Fail f = Pair (Fail f) (Pair "" "")
        Pass input = match input.getRunnerInputCommand
            _, _, mode, dir, Nil = Pair (Pass input) (Pair mode dir)
            _ = unreachable "mkdirImp violated command-line contract"

    def post = match _
        Pair (Fail f) _ = Fail f
        Pair (Pass output) (Pair smode dir) =
            def mode =
                int smode
                | getOrElse 0x200

            if mode < 0 || mode > 0x1ff then
                Fail (makeError "mkdir {dir}: Invalid mode ({smode})")
            else match (imp mode dir)
                Fail f = Fail (makeError f)
                Pass path = Pass (editRunnerOutputOutputs (path, _) output)

    makeRunner "mkdir" (\_ Pass 0.0) pre post virtualRunner

def mkdirImp inputs mode path =
    makeExecPlan ("<mkdir>", "-m", "0{strOctal mode}", path, Nil) inputs
    | setPlanLabel "mkdir: {path} 0{strOctal mode}"
    | setPlanKeep False
    | setPlanEnvironment Nil
    | runJobWith mkdirRunner
    | getJobOutput

# Create a directory in the parent
export def mkdirIn (parent: Path) (mode: Integer) (name: String): Result Path Error =
    mkdirImp (parent, Nil) mode "{parent.getPathName}/{name}".simplify

# Make all every element in the directory path with mode 0755
export def mkdir (path: String): Result Path Error =
    def root = match _
        "", x, t = Pair (mkdirImp Nil 0755 "/{x}") t
        x, t = Pair (mkdirImp Nil 0755 x) t
        Nil = unreachable "tokenize never returns an empty list"

    def mkdirRecursive (Pair rootResult pathTail) =
        require Pass root = rootResult

        rfoldl (mkdirIn _ 0755 _) root pathTail

    path
    | simplify
    | tokenize `/`
    | root
    | mkdirRecursive
