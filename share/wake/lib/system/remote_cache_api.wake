# Copyright 2024 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# Configuration details required to connect to the remote shared cache.
export tuple RemoteCacheApi =
    # The domain or ip address of the cache
    export Domain: String
    # The port serving the cache
    export Port: Integer
    # The api key required for authenicated routes. Not required for all requests
    export Authorization: Option String

# makeRemoteCacheApi: Parses config string into RemoteCacheApi
#
# ```
#  makeRemoteCacheApi "local:1234:myauth" = Pass (RemoteCacheApi "local" 1234 (Some "myauth"))
#  makeRemoteCacheApi "local:1234:" = Pass (RemoteCacheApi "local" 1234 None)
#  makeRemoteCacheApi "local:1234" = Fail (...)
#  makeRemoteCacheApi "local" = Fail (...)
#  makeRemoteCacheApi "local:asdf:myauth" = Fail (...)
# ```
export def makeRemoteCacheApi (config: String): Result RemoteCacheApi Error =
    require (domain, portStr, authStr, Nil) =
        config
        | tokenize `:`
    else
        failWithError
        "Remote cache config was set with incorrect format. Saw: '{config}'. Expected 'domain:port:auth' (auth may be omitted)"

    require Some (port) =
        portStr
        | int
    else failWithError "Remote cache config was set with non-integer port. Saw: {portStr}"

    def auth = if authStr ==* "" then None else Some authStr

    RemoteCacheApi domain port auth
    | Pass

# TODO: methods such as "downloadFile" and "postJob" should be implemented here.

