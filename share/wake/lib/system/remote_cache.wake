# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

from http import _

tuple RemoteCacheBlob =
    Id: String
    Url: String

tuple CacheSearchOutputFile =
    Path: String
    Mode: Integer
    Blob: RemoteCacheBlob

tuple CacheSearchResponseMatch =
    OutputSymlinks: List String
    OutputDirs: List String
    OutputFiles: List CacheSearchOutputFile
    StdoutBlob: RemoteCacheBlob
    StderrBlob: RemoteCacheBlob
    Status: Integer
    Runtime: Double
    Cputime: Double
    Memory: Integer
    IBytes: Integer
    OBytes: Integer

data CacheSearchResponse =
    NoMatch
    Match CacheSearchResponseMatch

def strToBytes (str: String): List Integer =
    str
    | explode
    # TODO: unicodeToInteger may return values larger than u8
    | map (unicodeToInteger _)

def fancyImplode (parts: List (List Integer)): List Integer =
    foldr (\x \acc x ++ (0, acc)) Nil parts

def implodeAsBytes (parts: List String): List Integer =
    parts
    | map strToBytes
    | fancyImplode

def foobar (parts: List Integer): List JValue =
    parts
    | map JInteger

def mkVisibleFileJson (Path path hash) =
    JObject (
        "path" :-> JString path,
        "hash" :-> JString hash,
    )

def downloadBlobString (id: String) (url: String): Result String Error =
    require False = id ==* "00000000-0000-0000-0000-000000000000"
    else Pass  ""

    require Pass response =
        buildHttpRequest url
        | setMethod HttpMethodGet
        | makeRequest

    Pass response.getHttpResponseBody

def downloadBlobFile (url: String) (path: String) (mode: Integer): Result String Error =
    require Pass downloadPath =
        buildHttpRequest url
        | setMethod HttpMethodGet
        | makeBinaryRequest

    def fixupScript =
        """
        cp %{downloadPath.getPathName} %{path} 
        chmod %{mode | strOctal} %{path} 
        """

    def job =
        makeShellPlan fixupScript (downloadPath, Nil)
        | setPlanLabel "rsc: fixup blob {path} from {downloadPath.getPathName}"
        # We need to copy the file over another jobs output space so:
        #   - We must run with the local running
        #   - We must lie and say we output nothing
        #   - We must write to the path another job reports that it output
        | runJobWith localRunner

    require True = job.isJobOk
    else failWithError "Failed to cleanup downloaded file {path} from {downloadPath.getPathName}"

    Pass path

def postJob (rscApi: RemoteCacheApi) (job: Job) (wakeroot: String) (hidden: String) ((RunnerInput _label cmd vis env dir stdin _res _prefix _ isAtty): RunnerInput) ((RunnerOutput _ outputs usage): RunnerOutput): Result Unit Error =
    def Usage status runtime cputime mem ibytes obytes = usage

    def visible =
        vis
        | map mkVisibleFileJson

    require Pass stdout = job.getJobFailedStdoutRaw
    require Pass stderr = job.getJobFailedStderrRaw

    def insertUpload (item: String): (map: Map String (Result String Error)) => (map: Map String (Result String Error)) =
        minsert item (rscApi | rscApiPostFileBlob item item)

    def blobUploads =
        foldr insertUpload (mnew scmp) outputs
        | minsert "stdout" (rscApi | rscApiPostStringBlob "stdout" stdout)
        | minsert "stderr" (rscApi | rscApiPostStringBlob "stderr" stderr)

    require Some (Pass stdout_id) =
        blobUploads
        | mlookup "stdout"
    else failWithError "Failed to lookup stdout"

    require Some (Pass stderr_id) =
        blobUploads
        | mlookup "stderr"
    else failWithError "Failed to lookup stderr"

    def mkOutputFileJson src ids =
        require Some (Pass id) =
            ids
            | mlookup src
        else failWithError "Unable to lookup id for {src}"

        require Pass (Stat _ mode _) = unsafe_stat src

        JObject (
            "path" :-> JString src,
            #"path" :-> JString "{wakeroot}/{src}",
            "mode" :-> JInteger (mode | mode2bits),
            "blob_id" :-> JString id,
        )
        | Pass

    require Pass outputFiles =
        outputs
        | map (mkOutputFileJson _ blobUploads)
        | findFail
        | rmap JArray

    def json =
        JObject (
            "comment_cmd" :-> JString (cmd | catWith " "),
            "comment_env" :-> JString (env | catWith " "),
            "cmd" :-> JArray cmd.implodeAsBytes.foobar,
            "cwd" :-> JString dir,
            "env" :-> JArray env.implodeAsBytes.foobar,
            "hidden_info" :-> JString hidden,
            "is_atty" :-> JBoolean isAtty,
            "stdin" :-> JString stdin,
            "visible_files" :-> JArray visible,
            "output_dirs" :-> JArray Nil,
            "output_symlinks" :-> JArray Nil,
            "output_files" :-> outputFiles,
            "stdout_blob_id" :-> JString stdout_id,
            "stderr_blob_id" :-> JString stderr_id,
            "status" :-> JInteger status,
            "runtime" :-> JDouble runtime,
            "cputime" :-> JDouble cputime,
            "memory" :-> JInteger mem,
            "ibytes" :-> JInteger ibytes,
            "obytes" :-> JInteger obytes,
        )

    rscApi | rscApiPostJob json

# Uses input to determine if the job is cached in a remote cache
# if so, returns the resolved job, otherwise returns None
def searchJob (rscApi: RemoteCacheApi) (hidden: String) ((RunnerInput _label cmd vis env dir stdin _res _prefix _usage isAtty): RunnerInput): Result CacheSearchResponse Error =
    def visible =
        vis
        | map mkVisibleFileJson

    def jsonReq =
        JObject (
            "comment_cmd" :-> JString (cmd | catWith " "),
            "comment_env" :-> JString (env | catWith " "),
            "cmd" :-> JArray cmd.implodeAsBytes.foobar,
            "cwd" :-> JString dir,
            "env" :-> JArray env.implodeAsBytes.foobar,
            "hidden_info" :-> JString hidden,
            "is_atty" :-> JBoolean isAtty,
            "stdin" :-> JString stdin,
            "visible_files" :-> JArray visible,
        )

    require Pass json = rscApi | rscApiFindMatchingJob jsonReq

    require Pass (JString isMatch) = jField json "type"
    else failWithError "JSON response has incorrect schema"

    require True = isMatch ==* "Match"
    else Pass NoMatch

    def mkBlob (v: JValue): Result RemoteCacheBlob Error =
        require Pass (JString id) = jField v "id"
        else failWithError "id"

        require Pass (JString url) = jField v "url"
        else failWithError "url"

        RemoteCacheBlob id url
        | Pass

    require Pass stdoutBlobF = jField json "stdout_blob"
    else failWithError "stdout_blob"

    require Pass stderrBlobF = jField json "stderr_blob"
    else failWithError "stderr_blob"

    require Pass stdoutBlob = mkBlob stdoutBlobF
    else failWithError "stdout_blob"

    require Pass stderrBlob = mkBlob stderrBlobF
    else failWithError "stderr_blob"

    require Pass (JInteger status) = jField json "status"
    else failWithError "status"

    require Pass (JDouble runtime) = jField json "runtime"
    else failWithError "runtime"

    require Pass (JDouble cputime) = jField json "cputime"
    else failWithError "cputime"

    require Pass (JInteger memory) = jField json "memory"
    else failWithError "memory"

    require Pass (JInteger ibytes) = jField json "ibytes"
    else failWithError "ibytes"

    require Pass (JInteger obytes) = jField json "obytes"
    else failWithError "obytes"

    require Pass (JArray outputFiles) = jField json "output_files"
    else failWithError "output_files"

    def mkOutputFile (v: JValue): Result CacheSearchOutputFile Error =
        require Pass (JString path) = jField v "path"
        else failWithError "path"

        require Pass (JInteger mode) = jField v "mode"
        else failWithError "mode"

        require Pass jblob = jField v "blob"
        else failWithError "blob"

        require Pass blob = mkBlob jblob

        CacheSearchOutputFile path mode blob
        | Pass

    require Pass ofs =
        outputFiles
        | map mkOutputFile
        | findFail

    CacheSearchResponseMatch
    Nil
    Nil
    ofs
    stdoutBlob
    stderrBlob
    status
    runtime
    cputime
    memory
    ibytes
    obytes
    # | tap (\x println (format x))
    | Match
    | Pass

export def mkRemoteCacheRunner (rscApi: RemoteCacheApi) (hashFn: Result RunnerInput Error => Result String Error) (wakeroot: String) ((Runner name score baseDoIt): Runner): Runner =
    def virtual job stdout stderr status runtime cputime membytes ibytes obytes = prim "job_virtual"
    def badlaunch job error = prim "job_fail_launch"

    def doit job runnerInput = match runnerInput
        Fail e ->
            def _ = badlaunch job e

            Fail e
        Pass input ->
            require Pass hashKey = hashFn runnerInput

            # -------------------------------------
            # --- Search the cache for the job  ---
            # -------------------------------------

            # Search the cache for a match
            require Pass response = searchJob rscApi hashKey input
            else
                # Leave a breadcrumb and fallback to the base runner if the cache fails to respond
                def _ = breadcrumb "Failed to search for job in the cache"

                baseDoIt job (Pass input)

            # If a match was found use it
            require NoMatch = response
            else
                require (Match details) = response
                else unreachable "two-constructor tuple must have one value"

                def _ = breadcrumb "Found a match in the cache"

                def (
                    CacheSearchResponseMatch
                    output_symlinks
                    output_dirs
                    output_files
                    stdout_blob
                    stderr_blob
                    status
                    runtime
                    cputime
                    mem
                    ibytes
                    obytes
                ) = details

                def insertDownload (item: CacheSearchOutputFile): (map: Map String (Result String Error)) => (map: Map String (Result String Error)) =
                    def blob = item.getCacheSearchOutputFileBlob
                    def path = item.getCacheSearchOutputFilePath
                    def mode = item.getCacheSearchOutputFileMode

                    def downloadFile url path mode =
                        downloadBlobFile url "{input.getRunnerInputDirectory}/{path}" mode

                    minsert blob.getRemoteCacheBlobId (downloadFile blob.getRemoteCacheBlobUrl path mode)

                def blobDownloads =
                    def (RemoteCacheBlob out_id out_url) = stdout_blob
                    def (RemoteCacheBlob err_id err_url) = stderr_blob

                    foldr insertDownload (mnew scmp) output_files
                    | minsert out_id (downloadBlobString out_id out_url)
                    | minsert err_id (downloadBlobString err_id err_url)

                require Some (Pass stdout) =
                    blobDownloads
                    | mlookup stdout_blob.getRemoteCacheBlobId
                else failWithError "unable to download stdout"

                require Some (Pass stderr) =
                    blobDownloads
                    | mlookup stderr_blob.getRemoteCacheBlobId
                else failWithError "unable to download stderr"

                def resolved_outputs =
                    output_files
                    | map (_.getCacheSearchOutputFilePath)

                def outputs = resolved_outputs ++ output_dirs ++ output_symlinks
                def predict = Usage status runtime cputime mem ibytes obytes
                def _ = virtual job stdout stderr status runtime cputime mem ibytes obytes
                def inputs = map getPathName (input.getRunnerInputVisible)

                Pass (RunnerOutput inputs outputs predict)

            def _ = breadcrumb "Did not find a match"

            # -------------------------------------
            # --- Insert the job into the cache ---
            # -------------------------------------

            # Run the job to get the results
            require Pass output = baseDoIt job (Pass input)

            # Post the job to the server. This is left as 'def _' so that wake won't block progess
            # on it but it will stil be joined on before wake exits. Regardless of the result this
            # call should return the passing output to allow the build to continue.
            def _ = postJob rscApi job wakeroot hashKey input output

            # def _ = println "{response | format}"

            Pass output

    Runner "remote-cache: {name}" score doit

