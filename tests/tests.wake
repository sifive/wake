# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package test_wake
from wake import _

# The wake unit tests can be run on either the wake that invokes them or the
# wake that was built by the rest of the build system.  This topic is used
# by the wake build rules to declare how to build the wake-under-test.
#
# build.wake publishes to this topic so that 'make test' tests the built wake.
# If tests/ is used externally, the topic is empty and the invoking wake is tested instead.
export topic wakeTestBinary: Unit => Result (Pair String (List Path)) Error

# We need to handle the fact that sometimes tests are invoked from within /tests
# and sometimes they're invoked from outside of /tests. Additionally only when
# we have access to build_wake in our test environment can we figure out how
# to build the wake unit tests that we want to run. Since test_wake cannot depend
# on build_wake we instead make a topic that build_wake can publish to. This topic
# will be empty if your workspace starts in /tests but have the proper function
# in it if you start from one directory out. This means we can just have this test
# fail if it isn't run from the proper place. It's hacky but it works around
# the way we test currently.
export topic wakeUnitTestBinary: (variant: Pair String String) => Result (List Path) Error

def wakeToTestDir Unit = match (subscribe wakeTestBinary)
    buildTestWake, Nil =
        require Pass (Pair path visible) = buildTestWake Unit
        Pass (Pair (simplify "{path}/..") visible)
    Nil = Pass (Pair "{wakePath}" Nil)
    _ = Fail (makeError "Two wake binaries declared for testing!")

def wakeUnitToTest Unit =
    require buildWakeUnit, Nil = subscribe wakeUnitTestBinary
    else failWithError "wake-unit binary not found"
    require Pass wakeUnitLst = buildWakeUnit (Pair "native-cpp14-release" "native-c11-release")
    require Some result = head wakeUnitLst
    else failWithError "wake-unit binary not found"
    Pass result

export def runTests (cmdline: List String): Result String Error =
    require Pass filter = match cmdline
        Nil      = Pass `.*`
        arg, Nil = stringToRegExp arg
        _        = Fail (makeError "Too many arguments to runTests")

    require Pass (Pair wakeDir _) =
        wakeToTestDir Unit

    require Pass tests =
        sources here `${filter}/(pass|fail)\.sh`

    def prepareReport test =
        def folder = replace `^${quote here}/` "" test.getPathName
        def category = replace `/.*$` "" folder
        def testName = replace `^[^/]*/` "" folder | replace `/(pass|fail)\.sh$` ""
        def result = runTest test
        Triple category testName result

    def results =
        map prepareReport tests

    def formatCategory list =
        require Triple category _ _, _ = list else "impossible"
        def reportFailed = match _
            Triple _ name (Fail (Error cause _)) = Some "    - {name}: {cause}"
            _ = None
        def failures = mapPartial reportFailed list
        def text =
            def failed = len failures
            def total = len list
            def pass = total - failed
            "  - {category}: {str pass}/{str total} tests pass",
            failures
        catWith "\n" text

    def report =
        results
        | groupBy (scmp _.getTripleFirst _.getTripleFirst)
        | map formatCategory
        | catWith "\n"

    def _ = printlnLevel logWarning "{wakeDir}/wake unit testing results:\n{report}\n---"

    require Pass _ = findFailFn getTripleThird results

    Pass "All {len tests | str} tests completed successfully."

export def runUnitTests _: Result Unit Error =
    def testDirectory = "{here}/wake-unit"
    require Pass testScript =
      source "{testDirectory}/unit-test.sh"

    def testName =
        testDirectory
        | replace `^${quote here}/` ""

    def readFile list = match list
        Some file =
            require Pass content = read file
            Pass (Some content)
        None =
            Pass None

    require Pass expectedStdout =
        source "{testDirectory}/stdout"
        | getPass
        | readFile

    require Pass expectedStderr =
        source "{testDirectory}/stderr"
        | getPass
        | readFile

    require Pass visibleFiles =
        sources testDirectory `.*`

    def inTestDir path =
        relative testDirectory path

    require Pass wakeUnitBin =
        wakeUnitToTest Unit

    def testJob =
        makeExecPlan ("./{testScript.getPathName.inTestDir}", wakeUnitBin.getPathName.inTestDir, Nil) (wakeUnitBin, visibleFiles)
        | setPlanDirectory testDirectory
        | setPlanLabel "testing: {testName}"
        | setPlanStdout logNever
        | setPlanStderr logNever
        | runJob

    def removeCarriageReturns = replace `\r` ""

    require Pass jobStdout =
        testJob.getJobStdout
        | rmap removeCarriageReturns

    require Pass jobStderr =
        testJob.getJobStderr
        | rmap removeCarriageReturns

    require Pass _ = match testJob.isJobOk
        True  = Pass Unit
        False =
            def _ = println jobStderr
            Fail (makeError "Test failed ({format testJob.getJobStatus}). See above for details")

    require Pass _ = match expectedStderr
        Some x if x ==* jobStderr = Pass Unit
        None = Pass Unit
        Some _ =
            def _ = println jobStderr
            Fail (makeError "Unexpected standard error. See above for details")

    match expectedStdout
        Some x if x ==* jobStdout = Pass Unit
        None = Pass Unit
        _ =
            def _ = println jobStdout
            Fail (makeError "Unexpected standard output. See above for details")


def runTest (testScript: Path): Result Unit Error =
    def shouldPass =
        testScript
        | getPathName
        | matches `.*/pass\.sh`

    def testDirectory =
        testScript
        | getPathName
        | replace `/[^/]*$` ""

    def testName =
        testDirectory
        | replace `^${quote here}/` ""

    def readFile list = match list
        Some file =
            require Pass content = read file
            Pass (Some content)
        None =
            Pass None

    require Pass expectedStdout =
        source "{testDirectory}/stdout"
        | getPass
        | readFile

    require Pass expectedStderr =
        source "{testDirectory}/stderr"
        | getPass
        | readFile

    require Pass visibleFiles =
        sources testDirectory `.*`

    def inTestDir path =
        relative testDirectory path

    require Pass (Pair wakeDir wakeVisible) =
        wakeToTestDir Unit

    def testJob =
        makeExecPlan ("./{testScript.getPathName.inTestDir}", wakeDir.inTestDir, Nil) (visibleFiles ++ wakeVisible)
        | setPlanDirectory testDirectory
        | setPlanLabel "testing: {testName}"
        | setPlanLocalOnly True # On OS/X you cannot mount fuse within fuse
        | setPlanStdout logNever
        | setPlanStderr logNever
        | runJob

    require Pass jobStdout =
        testJob.getJobStdout
        | rmap (replace `\r` "")

    require Pass jobStderr =
        testJob.getJobStderr
        | rmap (replace `\r` "")

    require Pass _ = match expectedStderr
        Some x if x ==* jobStderr = Pass Unit
        None = Pass Unit
        Some _ = Fail (makeError "Unexpected standard error '{replace `\n` "\\\\n" jobStderr}'")

    require Pass _ = match expectedStdout
        Some x if x ==* jobStdout = Pass Unit
        None = Pass Unit
        _ = Fail (makeError "Unexpected standard output '{replace `\n` "\\\\n" jobStdout}'")

    match shouldPass testJob.isJobOk
        True  True  = Pass Unit
        False False = Pass Unit
        True  False =
            Fail (makeError "Test failed ({format testJob.getJobStatus}) with '{replace `\n.*` "" jobStderr}'")
        False True  =
            Fail (makeError "Test should not have passed with '{replace `\n.*` "" jobStderr}'")
