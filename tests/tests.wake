# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package test_wake

from wake import _

# The wake unit tests can be run on either the wake that invokes them or the
# wake that was built by the rest of the build system.  This topic is used
# by the wake build rules to declare how to build the wake-under-test.
#
# build.wake publishes to this topic so that 'make test' tests the built wake.
# If tests/ is used externally, the topic is empty and the invoking wake is tested instead.
export topic wakeTestBinary: Unit => Result (Pair String (List Path)) Error

def wakeToTestDir Unit = match (subscribe wakeTestBinary)
    buildTestWake, Nil ->
        require Pass (Pair path visible) = buildTestWake Unit

        Pass (Pair (simplify "{path}/..") visible)
    Nil -> Pass (Pair "{wakePath}" Nil)
    _ -> Fail (makeError "Two wake binaries declared for testing!")

def showDiff (expect: String) (actual: String): Result Unit Error =
    require Pass expectFile = writeTempFile "diff.expect" expect
    else failWithError "Unable to write expect file"

    require Pass actualFile = writeTempFile "diff.actual" actual
    else failWithError "Unable to write actual file"

    def cmd =
        "diff",
        "-u",
        actualFile.getPathName,
        expectFile.getPathName,

    # The job outputs here don't actually matter, depending on them forces the output order for
    # failed tests so they print out nicely.
    require Exited _ =
        makeExecPlan cmd (expectFile, actualFile, Nil)
        | setPlanStdout logWarning
        | setPlanStderr logWarning
        | setPlanIsAtty True
        | runJobWith defaultRunner
        | getJobStatus
    else failWithError "Unable to diff files"

    Pass Unit

export def runTests (cmdline: List String): Result String Error =
    require Pass filter = match cmdline
        Nil -> Pass `.*`
        arg, Nil -> stringToRegExp arg
        _ -> Fail (makeError "Too many arguments to runTests")

    require Pass (Pair wakeDir _) = wakeToTestDir Unit
    require Pass tests = sources @here `${filter}/(pass|fail)\.sh`

    def prepareReport test =
        def folder = replace `^${quote @here}/` "" test.getPathName
        def category = replace `/.*$` "" folder

        def testName =
            replace `^[^/]*/` "" folder
            | replace `/(pass|fail)\.sh$` ""

        def result = runTest test

        Triple category testName result

    def results = map prepareReport tests

    def formatCategory list =
        require Triple category _ _, _ = list
        else "impossible"

        def reportFailed = match _
            Triple _ name (Fail (Error cause _)) -> Some "    - {name}: {cause}"
            _ -> None

        def failures = mapPartial reportFailed list

        def text =
            def failed = len failures
            def total = len list
            def pass = total - failed

            "  - {category}: {str pass}/{str total} tests pass", failures

        catWith "\n" text

    def report =
        results
        | groupBy (scmp _.getTripleFirst _.getTripleFirst)
        | map formatCategory
        | catWith "\n"

    def _ = printlnLevel logWarning "{wakeDir}/wake unit testing results:\n{report}\n---"

    require Pass _ = findFailFn getTripleThird results

    Pass "All {len tests | str} tests completed successfully."

def runTest (testScript: Path): Result Unit Error =
    def shouldPass =
        testScript
        | getPathName
        | matches `.*/pass\.sh`

    def testDirectory =
        testScript
        | getPathName
        | replace `/[^/]*$` ""

    def testName =
        testDirectory
        | replace `^${quote @here}/` ""

    def readFile list = match list
        Some file ->
            require Pass content = read file

            Pass (Some content)
        None -> Pass None

    def trim s =
        s
        | replace `^\s*` ""
        | replace `\s*$` ""

    def readFileList list = match list
        Some file ->
            require Pass content = read file

            content
            | tokenize `\n`
            | map trim
            | filter (_ !=* "")
            | Pass
        None -> Pass Nil

    require Pass expectedStdout =
        source "{testDirectory}/stdout"
        | getPass
        | readFile

    require Pass expectedStderr =
        source "{testDirectory}/stderr"
        | getPass
        | readFile

    require Pass deps =
        source "{testDirectory}/deps"
        | getPass
        | readFileList

    require Pass visibleFiles = sources testDirectory `.*`
    require Pass (Pair wakeDir wakeVisible) = wakeToTestDir Unit

    def inTestDir path = relative testDirectory path

    # Ensure all the required files for the test were built
    require Pass ds =
        deps
        | map (\x claimFileAsPath "{wakeDir}/{x}" ".build/test/{x}")
        | findFail
    else
        def _ =
            "{testName} skipped! One of the deps ({deps | catWith ", "}) is missing."
            | printlnLevel logWarning

        Pass Unit

    def testJob =
        makeExecPlan
        ("./{testScript.getPathName.inTestDir}", wakeDir.inTestDir, Nil)
        (visibleFiles ++ wakeVisible ++ ds)
        | setPlanDirectory testDirectory
        | setPlanLabel "testing: {testName}"
        | setPlanEnvironment ("HOME={testDirectory}",)
        | setPlanStdout logNever
        | setPlanStderr logNever
        | setPlanShare False
        | runJobWith localRunner # On OS/X you cannot mount fuse within fuse

    def removeCarriageReturns = replace `\r` ""

    require Pass jobStdout =
        testJob.getJobFailedStdout
        | rmap removeCarriageReturns

    require Pass jobStderr =
        testJob.getJobFailedStderr
        | rmap removeCarriageReturns

    require Pass _ = match shouldPass testJob.isJobOk
        True True -> Pass Unit
        False False -> Pass Unit
        True False ->
            def _ =
                "{testName} failed! Stdout: \n{jobStdout}"
                | printlnLevel logWarning

            def _ =
                "{testName} failed! Stderr: \n{jobStderr}"
                | printlnLevel logWarning

            Fail (makeError "Test failed. Expected: Ok, Actual: {format testJob.getJobStatus}. See above for details")
        False True ->
            def _ =
                "{testName} failed! Stdout: \n{jobStdout}"
                | printlnLevel logWarning

            def _ =
                "{testName} failed! Stderr: \n{jobStderr}"
                | printlnLevel logWarning

            Fail (makeError "Test failed. Expected: Err, Actual: {format testJob.getJobStatus}. See above for details")

    def expectEqualOutput (stream: String) (expected: Option String) (actual: String): Result Unit Error =
        # If the integration test doesn't provide an expected output then anything is allowed.
        require Some expect = expected
        else Pass Unit

        # If they are equal, pass the expect
        require False = expect ==* actual
        else Pass Unit

        # They are not equal, show a nice diff and fail.
        require Pass _ =
            "{testName} failed! The diff below should be applied to jobs {stream}"
            | printlnLevel logWarning
            | Pass

        require Pass _ = showDiff expect actual

        Fail (makeError "Unexpected {stream}. See above for details")

    require Pass Unit = expectEqualOutput "stderr" expectedStderr jobStderr
    require Pass Unit = expectEqualOutput "stdout" expectedStdout jobStdout

    Pass Unit
