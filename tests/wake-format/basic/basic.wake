    # comment
def five = 5

# ordinary comment

def name Unit =
  def other = here
  def other = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  another

def name Unit =
  def other = here
  def other = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  another

global export def glob1 = 34

# ordinary comment
def name Unit =
  def other = here
  def other = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  another

# wake-format off
def name Unit =
  def other = here
  # wake-format off
  def other = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  another

def name Unit =
  # wake-format off
  def other = here
  def other = here
  another

def name Unit =
  def other = here
  # wake-format off
  def other = here
  def other = here
  another

def name Unit =
  def other = here
  # wake-format off
  def other = here

  def other = here
  another

def name Unit =
  # ordinary comment
  def other = here
  def other = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  another

def t1 =match _
  0=0
  n = 2+t(n-1)

# wake-format off
def t1 =match _
  0=0
  n = 2+t(n-1)

def t1 =match _
  # wake-format off
  0=0
  n = 2+t(n-1)

def t1 =match _
  0=0
  # wake-format off
  n = 2+t(n-1)

def t1 =match _
  # wake-format off
  0=0
  # wake-format off
  n = 2+t(n-1)

def t1 =match _
  # many
  # comments
  # wake-format off
  0=0
  # many
  # more
  # comments
  n = 2+t(n-1)

def t2 = ((x+7)*3)

def t4 = (
  # comment
  x
  + 5
)

def t4 = (
  # comment
  (
  # comment
  x
  + 5
  )
)

def t5 = (
  # comment
  # comment
  # comment
  x
  + 5
)

def t7 = (
  x # comment
  + 5
)

def t8 = (
  x + # comment
  5
)

def t9 = (
  x
  + 5 # comment
)

def name Unit = # wake-format off
  def other = here
  def other = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  another

def t3 = ( # comment
  x
  + 5
)

def t6 = ( # comment
  # comment
  # comment
  x
  + 5
)

def t8 = (
  # comment
  x # comment
  + # comment
  5 # comment
  - # comment
  2 # comment
)

def t9 = x + 5 - 2

def ff = a | b | c | d

def ff = a $ b $ c $ d

def ff = aaaaaaaaaaaaa | bbbbbbbbbbbbbbbb | cccccccccccccccccc | ddddddddddddddddddd | eeeeeeeeeeeeeee | ffffffffff | ggggggggggg | hhhhhhhhhhh

def wakeToTestDir Unit = match (subscribe wakeTestBinary)
    buildTestWake, Nil =
        require Pass (Pair path visible)=buildTestWake Unit
        Pass (Pair (simplify "{path}/..") visible)
    Nil = Pass (Pair "{wakePath}" Nil)
    _ = Fail (makeError "Two wake binaries declared for testing!")

def wakeToTestDir Unit = match (subscribe wakeTestBinary)
    buildTestWake, Nil =
        require (
          Pass
          # comment
          (Pair path visible)
        ) =buildTestWake Unit
        Pass (Pair (simplify "{path}/..") visible)
    Nil = Pass (Pair "{wakePath}" Nil)
    _ = Fail (makeError "Two wake binaries declared for testing!")

package test_wake

from wake import _
from wake import source , Nil
from test_wake import topic wakeTestBinary
from gcc_wake import compileC linkO
from wake import myMap=map foldl myFoldr=foldr
from wake import def unary + -
from wake import type Pair Result
from wake import source,Nil

export topic wakeTestBinary: Unit => Result (Pair String (List Path)) Error
export topic compileC: Pair String ((extraFlags: List String) => (headers: List Path) => (cfile: Path) => Result (List Path) Error)
topic linkO: (
  Pair
  String
  ((extraFlags: List String) => (objects: List Path) => (targ: String) => Result (List Path) Error)
)
export topic path: String
export topic wakeUnitTestBinary: (variant: Pair String String) => Result (List Path) Error
global export topic glob1: String
global topic glob1: String

def app1 =
  Pair # comment
  "a"
  "b"

def app =
  Pair
  "a"
  "b"

# TODO: The trailing NL here causes a failure for 'fits all' which is why this is NL'd
def app = Pair "a" "b" # comment
def app =
  Pair
  "a"
  "b" # comment


def app =
  Pair
  "a" # comment
  "b"

def app =
  Pair # comment
  "a" # comment
  "b" # comment

def app = aaaaaaaaaa bbbbbbbbbbbbbbbb cccccccccccccccccc ddddddddddddddddddd eeeeeeeeeeeeeee ffffffffff gggggggggggggggggggg hhhhhhhhhhhhhh

def t1 =match _
  0=0
  n # comment
  = 2+t(n-1)

def t1 =match _
  # comment
  0=0
  n = 2+t(n-1)

def t1 =match _
  0=0
  # comment
  n = 2+t(n-1)
