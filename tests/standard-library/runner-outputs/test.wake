# Test cases for runner functionality including runner output, runner errors, and runner status

# Test that a runner can fail a job even if the command succeeds
export def testRunnerFailSuccess: Result Unit Error =
    def run job input =
        def (Runner _ virtRun) = virtualRunner
        require Pass result = virtRun job (Pass input)

        # Report a runner error after the job completes
        def _ = reportJobRunnerError job "Intentional runner error for testing"

        Pass result

    def testRunner = makeRunner "test-runner-fail-success" run

    def job =
        makeExecPlan ("<test>", Nil) Nil
        | runJobWith testRunner

    require False = job.isRunnerOk
    else failWithError "Expected isRunnerOk to return False for job with runner error"

    # Runner status should be 1 (error) even though job status is 0 (success)
    require Pass runnerStatus = job.getJobRunnerStatus
    require True = runnerStatus == 1
    else failWithError "Expected runner status 1, got {str runnerStatus}"

    require Pass errorMsg = job.getJobRunnerError
    require True = errorMsg ==* "Intentional runner error for testing"
    else failWithError "Unexpected runner error message: {errorMsg}"

    Pass Unit

# Test that a runner preserves job failure status when both job and runner fail
export def testRunnerFailWithJobFailure _ =
    def run job input =
        # Run a command that will fail with exit code 42
        def failingInput =
            input
            | editRunnerInputCommand (\_ ("sh", "-c", "exit 42", Nil))

        def (Runner _ baseRun) = localRunner
        require Pass result = baseRun job (Pass failingInput)

        # Report a runner error after the job completes
        def _ = reportJobRunnerError job "Intentional runner error with job failure"

        Pass result

    def testRunner = makeRunner "test-runner-fail-with-job-failure" run

    def job =
        makeExecPlan ("<test>", Nil) Nil
        | runJobWith testRunner

    require False = job.isJobOk
    else failWithError "Expected isJobOk to return False for failing job"

    require False = job.isRunnerOk
    else failWithError "Expected isRunnerOk to return False for job with runner error"

    # Runner status should match job status (42)
    require Pass runnerStatus = job.getJobRunnerStatus
    require True = runnerStatus == 42
    else failWithError "Expected runner status 42, got {str runnerStatus}"

    # Runner error should be retrievable
    require Pass errorMsg = job.getJobRunnerError
    require True = errorMsg ==* "Intentional runner error with job failure"
    else failWithError "Unexpected runner error message: {errorMsg}"

    Pass Unit

# Test that RunnerOutput correctly includes and propagates runner status
export def testRunnerOutputStatus _ =
    # Create a custom runner that sets a specific runner status
    def run job input =
        def (Runner _ virtRun) = virtualRunner
        require Pass result = virtRun job (Pass input)

        # Set a specific runner status
        def customStatus = 123
        def _ = primJobSetRunnerStatus job customStatus

        Pass result

    def testRunner = makeRunner "test-runner-output-status" run

    def job =
        makeExecPlan ("<test>", Nil) Nil
        | runJobWith testRunner

    # Runner status should be what we set
    require Pass runnerStatus = job.getJobRunnerStatus
    require True = runnerStatus == 123
    else failWithError "Expected runner status 123, got {str runnerStatus}"

    Pass Unit

# Test that a runner can finish a job but mark it as failed
export def testRunnerFailFinish _ =
    def run job input =
        def (Runner _ virtRun) = virtualRunner
        require Pass result = virtRun job (Pass input)

        # Force a failure outside of the actual job
        failWithError "Mark job as failure"

    def testRunner = makeRunner "test-runner-fail-finish" run

    def job =
        makeExecPlan ("<test>", Nil) Nil
        | runJobWith testRunner

    # Job should be marked as failed
    require False = job.isJobOk
    else failWithError "Expected isJobOk to return False for failing job"

    Pass Unit

# Test that isRunnerOk returns true when there's no runner error
export def testRunnerOkSuccess _ =
    def job =
        makeExecPlan ("echo", "success", Nil) Nil
        | runJobWith localRunner

    # Job should succeed
    require True = job.isJobOk
    else failWithError "Expected isJobOk to return True for successful job"

    # Runner should also succeed
    require True = job.isRunnerOk
    else failWithError "Expected isRunnerOk to return True for job without runner error"

    # Runner status should be 0
    require Pass runnerStatus = job.getJobRunnerStatus
    require True = runnerStatus == 0
    else failWithError "Expected runner status 0, got {str runnerStatus}"

    Pass Unit

# Test that a wrapper runner correctly propagates runner status
export def testWrapperRunnerStatus: Result Unit Error =
    # Create an inner runner that sets a runner error and status
    def innerRun job input =
        def (Runner _ virtRun) = virtualRunner
        require Pass result = virtRun job (Pass input)

        # Set a runner error
        def _ = reportJobRunnerError job "Inner runner error"

        # Set a runner status
        def customStatus = 42
        def _ = primJobSetRunnerStatus job customStatus

        Pass result

    def innerRunner = makeRunner "inner-runner" innerRun

    # Create a wrapper runner that adds a prefix to runner errors
    def wrapperRun job input =
        # First run the job with the inner runner
        def innerInput = input
        def (Runner _ innerDoIt) = innerRunner
        require Pass result = innerDoIt job (Pass innerInput)

        match (getJobRunnerError job)
            Pass errorMsg if errorMsg !=* "" ->
                # Add a prefix to the error message
                def newErrorMsg = "WRAPPER: {errorMsg}"
                def _ = reportJobRunnerError job newErrorMsg

                # Keep the same runner status (should be 42 from inner runner)
                Pass result
            _ ->
                Pass result

    def wrapperRunner = makeRunner "wrapper-runner" wrapperRun

    # Create a job that uses the wrapper runner (which uses the inner runner)
    def job =
        makeExecPlan ("echo", "test", Nil) Nil
        | runJobWith wrapperRunner

    # Wait for job to complete
    require Pass _ = job.getJobOutputs

    # Verify the runner status is preserved from the inner runner
    require Pass runnerStatus = job.getJobRunnerStatus
    require True = runnerStatus == 42
    else failWithError "Expected runner status 42 from inner runner, got {str runnerStatus}"

    # Verify the error message has been prefixed by the wrapper
    require Pass errorMsg = job.getJobRunnerError
    require True = errorMsg ==* "WRAPPER: Inner runner error"
    else failWithError "Unexpected runner error message: {errorMsg}"

    Pass Unit

# Test that writes to different file descriptors to verify runner output/error capture
export def testFdOutputs: Result Unit Error =
    # Create a temporary script that writes to fd 3 and fd 4
    require Pass scriptPath = writeTempFile "fd_test.sh" """
#!/bin/bash
# Write to stdout (fd 1)
echo "This is standard output"
# Write to stderr (fd 2)
echo "This is standard error" >&2
# Write to fd 3 (runner output)
echo "This is runner output" >&3
# Write to fd 4 (runner error)
echo "This is runner error" >&4
# Exit successfully
exit 0
"""

    require Pass _ =
        makeExecPlan ("chmod", "+x", scriptPath.getPathName, Nil) (scriptPath, Nil)
        | runJobWith localRunner
        | getJobOutputs
        | rmap (\_ Unit)

    # Run the script with file descriptors 3 and 4 mapped to runner output and error
    def job =
        makeExecPlan (scriptPath.getPathName, Nil) (scriptPath, Nil)
        | runJobWith localRunner

    # Wait for job to complete
    require Pass _ = job.getJobOutputs

    require Pass stdout = job.getJobStdout
    require Pass stderr = job.getJobStderr
    require Pass runnerOutput = job.getJobRunnerOutput
    require Pass runnerError = job.getJobRunnerError

    require True = stdout ==* "This is standard output\n"
    else failWithError "Unexpected stdout: '{stdout}'"

    require True = stderr ==* "This is standard error\n"
    else failWithError "Unexpected stderr: '{stderr}'"

    require True = runnerOutput ==* "This is runner output\n"
    else failWithError "Unexpected runner output: '{runnerOutput}'"

    require True = runnerError ==* "This is runner error\n"
    else failWithError "Unexpected runner error: '{runnerError}'"

    def _ = println "All file descriptor outputs verified successfully"

    Pass Unit
