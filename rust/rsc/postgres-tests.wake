# Copyright 2024 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake

from wake import _
from rust import findCargoPath

export target testPostgres Unit =
    # First we define a few directories, using various
    # environment variables
    def dataDir = "/tmp/pg_data"

    require Pass postgresDir = match (getenv "POSTGRES_DIR")
        Some dir -> Pass "{dir}/bin"
        None ->
            require Some osPath = getenv "PATH"
            else failWithError "could not find postgres"

            def postgresPath = whichIn osPath "postgres"

            if postgresPath ==* "postgres" then
                failWithError "could not find postgres on path"
            else
                Pass (dirname postgresPath)

    require Pass cargoPath = findCargoPath Unit

    # This is normally unsafe but we're just using it for
    # a warning, you should never depend on the result here
    require _, _ = files "{@here}/vendor" `.*`
    else
        failWithError "You forgot to run `cargo vendor --locked` inside {@here}"
    
    # This script is piped in via stdin so that
    # as shells are opened one after the other,
    # the successive commands are run as intended
    def script =
        """
                set -ex
                trap 'exit $(/tmp/status)' 0
                unshare -U
                export HOME=/root
                mkdir %{dataDir}
                echo $? > /tmp/status
                %{postgresDir}/initdb -D %{dataDir}
                echo $? > /tmp/status
                %{postgresDir}/postgres -D %{dataDir} &
                trap "kill $!" 0
                sleep 2s
                %{postgresDir}/createuser -h localhost root
                echo $? > /tmp/status
                %{postgresDir}/createdb -h localhost shim
                echo $? > /tmp/status
                cd %{@here}
                %{cargoPath} test
                echo $? > /tmp/status
                exit $(cat /tmp/status) # exit the unshare shell
        """

    # Jobs require that we write stdin out to a file in order to
    # pipe it in
    require Pass scriptPath = write ".build/postgres-cargo.sh" script
    require Pass pgJsonPath = source "{@here}/postgres-cmd-spec.json"

    def emitVendorWarning status =
        require (Exited 0) = status
        else
            failWithError "cargo tests failed: Consider running `cargo vendor --locked` in {@here}"
        Pass status

    makeExecPlan ("{wakePath}/wakebox", "-p", pgJsonPath.getPathName, Nil) Nil
    | editPlanEnvironment (addEnvironmentPath "/usr/sbin")
    | setPlanPersistence ReRun
    | setPlanEcho logReport
    | runJobWith localRunner
    | getJobStatus
    | emitVendorWarning
