# Copyright 2024 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake

from wake import _

def createFileOp dst =
    JObject (
        "type" :-> JString "create-file",
        "destination" :-> JString dst,
    )

def createDirOp dst =
    JObject (
        "type" :-> JString "create-dir",
        "destination" :-> JString dst,
    )

def tmpMountOp dst =
    JObject (
        "type" :-> JString "tmpfs",
        "destination" :-> JString dst,
    )

def postgresSpecJson stdinFile testBinary =
    JObject (
        "label" :-> JString "postgres cargo test",
        "environment" :-> JArray (JString "PATH=/usr/lib64/ccache:/usr/bin:/usr/sbin:/bin",),
        "command" :-> JArray (JString "bash", Nil),
        "user-id" :-> JInteger 0,
        "group-id" :-> JInteger 0,
        "visible" :-> JArray (JString testBinary, Nil),
        "directory" :-> JString ".",
        "stdin" :-> JString "{stdinFile}",
        "resources" :-> JArray Nil,
        "isolate-pids" :-> JBoolean True,
        "isolate-network" :-> JBoolean True,
        "usage" :-> JObject (
            "status" :-> JInteger 0,
            "runtime" :-> JInteger 0,
            "cputime" :-> JInteger 0,
            "membytes" :-> JInteger 0,
            "inbytes" :-> JInteger 0,
            "outputs" :-> JInteger 0,
        ),
        "mount-ops" :-> JArray (
            tmpMountOp "/tmp",
            tmpMountOp "/root",
            createDirOp "rust/rsc/.cargo",
            createFileOp "rust/rsc/.cargo/config.toml",
        ),
    )

export def testPostgres _ =
    # First we define a few directories, using various
    # environment variables
    def dataDir = "/tmp/pg_data"

    require Pass postgresDir = match (getenv "POSTGRES_DIR")
        Some dir -> Pass "{dir}/bin"
        None ->
            require Some postgresPath = whichInEnvPath "postgres"
            else failWithError "could not find postgres on path"

            Pass (dirname postgresPath)

    require Pass testBinary = buildRSCTest Unit

    # This script is piped in via stdin so that
    # as shells are opened one after the other,
    # the successive commands are run as intended
    def script =
        """
        set -ex
        unshare -U
        # Set set -ex inside of the unshare shell
        set -ex
        export HOME=/root
        mkdir %{dataDir}
        %{postgresDir}/initdb -D %{dataDir}
        %{postgresDir}/postgres -D %{dataDir} &
        trap "kill $! && sleep 2s" EXIT
        sleep 2s
        %{postgresDir}/createuser -h localhost root
        %{postgresDir}/createdb -h localhost shim
        %{testBinary.getPathName}
        """

    # Jobs require that we write stdin out to a file in order to
    # pipe it in
    require Pass scriptPath = write ".build/postgres-cargo.sh" script

    def pgJson = postgresSpecJson scriptPath.getPathName testBinary.getPathName

    require Pass pgJsonPath = write ".build/postgres-cmd-spec.json" (prettyJSON pgJson)

    def inspectStatus status =
        require (Exited 0) = status
        else failWithError "cargo tests failed"

        Pass status

    makeExecPlan
    ("{wakePath}/wakebox", "-p", pgJsonPath.getPathName, Nil)
    (testBinary, scriptPath, pgJsonPath, Nil)
    | editPlanEnvironment (addEnvironmentPath "/usr/sbin")
    | setPlanEcho logReport
    | setPlanFnOutputs (\_ Nil)
    | runJobWith localRunner
    | getJobStatus
    | inspectStatus
