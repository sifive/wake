# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake
from wake import _

# Require re2c >= 1.3 for flag support
def re2cOk Unit: Result String Error =
    require Some re2c = whichInEnvPath "re2c" 
    else failWithError "re2c not on Path"

    require Some x, Some y, _ =
        makeExecPlan (re2c, "--version", Nil) Nil
        | setPlanLabel "re2c: Get version number"
        | setPlanStdout logNever
        | setPlanStderr logNever
        | runJob
        | getJobStdout
        | getWhenFail ""
        | extract `re2c ([0-9.]+)\n`
        | map (tokenize `\.` _)
        | flatten
        | map int
    else failWithError "failed to determine re2c version"

    require True = (x > 1 || (x == 1 && y > 2))
    else failWithError "re2c version {str x}.{str y} is not 1.3 or higher"

    Pass re2c

def re2cReal re2c file =
    def cpp =
        replace `\.re$` ".cpp" file.getPathName

    def cmdline =
        re2c, "-8", "--no-generation-date", "--input-encoding", "utf8", file.getPathName, "-o", cpp, Nil

    require Pass result =
        makeExecPlan cmdline (file, Nil)
        | setPlanLabel "re2c: {cpp}"
        | runJob
        | getJobOutput

    require Some "1" =
        getenv "UPGRADE_GENERATED"
    else
        Pass result

    def compress =
        which "gzip", "-nk9", result.getPathName, Nil

    def zip =
        makeExecPlan compress (result, Nil)
        | setPlanLabel "re2c: compress generated file"
        | runJob

    match zip.getJobStatus
        Exited 0 = Pass result
        Aborted e = Fail e
        z = failWithError "Non-zero exit status ({format z}) for '{zip.getJobDescription}'"

def re2cFake file =
    def cpp = replace `\.re$` ".cpp" file.getPathName
    require Pass zip =
        source "{cpp}.gz"
    gunzip zip

def gunzip zip =
    def out = replace `\.gz$` "" zip.getPathName
    def script = "%
        set -e
        gzip -dc "%{zip.getPathName}" > "%{out}.tmp"
        mv "%{out}.tmp" "%{out}"
        %"
    makeShellPlan script (zip, Nil)
    | setPlanLabel "gzip: extract {zip.getPathName}"
    | runJob
    | getJobOutput

def re2c (file: Path): Result Path Error =
    match (re2cOk Unit)
        Pass re2c = re2cReal re2c file
        Fail err =
            def _ = if (getenv "UPGRADE_GENERATED" | getOrElse "0") ==* "1"
            then println "[WARN] Requested re2c which is unsatisfiable. Using fake\n  why: {err.getErrorCause}"
            else Unit

            re2cFake file
