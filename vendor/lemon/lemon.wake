# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake
from wake import _
from gcc_wake import _

def buildLemon variant: Result (List Path) Error =
    def Pair _ cVariant =
        variant

    require Pass lemonSource =
        source "{here}/lemon.c"
    require Pass objs =
        compileC cVariant Nil Nil lemonSource

    linkO cVariant Nil objs "{here}/lemon" Nil

def m4 (file: Path): Result Path Error =
    def output =
        replace `\.m4$` "" file.getPathName

    def run =
        makeExecPlan (which "m4", file.getPathName, Nil) (file, Nil)
        | setPlanLabel "lemon: m4 {file.getPathName}"
        | setPlanStdout logNever
        | runJob

    require Pass stdout =
        run.getJobStdout

    match run.getJobStatus
        Exited 0 = write output stdout
        Aborted e = Fail e
        z = failWithError "Non-zero exit status ({format z}) for job {str run.getJobId}: '{run.getJobDescription}'"

def lemon variant (file: Path): Result (Pair Path Path) Error =
    require Pass lemon =
        buildLemon variant

    require Some tool =
        head lemon
    else
        failWithError "lemon compilation produced no output"

    require Pass template =
        source "{here}/lempar.c"

    def cmdline =
        tool.getPathName, "-T{template.getPathName}", file.getPathName, Nil

    require Pass result =
        makeExecPlan cmdline (file, template, lemon)
        | setPlanLabel "lemon: {file.getPathName}"
        | runJob
        | getJobOutputs

    require Some (Pair cfile _) =
        find (matches `.*\.c` _.getPathName) result
    else
        failWithError "lemon produced no C file"

    require Some (Pair hfile _) =
        find (matches `.*\.h` _.getPathName) result
    else
        failWithError "lemon produced no H file"

    require Pass cppfile =
        installAs (replace `\.c$` ".cpp" cfile.getPathName) cfile

    require Some "1" =
        getenv "UPGRADE_GENERATED"
    else
        Pass (Pair cppfile hfile)

    def compress =
        which "gzip", "-nk9", cppfile.getPathName, hfile.getPathName, Nil

    def zip =
        job compress (cppfile, result)

    match zip.getJobStatus
        Exited 0 = Pass (Pair cppfile hfile)
        Aborted e = Fail e
        z = failWithError "Non-zero exit status ({format z}) for job {str zip.getJobId}: '{zip.getJobDescription}'"
