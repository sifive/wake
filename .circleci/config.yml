version: 2.1
jobs:
  tarball:
    machine:
      image: ubuntu-1604:202007-01
#    resource_class: large # paywalled feature: 4 cores
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install -y build-essential libfuse-dev libsqlite3-dev libgmp-dev libncurses5-dev pkg-config git g++ gcc libre2-dev python3-sphinx
      - run: make tarball && mkdir www && ./bin/wake --no-workspace --html > www/index.html
      - run: PATH=$(pwd)/bin:$PATH PYTHONPATH=$(pwd)/scripts python3 scripts/wake2rst.py
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/dockerfiles
            - wake_*.tar.xz
            - debian
            - www
            - scripts/sphinx/build/html

  alpine:
    machine:
      image: ubuntu-1604:202007-01
#      docker_layer_caching: true # paywalled feature: retain docker build results between runs
#    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker build -f /tmp/workspace/.circleci/dockerfiles/alpine -t wake-alpine .
      - run: |
          tar xJf /tmp/workspace/wake_*.tar.xz
          docker run --rm --mount type=bind,source=$PWD,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-alpine make -C wake-* static
          docker run --rm --mount type=bind,source=$PWD,target=/build wake-alpine /bin/sh -c "tar xJf wake-*/wake-static_*; ./wake-*/bin/wake --no-workspace -x 'shellJob \"ls /\" Nil | getJobStdout'"
          install -D -t release/alpine wake-*/wake-static_*
      - persist_to_workspace:
          root: .
          paths:
            - release/alpine

  debian_wheezy:
    machine:
      image: ubuntu-1604:202007-01
#      docker_layer_caching: true
#    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker build -f /tmp/workspace/.circleci/dockerfiles/debian-wheezy -t wake-debian-wheezy .
      - run: |
          x=(/tmp/workspace/wake_*.tar.xz); y=${x%.tar.xz}; cp "$x" "${y##*/}.orig.tar.xz"
          tar xJf wake_*.orig.tar.xz
          cp -a /tmp/workspace/debian wake-*
          docker run --rm --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined --mount type=bind,source=$PWD,target=/build -w /build/$(ls -d wake-*) wake-debian-wheezy debuild -us -uc
          docker run --rm --mount type=bind,source=$PWD,target=/build wake-debian-wheezy /bin/sh -c "dpkg -i *.deb; wake --no-workspace -x 'shellJob \"ls /\" Nil | getJobStdout'"
          install -D -t release/debian_wheezy *.deb *.gz *.xz *.changes *.dsc
      - persist_to_workspace:
          root: .
          paths:
            - release/debian_wheezy

  debian_testing:
    machine:
      image: ubuntu-1604:202007-01
#      docker_layer_caching: true
#    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker build -f /tmp/workspace/.circleci/dockerfiles/debian-testing -t wake-debian-testing .
      - run: |
          x=(/tmp/workspace/wake_*.tar.xz); y=${x%.tar.xz}; cp "$x" "${y##*/}.orig.tar.xz"
          tar xJf wake_*.orig.tar.xz
          cp -a /tmp/workspace/debian wake-*
          docker run --rm --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined --mount type=bind,source=$PWD,target=/build -w /build/$(ls -d wake-*) wake-debian-testing debuild -us -uc
          docker run --rm --mount type=bind,source=$PWD,target=/build wake-debian-testing /bin/sh -c "dpkg -i *.deb; wake --no-workspace -x 'shellJob \"ls /\" Nil | getJobStdout'"
          install -D -t release/debian_testing *.deb *.xz *.changes *.dsc
      - persist_to_workspace:
          root: .
          paths:
            - release/debian_testing

  centos_7_6:
    machine:
      image: ubuntu-1604:202007-01
#      docker_layer_caching: true
#    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker build -f /tmp/workspace/.circleci/dockerfiles/centos-7.6 -t wake-centos-7.6 .
      - run: |
          cp /tmp/workspace/wake_*.tar.xz .
          docker run --rm --mount type=bind,source=$PWD,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined wake-centos-7.6 rpmbuild -ta --define "_rpmdir /build" wake_*.tar.xz
          docker run --rm --mount type=bind,source=$PWD,target=/build wake-centos-7.6 /bin/sh -c "rpm -i x86_64/*.rpm; wake --no-workspace -x 'shellJob \"ls /\" Nil | getJobStdout'"
          install -D -t release/centos_7_6 x86_64/*.rpm
      - persist_to_workspace:
          root: .
          paths:
            - release/centos_7_6

  ubuntu_14_04:
    machine:
      image: ubuntu-1604:202007-01
#      docker_layer_caching: true
#    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker build -f /tmp/workspace/.circleci/dockerfiles/ubuntu-14.04 -t wake-ubuntu-14.04 .
      - run: |
          x=(/tmp/workspace/wake_*.tar.xz); y=${x%.tar.xz}; cp "$x" "${y##*/}.orig.tar.xz"
          tar xJf wake_*.orig.tar.xz
          cp -a /tmp/workspace/debian wake-*
          docker run --rm --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined --mount type=bind,source=$PWD,target=/build -w /build/$(ls -d wake-*) wake-ubuntu-14.04 debuild -us -uc
          docker run --rm --mount type=bind,source=$PWD,target=/build wake-ubuntu-14.04 /bin/sh -c "dpkg -i *.deb; wake --no-workspace -x 'shellJob \"ls /\" Nil | getJobStdout'"
          install -D -t release/ubuntu_14_04 *.deb *.gz *.xz *.changes *.dsc
      - persist_to_workspace:
          root: .
          paths:
            - release/ubuntu_14_04

  ubuntu_16_04:
    machine:
      image: ubuntu-1604:202007-01
#      docker_layer_caching: true
#    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker build -f /tmp/workspace/.circleci/dockerfiles/ubuntu-16.04 -t wake-ubuntu-16.04 .
      - run: |
          x=(/tmp/workspace/wake_*.tar.xz); y=${x%.tar.xz}; cp "$x" "${y##*/}.orig.tar.xz"
          tar xJf wake_*.orig.tar.xz
          cp -a /tmp/workspace/debian wake-*
          docker run --rm --mount type=bind,source=$PWD,target=/build --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined -w /build/$(ls -d wake-*) wake-ubuntu-16.04 debuild -us -uc
          docker run --rm --mount type=bind,source=$PWD,target=/build wake-ubuntu-16.04 /bin/sh -c "dpkg -i *.deb; wake --no-workspace -x 'shellJob \"ls /\" Nil | getJobStdout'"
          install -D -t release/ubuntu_16_04 *.deb *.xz *.changes *.dsc
      - persist_to_workspace:
          root: .
          paths:
            - release/ubuntu_16_04

  ubuntu_18_04:
    machine:
      image: ubuntu-1604:202007-01
#      docker_layer_caching: true
#    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker build -f /tmp/workspace/.circleci/dockerfiles/ubuntu-18.04 -t wake-ubuntu-18.04 .
      - run: |
          x=(/tmp/workspace/wake_*.tar.xz); y=${x%.tar.xz}; cp "$x" "${y##*/}.orig.tar.xz"
          tar xJf wake_*.orig.tar.xz
          cp -a /tmp/workspace/debian wake-*
          docker run --rm --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined --mount type=bind,source=$PWD,target=/build -w /build/$(ls -d wake-*) wake-ubuntu-18.04 debuild -us -uc
          docker run --rm --mount type=bind,source=$PWD,target=/build wake-ubuntu-18.04 /bin/sh -c "dpkg -i *.deb; wake --no-workspace -x 'shellJob \"ls /\" Nil | getJobStdout'"
          install -D -t release/ubuntu_18_04 *.deb *.xz *.changes *.dsc
      - persist_to_workspace:
          root: .
          paths:
            - release/ubuntu_18_04

  release:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cp /tmp/workspace/wake_*.tar.xz /tmp/workspace/release
      - store_artifacts:
          path: /tmp/workspace/release

  docs_deploy:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - "9d:87:e9:4d:46:91:1b:12:bb:a6:ef:16:f1:da:52:49"
      - run: |
          echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" > ~/.ssh/known_hosts
          cd /tmp/workspace/scripts/sphinx/build/html
          cp /tmp/workspace/www/index.html .
          touch .nojekyll
          git init
          git add .
          git -c user.email="ci-wake-build@sifive.com" -c user.name="ci-wake-build" commit -m "[skip ci] Deploy to GitHub Pages"
          git push --force "git@github.com:sifive/wake.git" master:gh-pages

workflows:
  version: 2
  build:
    jobs:
      - tarball
      - alpine:
          requires:
            - tarball
      - debian_testing:
          requires:
            - tarball
      - debian_wheezy:
          requires:
            - tarball
      - centos_7_6:
          requires:
            - tarball
      - ubuntu_14_04:
          requires:
            - tarball
      - ubuntu_16_04:
          requires:
            - tarball
      - ubuntu_18_04:
          requires:
            - tarball
      - release:
          requires:
            - alpine
            - debian_testing # Newest everything
            - debian_wheezy  # Oldest supported compiler
            - centos_7_6
            - ubuntu_14_04   # LTS
            - ubuntu_16_04   # LTS
            - ubuntu_18_04   # LTS
      - docs_deploy:
          requires:
            - release
          filters:
            branches:
              only: master
